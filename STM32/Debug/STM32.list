
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006984  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006b24  08006b24  00016b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bd0  08006bd0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006bd0  08006bd0  00016bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006bd8  08006bd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bd8  08006bd8  00016bd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006bdc  08006bdc  00016bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006be0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  20000070  08006c50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08006c50  00020458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ea2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293e  00000000  00000000  00033f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00036880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001010  00000000  00000000  00037990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ef3  00000000  00000000  000389a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157ad  00000000  00000000  00051893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cb7c  00000000  00000000  00067040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103bbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d20  00000000  00000000  00103c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b0c 	.word	0x08006b0c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08006b0c 	.word	0x08006b0c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <isOK>:
UART_HandleTypeDef huart;
ADC_HandleTypeDef adc;
uint8_t response[50];

uint8_t state=0;
uint8_t isOK(Message msg){
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	e883 0003 	stmia.w	r3, {r0, r1}
	return msg.req+msg.seq+msg.failLimit+msg.ack==msg.check_sum;
 8000dcc:	783b      	ldrb	r3, [r7, #0]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	78bb      	ldrb	r3, [r7, #2]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	78fa      	ldrb	r2, [r7, #3]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	793a      	ldrb	r2, [r7, #4]
 8000dda:	4413      	add	r3, r2
 8000ddc:	797a      	ldrb	r2, [r7, #5]
 8000dde:	4293      	cmp	r3, r2
 8000de0:	bf0c      	ite	eq
 8000de2:	2301      	moveq	r3, #1
 8000de4:	2300      	movne	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <processMessage>:

void processMessage(Message msg){
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	e883 0003 	stmia.w	r3, {r0, r1}
	switch(state){
 8000e00:	4b5d      	ldr	r3, [pc, #372]	; (8000f78 <processMessage+0x184>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	d002      	beq.n	8000e0e <processMessage+0x1a>
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d062      	beq.n	8000ed2 <processMessage+0xde>
				HAL_UART_Transmit(&huart, response, sprintf(response,"!Re-send#"), 500);
				SCH_Add_Task(ResendMessage, TIMEOUT_ACK, TIMEOUT_ACK); //Reset timer for re-send
			}
			break;
	}
}
 8000e0c:	e0b0      	b.n	8000f70 <processMessage+0x17c>
			if(isOK(msg)){ 	 //data transfered from gateway correctly
 8000e0e:	463b      	mov	r3, r7
 8000e10:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e14:	f7ff ffd4 	bl	8000dc0 <isOK>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d04c      	beq.n	8000eb8 <processMessage+0xc4>
				if(msg.req==READ_SENSOR){  //Gateway request read sensor
 8000e1e:	783b      	ldrb	r3, [r7, #0]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	f040 80a2 	bne.w	8000f6a <processMessage+0x176>
					if(msg.type==HUMID_TEMP){
 8000e26:	787b      	ldrb	r3, [r7, #1]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d12a      	bne.n	8000e82 <processMessage+0x8e>
						type=msg.type;
 8000e2c:	787a      	ldrb	r2, [r7, #1]
 8000e2e:	4b53      	ldr	r3, [pc, #332]	; (8000f7c <processMessage+0x188>)
 8000e30:	701a      	strb	r2, [r3, #0]
						ret=ReadDHT(&hi2c);  //Read from sensor
 8000e32:	4853      	ldr	r0, [pc, #332]	; (8000f80 <processMessage+0x18c>)
 8000e34:	f000 f948 	bl	80010c8 <ReadDHT>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]
						if(ret==HAL_OK){ //Read success
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 8093 	bne.w	8000f6a <processMessage+0x176>
							HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e48:	484e      	ldr	r0, [pc, #312]	; (8000f84 <processMessage+0x190>)
 8000e4a:	f002 f8f8 	bl	800303e <HAL_GPIO_TogglePin>
							cseq=msg.seq;
 8000e4e:	78ba      	ldrb	r2, [r7, #2]
 8000e50:	4b4d      	ldr	r3, [pc, #308]	; (8000f88 <processMessage+0x194>)
 8000e52:	701a      	strb	r2, [r3, #0]
							SendValue(msg.type,msg.seq);
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	78ba      	ldrb	r2, [r7, #2]
 8000e58:	4611      	mov	r1, r2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f000 f914 	bl	8001088 <SendValue>
							SCH_Add_Task(ResendMessage, TIMEOUT_ACK, TIMEOUT_ACK);
 8000e60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e68:	4848      	ldr	r0, [pc, #288]	; (8000f8c <processMessage+0x198>)
 8000e6a:	f000 fd5f 	bl	800192c <SCH_Add_Task>
							timeOutCount=0;
 8000e6e:	4b48      	ldr	r3, [pc, #288]	; (8000f90 <processMessage+0x19c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]
							timeOutLimit=msg.failLimit;
 8000e74:	78fa      	ldrb	r2, [r7, #3]
 8000e76:	4b47      	ldr	r3, [pc, #284]	; (8000f94 <processMessage+0x1a0>)
 8000e78:	701a      	strb	r2, [r3, #0]
							state=WAIT_ACK;
 8000e7a:	4b3f      	ldr	r3, [pc, #252]	; (8000f78 <processMessage+0x184>)
 8000e7c:	2202      	movs	r2, #2
 8000e7e:	701a      	strb	r2, [r3, #0]
			break;
 8000e80:	e073      	b.n	8000f6a <processMessage+0x176>
					}else if(msg.type==MQ9){
 8000e82:	787b      	ldrb	r3, [r7, #1]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d170      	bne.n	8000f6a <processMessage+0x176>
						type=msg.type;
 8000e88:	787a      	ldrb	r2, [r7, #1]
 8000e8a:	4b3c      	ldr	r3, [pc, #240]	; (8000f7c <processMessage+0x188>)
 8000e8c:	701a      	strb	r2, [r3, #0]
						cseq=msg.seq;
 8000e8e:	78ba      	ldrb	r2, [r7, #2]
 8000e90:	4b3d      	ldr	r3, [pc, #244]	; (8000f88 <processMessage+0x194>)
 8000e92:	701a      	strb	r2, [r3, #0]
						ReadMQ9(&adc);
 8000e94:	4840      	ldr	r0, [pc, #256]	; (8000f98 <processMessage+0x1a4>)
 8000e96:	f000 fa1b 	bl	80012d0 <ReadMQ9>
						SendValueMQ9(&huart, msg.seq);
 8000e9a:	78bb      	ldrb	r3, [r7, #2]
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	483f      	ldr	r0, [pc, #252]	; (8000f9c <processMessage+0x1a8>)
 8000ea0:	f000 fa74 	bl	800138c <SendValueMQ9>
						timeOutCount=0;
 8000ea4:	4b3a      	ldr	r3, [pc, #232]	; (8000f90 <processMessage+0x19c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	701a      	strb	r2, [r3, #0]
						timeOutLimit=msg.failLimit;
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <processMessage+0x1a0>)
 8000eae:	701a      	strb	r2, [r3, #0]
						state=WAIT_ACK;
 8000eb0:	4b31      	ldr	r3, [pc, #196]	; (8000f78 <processMessage+0x184>)
 8000eb2:	2202      	movs	r2, #2
 8000eb4:	701a      	strb	r2, [r3, #0]
			break;
 8000eb6:	e058      	b.n	8000f6a <processMessage+0x176>
				HAL_UART_Transmit(&huart, response, sprintf(response,"!Re-send#"), 500);
 8000eb8:	4939      	ldr	r1, [pc, #228]	; (8000fa0 <processMessage+0x1ac>)
 8000eba:	483a      	ldr	r0, [pc, #232]	; (8000fa4 <processMessage+0x1b0>)
 8000ebc:	f005 f9c6 	bl	800624c <siprintf>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	b29a      	uxth	r2, r3
 8000ec4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ec8:	4936      	ldr	r1, [pc, #216]	; (8000fa4 <processMessage+0x1b0>)
 8000eca:	4834      	ldr	r0, [pc, #208]	; (8000f9c <processMessage+0x1a8>)
 8000ecc:	f004 f953 	bl	8005176 <HAL_UART_Transmit>
			break;
 8000ed0:	e04b      	b.n	8000f6a <processMessage+0x176>
			if(isOK(msg)){  //Data transfered correctly
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000ed8:	f7ff ff72 	bl	8000dc0 <isOK>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d02e      	beq.n	8000f40 <processMessage+0x14c>
				if((msg.req==NONE) && msg.ack){  //receive ACK, back to WAIT_REQEST
 8000ee2:	783b      	ldrb	r3, [r7, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d109      	bne.n	8000efc <processMessage+0x108>
 8000ee8:	793b      	ldrb	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d006      	beq.n	8000efc <processMessage+0x108>
					state=WAIT_REQ;
 8000eee:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <processMessage+0x184>)
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	701a      	strb	r2, [r3, #0]
					SelfDestruct(ResendMessage);
 8000ef4:	4825      	ldr	r0, [pc, #148]	; (8000f8c <processMessage+0x198>)
 8000ef6:	f000 feb5 	bl	8001c64 <SelfDestruct>
 8000efa:	e035      	b.n	8000f68 <processMessage+0x174>
				}else if(msg.ack==0 || msg.req==READ_SENSOR){ //previous data error or gateway didn't receive data
 8000efc:	793b      	ldrb	r3, [r7, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d002      	beq.n	8000f08 <processMessage+0x114>
 8000f02:	783b      	ldrb	r3, [r7, #0]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d111      	bne.n	8000f2c <processMessage+0x138>
					SendValue(msg.type, cseq);
 8000f08:	787b      	ldrb	r3, [r7, #1]
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <processMessage+0x194>)
 8000f0c:	7812      	ldrb	r2, [r2, #0]
 8000f0e:	4611      	mov	r1, r2
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 f8b9 	bl	8001088 <SendValue>
					SCH_Add_Task(ResendMessage, TIMEOUT_ACK, TIMEOUT_ACK); //Reset timer for re-send
 8000f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f1e:	481b      	ldr	r0, [pc, #108]	; (8000f8c <processMessage+0x198>)
 8000f20:	f000 fd04 	bl	800192c <SCH_Add_Task>
					timeOutCount=0;
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <processMessage+0x19c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	701a      	strb	r2, [r3, #0]
 8000f2a:	e01d      	b.n	8000f68 <processMessage+0x174>
				}else if(msg.req==ABORT){
 8000f2c:	783b      	ldrb	r3, [r7, #0]
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d11d      	bne.n	8000f6e <processMessage+0x17a>
					SelfDestruct(ResendMessage);
 8000f32:	4816      	ldr	r0, [pc, #88]	; (8000f8c <processMessage+0x198>)
 8000f34:	f000 fe96 	bl	8001c64 <SelfDestruct>
					state=WAIT_REQ;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <processMessage+0x184>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
			break;
 8000f3e:	e016      	b.n	8000f6e <processMessage+0x17a>
				HAL_UART_Transmit(&huart, response, sprintf(response,"!Re-send#"), 500);
 8000f40:	4917      	ldr	r1, [pc, #92]	; (8000fa0 <processMessage+0x1ac>)
 8000f42:	4818      	ldr	r0, [pc, #96]	; (8000fa4 <processMessage+0x1b0>)
 8000f44:	f005 f982 	bl	800624c <siprintf>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f50:	4914      	ldr	r1, [pc, #80]	; (8000fa4 <processMessage+0x1b0>)
 8000f52:	4812      	ldr	r0, [pc, #72]	; (8000f9c <processMessage+0x1a8>)
 8000f54:	f004 f90f 	bl	8005176 <HAL_UART_Transmit>
				SCH_Add_Task(ResendMessage, TIMEOUT_ACK, TIMEOUT_ACK); //Reset timer for re-send
 8000f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000f60:	480a      	ldr	r0, [pc, #40]	; (8000f8c <processMessage+0x198>)
 8000f62:	f000 fce3 	bl	800192c <SCH_Add_Task>
			break;
 8000f66:	e002      	b.n	8000f6e <processMessage+0x17a>
 8000f68:	e001      	b.n	8000f6e <processMessage+0x17a>
			break;
 8000f6a:	bf00      	nop
 8000f6c:	e000      	b.n	8000f70 <processMessage+0x17c>
			break;
 8000f6e:	bf00      	nop
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200001a2 	.word	0x200001a2
 8000f7c:	2000008f 	.word	0x2000008f
 8000f80:	20000090 	.word	0x20000090
 8000f84:	40020000 	.word	0x40020000
 8000f88:	2000008c 	.word	0x2000008c
 8000f8c:	08000fa9 	.word	0x08000fa9
 8000f90:	2000008d 	.word	0x2000008d
 8000f94:	2000008e 	.word	0x2000008e
 8000f98:	20000128 	.word	0x20000128
 8000f9c:	200000e4 	.word	0x200000e4
 8000fa0:	08006b24 	.word	0x08006b24
 8000fa4:	20000170 	.word	0x20000170

08000fa8 <ResendMessage>:


void ResendMessage(){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	timeOutCount++;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <ResendMessage+0x5c>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b13      	ldr	r3, [pc, #76]	; (8001004 <ResendMessage+0x5c>)
 8000fb6:	701a      	strb	r2, [r3, #0]
	if(timeOutCount>timeOutLimit){
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <ResendMessage+0x5c>)
 8000fba:	781a      	ldrb	r2, [r3, #0]
 8000fbc:	4b12      	ldr	r3, [pc, #72]	; (8001008 <ResendMessage+0x60>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	d915      	bls.n	8000ff0 <ResendMessage+0x48>
		HAL_UART_Transmit(&huart, response, sprintf(response,"!Abort:%u#",cseq), 500);
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <ResendMessage+0x64>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4911      	ldr	r1, [pc, #68]	; (8001010 <ResendMessage+0x68>)
 8000fcc:	4811      	ldr	r0, [pc, #68]	; (8001014 <ResendMessage+0x6c>)
 8000fce:	f005 f93d 	bl	800624c <siprintf>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	b29a      	uxth	r2, r3
 8000fd6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fda:	490e      	ldr	r1, [pc, #56]	; (8001014 <ResendMessage+0x6c>)
 8000fdc:	480e      	ldr	r0, [pc, #56]	; (8001018 <ResendMessage+0x70>)
 8000fde:	f004 f8ca 	bl	8005176 <HAL_UART_Transmit>
		SelfDestruct(ResendMessage);
 8000fe2:	480e      	ldr	r0, [pc, #56]	; (800101c <ResendMessage+0x74>)
 8000fe4:	f000 fe3e 	bl	8001c64 <SelfDestruct>
		state=WAIT_REQ;
 8000fe8:	4b0d      	ldr	r3, [pc, #52]	; (8001020 <ResendMessage+0x78>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	701a      	strb	r2, [r3, #0]
		return;
 8000fee:	e007      	b.n	8001000 <ResendMessage+0x58>
	}
	SendValue(type, cseq);
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <ResendMessage+0x7c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <ResendMessage+0x64>)
 8000ff6:	7812      	ldrb	r2, [r2, #0]
 8000ff8:	4611      	mov	r1, r2
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f844 	bl	8001088 <SendValue>
}
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	2000008d 	.word	0x2000008d
 8001008:	2000008e 	.word	0x2000008e
 800100c:	2000008c 	.word	0x2000008c
 8001010:	08006b30 	.word	0x08006b30
 8001014:	20000170 	.word	0x20000170
 8001018:	200000e4 	.word	0x200000e4
 800101c:	08000fa9 	.word	0x08000fa9
 8001020:	200001a2 	.word	0x200001a2
 8001024:	2000008f 	.word	0x2000008f

08001028 <ControllerInit>:
void ControllerInit(Connectivity conn){
 8001028:	b084      	sub	sp, #16
 800102a:	b580      	push	{r7, lr}
 800102c:	af00      	add	r7, sp, #0
 800102e:	f107 0c08 	add.w	ip, r7, #8
 8001032:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=conn.hi2c;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <ControllerInit+0x50>)
 8001038:	4618      	mov	r0, r3
 800103a:	f107 0308 	add.w	r3, r7, #8
 800103e:	2254      	movs	r2, #84	; 0x54
 8001040:	4619      	mov	r1, r3
 8001042:	f005 f8ed 	bl	8006220 <memcpy>
	huart=conn.huart;
 8001046:	4b0d      	ldr	r3, [pc, #52]	; (800107c <ControllerInit+0x54>)
 8001048:	4618      	mov	r0, r3
 800104a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800104e:	2244      	movs	r2, #68	; 0x44
 8001050:	4619      	mov	r1, r3
 8001052:	f005 f8e5 	bl	8006220 <memcpy>
	adc=conn.adc;
 8001056:	4b0a      	ldr	r3, [pc, #40]	; (8001080 <ControllerInit+0x58>)
 8001058:	4618      	mov	r0, r3
 800105a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800105e:	2248      	movs	r2, #72	; 0x48
 8001060:	4619      	mov	r1, r3
 8001062:	f005 f8dd 	bl	8006220 <memcpy>
	state=WAIT_REQ;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <ControllerInit+0x5c>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001074:	b004      	add	sp, #16
 8001076:	4770      	bx	lr
 8001078:	20000090 	.word	0x20000090
 800107c:	200000e4 	.word	0x200000e4
 8001080:	20000128 	.word	0x20000128
 8001084:	200001a2 	.word	0x200001a2

08001088 <SendValue>:

void SendValue(uint8_t type, uint8_t seq){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	if(type==HUMID_TEMP){
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d105      	bne.n	80010aa <SendValue+0x22>
		SendValueDHT(&huart, seq);
 800109e:	79bb      	ldrb	r3, [r7, #6]
 80010a0:	4619      	mov	r1, r3
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <SendValue+0x3c>)
 80010a4:	f000 f880 	bl	80011a8 <SendValueDHT>
	}else if(type==MQ9){
		SendValueMQ9(&huart, seq);
	}
}
 80010a8:	e007      	b.n	80010ba <SendValue+0x32>
	}else if(type==MQ9){
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d104      	bne.n	80010ba <SendValue+0x32>
		SendValueMQ9(&huart, seq);
 80010b0:	79bb      	ldrb	r3, [r7, #6]
 80010b2:	4619      	mov	r1, r3
 80010b4:	4803      	ldr	r0, [pc, #12]	; (80010c4 <SendValue+0x3c>)
 80010b6:	f000 f969 	bl	800138c <SendValueMQ9>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200000e4 	.word	0x200000e4

080010c8 <ReadDHT>:
uint8_t humid_int=0;
uint8_t humid_float=0;
uint8_t checksum;

uint8_t buf[5];
HAL_StatusTypeDef ReadDHT(I2C_HandleTypeDef*hi2c){
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af02      	add	r7, sp, #8
 80010ce:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;
	ret=HAL_I2C_Master_Transmit(hi2c, DHT12, 0x00, 1, 1000);
 80010d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	2301      	movs	r3, #1
 80010d8:	2200      	movs	r2, #0
 80010da:	21b8      	movs	r1, #184	; 0xb8
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f002 f90d 	bl	80032fc <HAL_I2C_Master_Transmit>
 80010e2:	4603      	mov	r3, r0
 80010e4:	73fb      	strb	r3, [r7, #15]
	if(ret==HAL_OK){
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d14b      	bne.n	8001184 <ReadDHT+0xbc>
		ret=HAL_I2C_Master_Receive(hi2c, DHT12, buf, 5, 1000);
 80010ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	2305      	movs	r3, #5
 80010f4:	4a26      	ldr	r2, [pc, #152]	; (8001190 <ReadDHT+0xc8>)
 80010f6:	21b8      	movs	r1, #184	; 0xb8
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f002 f9fd 	bl	80034f8 <HAL_I2C_Master_Receive>
 80010fe:	4603      	mov	r3, r0
 8001100:	73fb      	strb	r3, [r7, #15]
		if(ret==HAL_OK){
 8001102:	7bfb      	ldrb	r3, [r7, #15]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d13d      	bne.n	8001184 <ReadDHT+0xbc>
			checksum=buf[4];
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <ReadDHT+0xc8>)
 800110a:	791a      	ldrb	r2, [r3, #4]
 800110c:	4b21      	ldr	r3, [pc, #132]	; (8001194 <ReadDHT+0xcc>)
 800110e:	701a      	strb	r2, [r3, #0]
			if(buf[0]+buf[1]+buf[2]+buf[3]==buf[4]){
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <ReadDHT+0xc8>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	461a      	mov	r2, r3
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <ReadDHT+0xc8>)
 8001118:	785b      	ldrb	r3, [r3, #1]
 800111a:	4413      	add	r3, r2
 800111c:	4a1c      	ldr	r2, [pc, #112]	; (8001190 <ReadDHT+0xc8>)
 800111e:	7892      	ldrb	r2, [r2, #2]
 8001120:	4413      	add	r3, r2
 8001122:	4a1b      	ldr	r2, [pc, #108]	; (8001190 <ReadDHT+0xc8>)
 8001124:	78d2      	ldrb	r2, [r2, #3]
 8001126:	4413      	add	r3, r2
 8001128:	4a19      	ldr	r2, [pc, #100]	; (8001190 <ReadDHT+0xc8>)
 800112a:	7912      	ldrb	r2, [r2, #4]
 800112c:	4293      	cmp	r3, r2
 800112e:	d127      	bne.n	8001180 <ReadDHT+0xb8>
				humid_int=buf[0];
 8001130:	4b17      	ldr	r3, [pc, #92]	; (8001190 <ReadDHT+0xc8>)
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	4b18      	ldr	r3, [pc, #96]	; (8001198 <ReadDHT+0xd0>)
 8001136:	701a      	strb	r2, [r3, #0]
				humid_float=buf[1];
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <ReadDHT+0xc8>)
 800113a:	785a      	ldrb	r2, [r3, #1]
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <ReadDHT+0xd4>)
 800113e:	701a      	strb	r2, [r3, #0]
				uint8_t temp_int=buf[2];
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <ReadDHT+0xc8>)
 8001142:	789b      	ldrb	r3, [r3, #2]
 8001144:	73bb      	strb	r3, [r7, #14]
				temp_float=buf[3];
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <ReadDHT+0xc8>)
 8001148:	78da      	ldrb	r2, [r3, #3]
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <ReadDHT+0xd8>)
 800114c:	701a      	strb	r2, [r3, #0]
				if(temp_float>=0x80){  //negative temperature
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <ReadDHT+0xd8>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	b25b      	sxtb	r3, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	da07      	bge.n	8001168 <ReadDHT+0xa0>
					tempInt=(-1)*temp_int;
 8001158:	7bbb      	ldrb	r3, [r7, #14]
 800115a:	b29b      	uxth	r3, r3
 800115c:	425b      	negs	r3, r3
 800115e:	b29b      	uxth	r3, r3
 8001160:	b21a      	sxth	r2, r3
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <ReadDHT+0xdc>)
 8001164:	801a      	strh	r2, [r3, #0]
 8001166:	e003      	b.n	8001170 <ReadDHT+0xa8>
				}else tempInt=temp_int;
 8001168:	7bbb      	ldrb	r3, [r7, #14]
 800116a:	b21a      	sxth	r2, r3
 800116c:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <ReadDHT+0xdc>)
 800116e:	801a      	strh	r2, [r3, #0]
				temp_float=(temp_float<<1)>>1;
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <ReadDHT+0xd8>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	105b      	asrs	r3, r3, #1
 8001178:	b2da      	uxtb	r2, r3
 800117a:	4b09      	ldr	r3, [pc, #36]	; (80011a0 <ReadDHT+0xd8>)
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e001      	b.n	8001184 <ReadDHT+0xbc>
			}else return !HAL_OK;
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <ReadDHT+0xbe>
		}
	}
	return ret;
 8001184:	7bfb      	ldrb	r3, [r7, #15]
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200001ac 	.word	0x200001ac
 8001194:	200001a9 	.word	0x200001a9
 8001198:	200001a7 	.word	0x200001a7
 800119c:	200001a8 	.word	0x200001a8
 80011a0:	200001a6 	.word	0x200001a6
 80011a4:	200001a4 	.word	0x200001a4

080011a8 <SendValueDHT>:
uint8_t str[50];
void SendValueDHT(UART_HandleTypeDef*huart,uint8_t seq){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	70fb      	strb	r3, [r7, #3]
	//SEND TEMP
	uint16_t check_sum=seq+tempInt+temp_float+3;
 80011b4:	78fb      	ldrb	r3, [r7, #3]
 80011b6:	b29a      	uxth	r2, r3
 80011b8:	4b28      	ldr	r3, [pc, #160]	; (800125c <SendValueDHT+0xb4>)
 80011ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	4413      	add	r3, r2
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <SendValueDHT+0xb8>)
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	3303      	adds	r3, #3
 80011d0:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(huart, str,
		sprintf(str,"!%u:%u:%u:T:%d:%u:%u#",seq, 1, 2,tempInt, temp_float,check_sum), 100);
 80011d2:	78fa      	ldrb	r2, [r7, #3]
 80011d4:	4b21      	ldr	r3, [pc, #132]	; (800125c <SendValueDHT+0xb4>)
 80011d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011da:	4619      	mov	r1, r3
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <SendValueDHT+0xb8>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	89fb      	ldrh	r3, [r7, #14]
 80011e4:	9303      	str	r3, [sp, #12]
 80011e6:	9002      	str	r0, [sp, #8]
 80011e8:	9101      	str	r1, [sp, #4]
 80011ea:	2302      	movs	r3, #2
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	491c      	ldr	r1, [pc, #112]	; (8001264 <SendValueDHT+0xbc>)
 80011f2:	481d      	ldr	r0, [pc, #116]	; (8001268 <SendValueDHT+0xc0>)
 80011f4:	f005 f82a 	bl	800624c <siprintf>
 80011f8:	4603      	mov	r3, r0
	HAL_UART_Transmit(huart, str,
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	491a      	ldr	r1, [pc, #104]	; (8001268 <SendValueDHT+0xc0>)
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f003 ffb8 	bl	8005176 <HAL_UART_Transmit>
	//SEND HUMIDITY
	check_sum=seq+humid_int+humid_float+4;
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <SendValueDHT+0xc4>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	b29b      	uxth	r3, r3
 8001210:	4413      	add	r3, r2
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <SendValueDHT+0xc8>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	b29b      	uxth	r3, r3
 800121a:	4413      	add	r3, r2
 800121c:	b29b      	uxth	r3, r3
 800121e:	3304      	adds	r3, #4
 8001220:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(huart, str,
		sprintf(str,"!%u:%u:%u:H:%u:%u:%u#",seq, 2 , 2, humid_int, humid_float,check_sum), 100);
 8001222:	78fa      	ldrb	r2, [r7, #3]
 8001224:	4b11      	ldr	r3, [pc, #68]	; (800126c <SendValueDHT+0xc4>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	4619      	mov	r1, r3
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <SendValueDHT+0xc8>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	4618      	mov	r0, r3
 8001230:	89fb      	ldrh	r3, [r7, #14]
 8001232:	9303      	str	r3, [sp, #12]
 8001234:	9002      	str	r0, [sp, #8]
 8001236:	9101      	str	r1, [sp, #4]
 8001238:	2302      	movs	r3, #2
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2302      	movs	r3, #2
 800123e:	490d      	ldr	r1, [pc, #52]	; (8001274 <SendValueDHT+0xcc>)
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <SendValueDHT+0xc0>)
 8001242:	f005 f803 	bl	800624c <siprintf>
 8001246:	4603      	mov	r3, r0
	HAL_UART_Transmit(huart, str,
 8001248:	b29a      	uxth	r2, r3
 800124a:	2364      	movs	r3, #100	; 0x64
 800124c:	4906      	ldr	r1, [pc, #24]	; (8001268 <SendValueDHT+0xc0>)
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f003 ff91 	bl	8005176 <HAL_UART_Transmit>
}
 8001254:	bf00      	nop
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200001a4 	.word	0x200001a4
 8001260:	200001a6 	.word	0x200001a6
 8001264:	08006b3c 	.word	0x08006b3c
 8001268:	200001b4 	.word	0x200001b4
 800126c:	200001a7 	.word	0x200001a7
 8001270:	200001a8 	.word	0x200001a8
 8001274:	08006b54 	.word	0x08006b54

08001278 <Int_to_Volt>:
 *      Author: DELL
 */

#include "MQ9.h"
float Ratio;
float Int_to_Volt(uint32_t value){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	return (value/4098.0)*VOLT_INPUT;
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff f93f 	bl	8000504 <__aeabi_ui2d>
 8001286:	a30e      	add	r3, pc, #56	; (adr r3, 80012c0 <Int_to_Volt+0x48>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff fade 	bl	800084c <__aeabi_ddiv>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	a30b      	add	r3, pc, #44	; (adr r3, 80012c8 <Int_to_Volt+0x50>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff f9ab 	bl	80005f8 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4610      	mov	r0, r2
 80012a8:	4619      	mov	r1, r3
 80012aa:	f7ff fbb7 	bl	8000a1c <__aeabi_d2f>
 80012ae:	4603      	mov	r3, r0
 80012b0:	ee07 3a90 	vmov	s15, r3
}
 80012b4:	eeb0 0a67 	vmov.f32	s0, s15
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	00000000 	.word	0x00000000
 80012c4:	40b00200 	.word	0x40b00200
 80012c8:	66666666 	.word	0x66666666
 80012cc:	400a6666 	.word	0x400a6666

080012d0 <ReadMQ9>:

float ReadMQ9(ADC_HandleTypeDef*adc){
 80012d0:	b5b0      	push	{r4, r5, r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(adc);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f000 ffc1 	bl	8002260 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(adc,100);
 80012de:	2164      	movs	r1, #100	; 0x64
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f001 f8a4 	bl	800242e <HAL_ADC_PollForConversion>
	uint32_t value=HAL_ADC_GetValue(adc);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f001 f92c 	bl	8002544 <HAL_ADC_GetValue>
 80012ec:	6178      	str	r0, [r7, #20]
	HAL_ADC_Stop(adc);
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f001 f86a 	bl	80023c8 <HAL_ADC_Stop>
	float valueVolt=Int_to_Volt(value);
 80012f4:	6978      	ldr	r0, [r7, #20]
 80012f6:	f7ff ffbf 	bl	8001278 <Int_to_Volt>
 80012fa:	ed87 0a04 	vstr	s0, [r7, #16]
	float Rs=(VOLT_INPUT-valueVolt)/valueVolt;
 80012fe:	6938      	ldr	r0, [r7, #16]
 8001300:	f7ff f922 	bl	8000548 <__aeabi_f2d>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	a11c      	add	r1, pc, #112	; (adr r1, 800137c <ReadMQ9+0xac>)
 800130a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800130e:	f7fe ffbb 	bl	8000288 <__aeabi_dsub>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4614      	mov	r4, r2
 8001318:	461d      	mov	r5, r3
 800131a:	6938      	ldr	r0, [r7, #16]
 800131c:	f7ff f914 	bl	8000548 <__aeabi_f2d>
 8001320:	4602      	mov	r2, r0
 8001322:	460b      	mov	r3, r1
 8001324:	4620      	mov	r0, r4
 8001326:	4629      	mov	r1, r5
 8001328:	f7ff fa90 	bl	800084c <__aeabi_ddiv>
 800132c:	4602      	mov	r2, r0
 800132e:	460b      	mov	r3, r1
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f7ff fb72 	bl	8000a1c <__aeabi_d2f>
 8001338:	4603      	mov	r3, r0
 800133a:	60fb      	str	r3, [r7, #12]
	float ratio=Rs/R0;
 800133c:	68f8      	ldr	r0, [r7, #12]
 800133e:	f7ff f903 	bl	8000548 <__aeabi_f2d>
 8001342:	a310      	add	r3, pc, #64	; (adr r3, 8001384 <ReadMQ9+0xb4>)
 8001344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001348:	f7ff fa80 	bl	800084c <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	4610      	mov	r0, r2
 8001352:	4619      	mov	r1, r3
 8001354:	f7ff fb62 	bl	8000a1c <__aeabi_d2f>
 8001358:	4603      	mov	r3, r0
 800135a:	60bb      	str	r3, [r7, #8]
	Ratio=ratio;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <ReadMQ9+0xa8>)
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	6013      	str	r3, [r2, #0]
	return ratio;
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	ee07 3a90 	vmov	s15, r3
}
 8001368:	eeb0 0a67 	vmov.f32	s0, s15
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bdb0      	pop	{r4, r5, r7, pc}
 8001372:	bf00      	nop
 8001374:	f3af 8000 	nop.w
 8001378:	200001e8 	.word	0x200001e8
 800137c:	66666666 	.word	0x66666666
 8001380:	400a6666 	.word	0x400a6666
 8001384:	33333333 	.word	0x33333333
 8001388:	3fd33333 	.word	0x3fd33333

0800138c <SendValueMQ9>:

uint8_t str1[50];
void SendValueMQ9(UART_HandleTypeDef*huart,uint8_t seq){
 800138c:	b580      	push	{r7, lr}
 800138e:	b08a      	sub	sp, #40	; 0x28
 8001390:	af04      	add	r7, sp, #16
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
	//Send ratio
	int Int_part=(int)Ratio;
 8001398:	4b21      	ldr	r3, [pc, #132]	; (8001420 <SendValueMQ9+0x94>)
 800139a:	edd3 7a00 	vldr	s15, [r3]
 800139e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a2:	ee17 3a90 	vmov	r3, s15
 80013a6:	617b      	str	r3, [r7, #20]
	float decimal_part= Ratio-Int_part;
 80013a8:	4b1d      	ldr	r3, [pc, #116]	; (8001420 <SendValueMQ9+0x94>)
 80013aa:	ed93 7a00 	vldr	s14, [r3]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013bc:	edc7 7a04 	vstr	s15, [r7, #16]
	int Decimal_part=(int)(decimal_part*100);
 80013c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013c4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001424 <SendValueMQ9+0x98>
 80013c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013d0:	ee17 3a90 	vmov	r3, s15
 80013d4:	60fb      	str	r3, [r7, #12]
	//Send safety signal
//	int Int_part=Ratio>=DANGER_RATIO;
//	int Decimal_part=0;
	//////////////////////

	uint16_t check_sum=seq+Int_part+Decimal_part+2;
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	b29a      	uxth	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	4413      	add	r3, r2
 80013e0:	b29a      	uxth	r2, r3
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	4413      	add	r3, r2
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	3302      	adds	r3, #2
 80013ec:	817b      	strh	r3, [r7, #10]
	HAL_UART_Transmit(huart, str1,
		sprintf(str1,"!%u:%u:%u:G:%u:%u:%u#",seq, 1 , 1, Int_part, Decimal_part,check_sum), 100);
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	897b      	ldrh	r3, [r7, #10]
 80013f2:	9303      	str	r3, [sp, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	9302      	str	r3, [sp, #8]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	2301      	movs	r3, #1
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	2301      	movs	r3, #1
 8001402:	4909      	ldr	r1, [pc, #36]	; (8001428 <SendValueMQ9+0x9c>)
 8001404:	4809      	ldr	r0, [pc, #36]	; (800142c <SendValueMQ9+0xa0>)
 8001406:	f004 ff21 	bl	800624c <siprintf>
 800140a:	4603      	mov	r3, r0
	HAL_UART_Transmit(huart, str1,
 800140c:	b29a      	uxth	r2, r3
 800140e:	2364      	movs	r3, #100	; 0x64
 8001410:	4906      	ldr	r1, [pc, #24]	; (800142c <SendValueMQ9+0xa0>)
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f003 feaf 	bl	8005176 <HAL_UART_Transmit>
}
 8001418:	bf00      	nop
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200001e8 	.word	0x200001e8
 8001424:	42c80000 	.word	0x42c80000
 8001428:	08006b6c 	.word	0x08006b6c
 800142c:	200001ec 	.word	0x200001ec

08001430 <TimerRun>:
void setTimer4(int duration){
	counter4=duration/TIMER_CYCLE;
	timer4_flag=0;
}

void TimerRun(){
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
	if(counter1>0){
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <TimerRun+0x90>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b00      	cmp	r3, #0
 800143a:	dd0b      	ble.n	8001454 <TimerRun+0x24>
		counter1--;
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <TimerRun+0x90>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	3b01      	subs	r3, #1
 8001442:	4a1f      	ldr	r2, [pc, #124]	; (80014c0 <TimerRun+0x90>)
 8001444:	6013      	str	r3, [r2, #0]
		if(counter1<=0){
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <TimerRun+0x90>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	dc02      	bgt.n	8001454 <TimerRun+0x24>
			timer1_flag=1;
 800144e:	4b1d      	ldr	r3, [pc, #116]	; (80014c4 <TimerRun+0x94>)
 8001450:	2201      	movs	r2, #1
 8001452:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter2>0){
 8001454:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <TimerRun+0x98>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	dd0b      	ble.n	8001474 <TimerRun+0x44>
		counter2--;
 800145c:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <TimerRun+0x98>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	3b01      	subs	r3, #1
 8001462:	4a19      	ldr	r2, [pc, #100]	; (80014c8 <TimerRun+0x98>)
 8001464:	6013      	str	r3, [r2, #0]
		if(counter2<=0){
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <TimerRun+0x98>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	dc02      	bgt.n	8001474 <TimerRun+0x44>
			timer2_flag=1;
 800146e:	4b17      	ldr	r3, [pc, #92]	; (80014cc <TimerRun+0x9c>)
 8001470:	2201      	movs	r2, #1
 8001472:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter3>0){
 8001474:	4b16      	ldr	r3, [pc, #88]	; (80014d0 <TimerRun+0xa0>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	dd0b      	ble.n	8001494 <TimerRun+0x64>
		counter3--;
 800147c:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <TimerRun+0xa0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	3b01      	subs	r3, #1
 8001482:	4a13      	ldr	r2, [pc, #76]	; (80014d0 <TimerRun+0xa0>)
 8001484:	6013      	str	r3, [r2, #0]
		if(counter3<=0){
 8001486:	4b12      	ldr	r3, [pc, #72]	; (80014d0 <TimerRun+0xa0>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	dc02      	bgt.n	8001494 <TimerRun+0x64>
			timer3_flag=1;
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <TimerRun+0xa4>)
 8001490:	2201      	movs	r2, #1
 8001492:	601a      	str	r2, [r3, #0]
		}
	}

	if(counter4>0){
 8001494:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <TimerRun+0xa8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	dd0b      	ble.n	80014b4 <TimerRun+0x84>
		counter4--;
 800149c:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <TimerRun+0xa8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3b01      	subs	r3, #1
 80014a2:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <TimerRun+0xa8>)
 80014a4:	6013      	str	r3, [r2, #0]
		if(counter4<=0){
 80014a6:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <TimerRun+0xa8>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	dc02      	bgt.n	80014b4 <TimerRun+0x84>
			timer4_flag=1;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <TimerRun+0xac>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]
		}
	}
}
 80014b4:	bf00      	nop
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20000220 	.word	0x20000220
 80014c4:	20000224 	.word	0x20000224
 80014c8:	20000228 	.word	0x20000228
 80014cc:	2000022c 	.word	0x2000022c
 80014d0:	20000230 	.word	0x20000230
 80014d4:	20000234 	.word	0x20000234
 80014d8:	20000238 	.word	0x20000238
 80014dc:	2000023c 	.word	0x2000023c

080014e0 <HAL_UART_RxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint8_t temp[READ_BUFF];
uint8_t text[50];
void HAL_UART_RxCpltCallback(UART_HandleTypeDef*huart){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

	HAL_UART_Receive_IT(&huart2, temp, READ_BUFF);
 80014e8:	2206      	movs	r2, #6
 80014ea:	4910      	ldr	r1, [pc, #64]	; (800152c <HAL_UART_RxCpltCallback+0x4c>)
 80014ec:	4810      	ldr	r0, [pc, #64]	; (8001530 <HAL_UART_RxCpltCallback+0x50>)
 80014ee:	f003 fed4 	bl	800529a <HAL_UART_Receive_IT>

	Message mess;
	mess.req=temp[0];
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <HAL_UART_RxCpltCallback+0x4c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	723b      	strb	r3, [r7, #8]
	mess.type=temp[1];
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_UART_RxCpltCallback+0x4c>)
 80014fa:	785b      	ldrb	r3, [r3, #1]
 80014fc:	727b      	strb	r3, [r7, #9]
	mess.seq=temp[2];
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <HAL_UART_RxCpltCallback+0x4c>)
 8001500:	789b      	ldrb	r3, [r3, #2]
 8001502:	72bb      	strb	r3, [r7, #10]
	mess.failLimit=temp[3];
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_UART_RxCpltCallback+0x4c>)
 8001506:	78db      	ldrb	r3, [r3, #3]
 8001508:	72fb      	strb	r3, [r7, #11]
	mess.ack=temp[4];
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <HAL_UART_RxCpltCallback+0x4c>)
 800150c:	791b      	ldrb	r3, [r3, #4]
 800150e:	733b      	strb	r3, [r7, #12]
	mess.check_sum=temp[5];
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_UART_RxCpltCallback+0x4c>)
 8001512:	795b      	ldrb	r3, [r3, #5]
 8001514:	737b      	strb	r3, [r7, #13]
//	HAL_UART_Transmit(&huart2, text, sprintf(text,"!MCU%u:%u:%u:%u:%u:%u#",temp[0],temp[1],temp[2],temp[3],temp[4],temp[5]), 100);
	processMessage(mess);
 8001516:	f107 0308 	add.w	r3, r7, #8
 800151a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800151e:	f7ff fc69 	bl	8000df4 <processMessage>

}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000368 	.word	0x20000368
 8001530:	20000324 	.word	0x20000324

08001534 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b0ec      	sub	sp, #432	; 0x1b0
 8001538:	af34      	add	r7, sp, #208	; 0xd0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153a:	f000 fddb 	bl	80020f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153e:	f000 f841 	bl	80015c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001542:	f000 f993 	bl	800186c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001546:	f000 f91b 	bl	8001780 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 800154a:	f000 f965 	bl	8001818 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 800154e:	f000 f8e9 	bl	8001724 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001552:	f000 f895 	bl	8001680 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001556:	4816      	ldr	r0, [pc, #88]	; (80015b0 <main+0x7c>)
 8001558:	f003 f9ca 	bl	80048f0 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, &temp, READ_BUFF);
 800155c:	2206      	movs	r2, #6
 800155e:	4915      	ldr	r1, [pc, #84]	; (80015b4 <main+0x80>)
 8001560:	4815      	ldr	r0, [pc, #84]	; (80015b8 <main+0x84>)
 8001562:	f003 fe9a 	bl	800529a <HAL_UART_Receive_IT>
  Connectivity conn;
  conn.hi2c=hi2c2;
 8001566:	4a15      	ldr	r2, [pc, #84]	; (80015bc <main+0x88>)
 8001568:	463b      	mov	r3, r7
 800156a:	4611      	mov	r1, r2
 800156c:	2254      	movs	r2, #84	; 0x54
 800156e:	4618      	mov	r0, r3
 8001570:	f004 fe56 	bl	8006220 <memcpy>
  conn.huart=huart2;
 8001574:	4a10      	ldr	r2, [pc, #64]	; (80015b8 <main+0x84>)
 8001576:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800157a:	4611      	mov	r1, r2
 800157c:	2244      	movs	r2, #68	; 0x44
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fe4e 	bl	8006220 <memcpy>
  conn.adc=hadc1;
 8001584:	4a0e      	ldr	r2, [pc, #56]	; (80015c0 <main+0x8c>)
 8001586:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800158a:	4611      	mov	r1, r2
 800158c:	2248      	movs	r2, #72	; 0x48
 800158e:	4618      	mov	r0, r3
 8001590:	f004 fe46 	bl	8006220 <memcpy>
  ControllerInit(conn);
 8001594:	4668      	mov	r0, sp
 8001596:	f107 0310 	add.w	r3, r7, #16
 800159a:	22d0      	movs	r2, #208	; 0xd0
 800159c:	4619      	mov	r1, r3
 800159e:	f004 fe3f 	bl	8006220 <memcpy>
 80015a2:	463b      	mov	r3, r7
 80015a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015a6:	f7ff fd3f 	bl	8001028 <ControllerInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCH_Dispatch();
 80015aa:	f000 fac9 	bl	8001b40 <SCH_Dispatch>
 80015ae:	e7fc      	b.n	80015aa <main+0x76>
 80015b0:	200002dc 	.word	0x200002dc
 80015b4:	20000368 	.word	0x20000368
 80015b8:	20000324 	.word	0x20000324
 80015bc:	20000288 	.word	0x20000288
 80015c0:	20000240 	.word	0x20000240

080015c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b094      	sub	sp, #80	; 0x50
 80015c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ca:	f107 0320 	add.w	r3, r7, #32
 80015ce:	2230      	movs	r2, #48	; 0x30
 80015d0:	2100      	movs	r1, #0
 80015d2:	4618      	mov	r0, r3
 80015d4:	f004 fe32 	bl	800623c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	605a      	str	r2, [r3, #4]
 80015e2:	609a      	str	r2, [r3, #8]
 80015e4:	60da      	str	r2, [r3, #12]
 80015e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	2300      	movs	r3, #0
 80015ea:	60bb      	str	r3, [r7, #8]
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <SystemClock_Config+0xb4>)
 80015ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f0:	4a21      	ldr	r2, [pc, #132]	; (8001678 <SystemClock_Config+0xb4>)
 80015f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f6:	6413      	str	r3, [r2, #64]	; 0x40
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <SystemClock_Config+0xb4>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001604:	2300      	movs	r3, #0
 8001606:	607b      	str	r3, [r7, #4]
 8001608:	4b1c      	ldr	r3, [pc, #112]	; (800167c <SystemClock_Config+0xb8>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a1b      	ldr	r2, [pc, #108]	; (800167c <SystemClock_Config+0xb8>)
 800160e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001612:	6013      	str	r3, [r2, #0]
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <SystemClock_Config+0xb8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001620:	2302      	movs	r3, #2
 8001622:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001624:	2301      	movs	r3, #1
 8001626:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001628:	2310      	movs	r3, #16
 800162a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800162c:	2300      	movs	r3, #0
 800162e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001630:	f107 0320 	add.w	r3, r7, #32
 8001634:	4618      	mov	r0, r3
 8001636:	f002 fcb3 	bl	8003fa0 <HAL_RCC_OscConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001640:	f000 f96e 	bl	8001920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001644:	230f      	movs	r3, #15
 8001646:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f002 ff16 	bl	8004490 <HAL_RCC_ClockConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800166a:	f000 f959 	bl	8001920 <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3750      	adds	r7, #80	; 0x50
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800
 800167c:	40007000 	.word	0x40007000

08001680 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001686:	463b      	mov	r3, r7
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001692:	4b21      	ldr	r3, [pc, #132]	; (8001718 <MX_ADC1_Init+0x98>)
 8001694:	4a21      	ldr	r2, [pc, #132]	; (800171c <MX_ADC1_Init+0x9c>)
 8001696:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <MX_ADC1_Init+0x98>)
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <MX_ADC1_Init+0x98>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016a4:	4b1c      	ldr	r3, [pc, #112]	; (8001718 <MX_ADC1_Init+0x98>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80016aa:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_ADC1_Init+0x98>)
 80016ac:	2201      	movs	r2, #1
 80016ae:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <MX_ADC1_Init+0x98>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016b8:	4b17      	ldr	r3, [pc, #92]	; (8001718 <MX_ADC1_Init+0x98>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_ADC1_Init+0x98>)
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <MX_ADC1_Init+0xa0>)
 80016c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_ADC1_Init+0x98>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_ADC1_Init+0x98>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_ADC1_Init+0x98>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_ADC1_Init+0x98>)
 80016da:	2201      	movs	r2, #1
 80016dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016de:	480e      	ldr	r0, [pc, #56]	; (8001718 <MX_ADC1_Init+0x98>)
 80016e0:	f000 fd7a 	bl	80021d8 <HAL_ADC_Init>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80016ea:	f000 f919 	bl	8001920 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016ee:	2300      	movs	r3, #0
 80016f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016f2:	2301      	movs	r3, #1
 80016f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80016f6:	2305      	movs	r3, #5
 80016f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016fa:	463b      	mov	r3, r7
 80016fc:	4619      	mov	r1, r3
 80016fe:	4806      	ldr	r0, [pc, #24]	; (8001718 <MX_ADC1_Init+0x98>)
 8001700:	f000 ff2e 	bl	8002560 <HAL_ADC_ConfigChannel>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800170a:	f000 f909 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000240 	.word	0x20000240
 800171c:	40012000 	.word	0x40012000
 8001720:	0f000001 	.word	0x0f000001

08001724 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <MX_I2C2_Init+0x50>)
 800172a:	4a13      	ldr	r2, [pc, #76]	; (8001778 <MX_I2C2_Init+0x54>)
 800172c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_I2C2_Init+0x50>)
 8001730:	4a12      	ldr	r2, [pc, #72]	; (800177c <MX_I2C2_Init+0x58>)
 8001732:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_I2C2_Init+0x50>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_I2C2_Init+0x50>)
 800173c:	2200      	movs	r2, #0
 800173e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_I2C2_Init+0x50>)
 8001742:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001746:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001748:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <MX_I2C2_Init+0x50>)
 800174a:	2200      	movs	r2, #0
 800174c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_I2C2_Init+0x50>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <MX_I2C2_Init+0x50>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_I2C2_Init+0x50>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <MX_I2C2_Init+0x50>)
 8001762:	f001 fc87 	bl	8003074 <HAL_I2C_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800176c:	f000 f8d8 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000288 	.word	0x20000288
 8001778:	40005800 	.word	0x40005800
 800177c:	000186a0 	.word	0x000186a0

08001780 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001794:	463b      	mov	r3, r7
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800179c:	4b1d      	ldr	r3, [pc, #116]	; (8001814 <MX_TIM2_Init+0x94>)
 800179e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1599;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_TIM2_Init+0x94>)
 80017a6:	f240 623f 	movw	r2, #1599	; 0x63f
 80017aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <MX_TIM2_Init+0x94>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_TIM2_Init+0x94>)
 80017b4:	2263      	movs	r2, #99	; 0x63
 80017b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_TIM2_Init+0x94>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_TIM2_Init+0x94>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017c4:	4813      	ldr	r0, [pc, #76]	; (8001814 <MX_TIM2_Init+0x94>)
 80017c6:	f003 f843 	bl	8004850 <HAL_TIM_Base_Init>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017d0:	f000 f8a6 	bl	8001920 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	4619      	mov	r1, r3
 80017e0:	480c      	ldr	r0, [pc, #48]	; (8001814 <MX_TIM2_Init+0x94>)
 80017e2:	f003 f9ef 	bl	8004bc4 <HAL_TIM_ConfigClockSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017ec:	f000 f898 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f0:	2300      	movs	r3, #0
 80017f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f4:	2300      	movs	r3, #0
 80017f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f8:	463b      	mov	r3, r7
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <MX_TIM2_Init+0x94>)
 80017fe:	f003 fbeb 	bl	8004fd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001808:	f000 f88a 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800180c:	bf00      	nop
 800180e:	3718      	adds	r7, #24
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	200002dc 	.word	0x200002dc

08001818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800181e:	4a12      	ldr	r2, [pc, #72]	; (8001868 <MX_USART2_UART_Init+0x50>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_USART2_UART_Init+0x4c>)
 8001850:	f003 fc44 	bl	80050dc <HAL_UART_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800185a:	f000 f861 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000324 	.word	0x20000324
 8001868:	40004400 	.word	0x40004400

0800186c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
 8001880:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	4b19      	ldr	r3, [pc, #100]	; (80018ec <MX_GPIO_Init+0x80>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a18      	ldr	r2, [pc, #96]	; (80018ec <MX_GPIO_Init+0x80>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_GPIO_Init+0x80>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	607b      	str	r3, [r7, #4]
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_GPIO_Init+0x80>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	4a11      	ldr	r2, [pc, #68]	; (80018ec <MX_GPIO_Init+0x80>)
 80018a8:	f043 0302 	orr.w	r3, r3, #2
 80018ac:	6313      	str	r3, [r2, #48]	; 0x30
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_GPIO_Init+0x80>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	607b      	str	r3, [r7, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|LED1_Pin, GPIO_PIN_RESET);
 80018ba:	2200      	movs	r2, #0
 80018bc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80018c0:	480b      	ldr	r0, [pc, #44]	; (80018f0 <MX_GPIO_Init+0x84>)
 80018c2:	f001 fba3 	bl	800300c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED_Pin|LED1_Pin;
 80018c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80018ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018cc:	2301      	movs	r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d8:	f107 030c 	add.w	r3, r7, #12
 80018dc:	4619      	mov	r1, r3
 80018de:	4804      	ldr	r0, [pc, #16]	; (80018f0 <MX_GPIO_Init+0x84>)
 80018e0:	f001 fa10 	bl	8002d04 <HAL_GPIO_Init>

}
 80018e4:	bf00      	nop
 80018e6:	3720      	adds	r7, #32
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000

080018f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
	if(htim->Instance=htim2.Instance){
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x28>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_TIM_PeriodElapsedCallback+0x20>
		SCH_Update();
 800190c:	f000 f8b0 	bl	8001a70 <SCH_Update>
		TimerRun();
 8001910:	f7ff fd8e 	bl	8001430 <TimerRun>
	}
}
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200002dc 	.word	0x200002dc

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001928:	e7fe      	b.n	8001928 <Error_Handler+0x8>
	...

0800192c <SCH_Add_Task>:
void SCH_Init(){
	task_count=0;
	Error_code=0;
}

int SCH_Add_Task(void(*func)(), int32_t delay, uint32_t Period){
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	60f8      	str	r0, [r7, #12]
 8001934:	60b9      	str	r1, [r7, #8]
 8001936:	607a      	str	r2, [r7, #4]
	if(task_count>=MAX_TASK){
 8001938:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <SCH_Add_Task+0x12c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b09      	cmp	r3, #9
 800193e:	dd08      	ble.n	8001952 <SCH_Add_Task+0x26>
		Last_Error_code=Error_code;
 8001940:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <SCH_Add_Task+0x130>)
 8001942:	781a      	ldrb	r2, [r3, #0]
 8001944:	4b46      	ldr	r3, [pc, #280]	; (8001a60 <SCH_Add_Task+0x134>)
 8001946:	701a      	strb	r2, [r3, #0]
		Error_code=ERROR_SCH_TOO_MANY_TASKS;
 8001948:	4b44      	ldr	r3, [pc, #272]	; (8001a5c <SCH_Add_Task+0x130>)
 800194a:	2207      	movs	r2, #7
 800194c:	701a      	strb	r2, [r3, #0]
		return 0;
 800194e:	2300      	movs	r3, #0
 8001950:	e07c      	b.n	8001a4c <SCH_Add_Task+0x120>
	}
	/* CHECK IF THIS TASK EXISTED START */
	for(int i=0;i<task_count;i++){
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e038      	b.n	80019ca <SCH_Add_Task+0x9e>
		if(SCH_tasks[i].ptask==func){
 8001958:	4942      	ldr	r1, [pc, #264]	; (8001a64 <SCH_Add_Task+0x138>)
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68fa      	ldr	r2, [r7, #12]
 800196a:	429a      	cmp	r2, r3
 800196c:	d12a      	bne.n	80019c4 <SCH_Add_Task+0x98>
			SCH_tasks[i].Delay=delay/TIMER_CYCLE;
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	4a3d      	ldr	r2, [pc, #244]	; (8001a68 <SCH_Add_Task+0x13c>)
 8001972:	fb82 1203 	smull	r1, r2, r2, r3
 8001976:	1092      	asrs	r2, r2, #2
 8001978:	17db      	asrs	r3, r3, #31
 800197a:	1ad1      	subs	r1, r2, r3
 800197c:	4839      	ldr	r0, [pc, #228]	; (8001a64 <SCH_Add_Task+0x138>)
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	4403      	add	r3, r0
 800198a:	3304      	adds	r3, #4
 800198c:	6019      	str	r1, [r3, #0]
			SCH_tasks[i].Period=Period/TIMER_CYCLE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a36      	ldr	r2, [pc, #216]	; (8001a6c <SCH_Add_Task+0x140>)
 8001992:	fba2 2303 	umull	r2, r3, r2, r3
 8001996:	08d9      	lsrs	r1, r3, #3
 8001998:	4832      	ldr	r0, [pc, #200]	; (8001a64 <SCH_Add_Task+0x138>)
 800199a:	697a      	ldr	r2, [r7, #20]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	4403      	add	r3, r0
 80019a6:	330c      	adds	r3, #12
 80019a8:	6019      	str	r1, [r3, #0]
			SCH_tasks[i].Runme=0;
 80019aa:	492e      	ldr	r1, [pc, #184]	; (8001a64 <SCH_Add_Task+0x138>)
 80019ac:	697a      	ldr	r2, [r7, #20]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	3308      	adds	r3, #8
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
			return task_count;
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <SCH_Add_Task+0x12c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	e043      	b.n	8001a4c <SCH_Add_Task+0x120>
	for(int i=0;i<task_count;i++){
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	3301      	adds	r3, #1
 80019c8:	617b      	str	r3, [r7, #20]
 80019ca:	4b23      	ldr	r3, [pc, #140]	; (8001a58 <SCH_Add_Task+0x12c>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	dbc1      	blt.n	8001958 <SCH_Add_Task+0x2c>
		}
	}
	/* CHECK IF THIS TASK EXISTED END */
	SCH_tasks[task_count].ptask=func;
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <SCH_Add_Task+0x12c>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4922      	ldr	r1, [pc, #136]	; (8001a64 <SCH_Add_Task+0x138>)
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	601a      	str	r2, [r3, #0]
	SCH_tasks[task_count].Delay=delay/TIMER_CYCLE;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <SCH_Add_Task+0x12c>)
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	491e      	ldr	r1, [pc, #120]	; (8001a68 <SCH_Add_Task+0x13c>)
 80019f0:	fb81 0103 	smull	r0, r1, r1, r3
 80019f4:	1089      	asrs	r1, r1, #2
 80019f6:	17db      	asrs	r3, r3, #31
 80019f8:	1ac9      	subs	r1, r1, r3
 80019fa:	481a      	ldr	r0, [pc, #104]	; (8001a64 <SCH_Add_Task+0x138>)
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4403      	add	r3, r0
 8001a06:	3304      	adds	r3, #4
 8001a08:	6019      	str	r1, [r3, #0]
	SCH_tasks[task_count].Period=Period/TIMER_CYCLE;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <SCH_Add_Task+0x12c>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4916      	ldr	r1, [pc, #88]	; (8001a6c <SCH_Add_Task+0x140>)
 8001a12:	fba1 1303 	umull	r1, r3, r1, r3
 8001a16:	08d9      	lsrs	r1, r3, #3
 8001a18:	4812      	ldr	r0, [pc, #72]	; (8001a64 <SCH_Add_Task+0x138>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4403      	add	r3, r0
 8001a24:	330c      	adds	r3, #12
 8001a26:	6019      	str	r1, [r3, #0]
	SCH_tasks[task_count].Runme=0;
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <SCH_Add_Task+0x12c>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	490d      	ldr	r1, [pc, #52]	; (8001a64 <SCH_Add_Task+0x138>)
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	440b      	add	r3, r1
 8001a38:	3308      	adds	r3, #8
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
	task_count++;
 8001a3e:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <SCH_Add_Task+0x12c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <SCH_Add_Task+0x12c>)
 8001a46:	6013      	str	r3, [r2, #0]
	return task_count;
 8001a48:	4b03      	ldr	r3, [pc, #12]	; (8001a58 <SCH_Add_Task+0x12c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	371c      	adds	r7, #28
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20000370 	.word	0x20000370
 8001a5c:	20000374 	.word	0x20000374
 8001a60:	20000375 	.word	0x20000375
 8001a64:	20000378 	.word	0x20000378
 8001a68:	66666667 	.word	0x66666667
 8001a6c:	cccccccd 	.word	0xcccccccd

08001a70 <SCH_Update>:
void SCH_Update(){
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
	for(int i=0;i<task_count;i++){
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	e051      	b.n	8001b20 <SCH_Update+0xb0>
		if(SCH_tasks[i].Delay>=0){
 8001a7c:	492e      	ldr	r1, [pc, #184]	; (8001b38 <SCH_Update+0xc8>)
 8001a7e:	687a      	ldr	r2, [r7, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	3304      	adds	r3, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	db43      	blt.n	8001b1a <SCH_Update+0xaa>
			SCH_tasks[i].Delay--;
 8001a92:	4929      	ldr	r1, [pc, #164]	; (8001b38 <SCH_Update+0xc8>)
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	440b      	add	r3, r1
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	1e59      	subs	r1, r3, #1
 8001aa6:	4824      	ldr	r0, [pc, #144]	; (8001b38 <SCH_Update+0xc8>)
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4403      	add	r3, r0
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	6019      	str	r1, [r3, #0]
			if(SCH_tasks[i].Delay<=0){
 8001ab8:	491f      	ldr	r1, [pc, #124]	; (8001b38 <SCH_Update+0xc8>)
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	dc25      	bgt.n	8001b1a <SCH_Update+0xaa>
				SCH_tasks[i].Runme++;
 8001ace:	491a      	ldr	r1, [pc, #104]	; (8001b38 <SCH_Update+0xc8>)
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	4413      	add	r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	3308      	adds	r3, #8
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	1c59      	adds	r1, r3, #1
 8001ae2:	4815      	ldr	r0, [pc, #84]	; (8001b38 <SCH_Update+0xc8>)
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4403      	add	r3, r0
 8001af0:	3308      	adds	r3, #8
 8001af2:	6019      	str	r1, [r3, #0]
				SCH_tasks[i].Delay=SCH_tasks[i].Period;
 8001af4:	4910      	ldr	r1, [pc, #64]	; (8001b38 <SCH_Update+0xc8>)
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	440b      	add	r3, r1
 8001b02:	330c      	adds	r3, #12
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	490b      	ldr	r1, [pc, #44]	; (8001b38 <SCH_Update+0xc8>)
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4413      	add	r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	440b      	add	r3, r1
 8001b16:	3304      	adds	r3, #4
 8001b18:	6018      	str	r0, [r3, #0]
	for(int i=0;i<task_count;i++){
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <SCH_Update+0xcc>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	429a      	cmp	r2, r3
 8001b28:	dba8      	blt.n	8001a7c <SCH_Update+0xc>
			}
		}
	}
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	20000378 	.word	0x20000378
 8001b3c:	20000370 	.word	0x20000370

08001b40 <SCH_Dispatch>:
void SCH_Dispatch(){
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
	for(int i=0;i<task_count;i++){
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	e037      	b.n	8001bbc <SCH_Dispatch+0x7c>
		if(SCH_tasks[i].Runme>0){
 8001b4c:	4920      	ldr	r1, [pc, #128]	; (8001bd0 <SCH_Dispatch+0x90>)
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	4613      	mov	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	4413      	add	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	440b      	add	r3, r1
 8001b5a:	3308      	adds	r3, #8
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d029      	beq.n	8001bb6 <SCH_Dispatch+0x76>
			(*SCH_tasks[i].ptask)();
 8001b62:	491b      	ldr	r1, [pc, #108]	; (8001bd0 <SCH_Dispatch+0x90>)
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4798      	blx	r3
			SCH_tasks[i].Runme--;
 8001b74:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <SCH_Dispatch+0x90>)
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	3308      	adds	r3, #8
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	1e59      	subs	r1, r3, #1
 8001b88:	4811      	ldr	r0, [pc, #68]	; (8001bd0 <SCH_Dispatch+0x90>)
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4403      	add	r3, r0
 8001b96:	3308      	adds	r3, #8
 8001b98:	6019      	str	r1, [r3, #0]
			if(SCH_tasks[i].Period==0){  //IF THIS IS ONE SHOT TASK
 8001b9a:	490d      	ldr	r1, [pc, #52]	; (8001bd0 <SCH_Dispatch+0x90>)
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	4613      	mov	r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	330c      	adds	r3, #12
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <SCH_Dispatch+0x76>
				SCH_Delete_Task(i);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f811 	bl	8001bd8 <SCH_Delete_Task>
	for(int i=0;i<task_count;i++){
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	607b      	str	r3, [r7, #4]
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <SCH_Dispatch+0x94>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	dbc2      	blt.n	8001b4c <SCH_Dispatch+0xc>
			}
		}
	}
}
 8001bc6:	bf00      	nop
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000378 	.word	0x20000378
 8001bd4:	20000370 	.word	0x20000370

08001bd8 <SCH_Delete_Task>:

void SCH_Delete_Task(int idx){
 8001bd8:	b4b0      	push	{r4, r5, r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	for(int i=idx;i<task_count-1;i++){
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	e017      	b.n	8001c16 <SCH_Delete_Task+0x3e>
		SCH_tasks[i]=SCH_tasks[i+1];
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1c5a      	adds	r2, r3, #1
 8001bea:	481a      	ldr	r0, [pc, #104]	; (8001c54 <SCH_Delete_Task+0x7c>)
 8001bec:	68f9      	ldr	r1, [r7, #12]
 8001bee:	460b      	mov	r3, r1
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	440b      	add	r3, r1
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4418      	add	r0, r3
 8001bf8:	4916      	ldr	r1, [pc, #88]	; (8001c54 <SCH_Delete_Task+0x7c>)
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	4604      	mov	r4, r0
 8001c06:	461d      	mov	r5, r3
 8001c08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c0c:	682b      	ldr	r3, [r5, #0]
 8001c0e:	6023      	str	r3, [r4, #0]
	for(int i=idx;i<task_count-1;i++){
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	3301      	adds	r3, #1
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <SCH_Delete_Task+0x80>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dbe1      	blt.n	8001be6 <SCH_Delete_Task+0xe>
	}
	if(task_count>0){
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <SCH_Delete_Task+0x80>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	dd08      	ble.n	8001c3c <SCH_Delete_Task+0x64>
		task_count--;
 8001c2a:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <SCH_Delete_Task+0x80>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	4a09      	ldr	r2, [pc, #36]	; (8001c58 <SCH_Delete_Task+0x80>)
 8001c32:	6013      	str	r3, [r2, #0]
		Error_code=0;
 8001c34:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <SCH_Delete_Task+0x84>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
	}else{
		Last_Error_code=Error_code;
		Error_code=ERROR_SCH_CANNOT_DELETE_TASK;
	}
}
 8001c3a:	e006      	b.n	8001c4a <SCH_Delete_Task+0x72>
		Last_Error_code=Error_code;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <SCH_Delete_Task+0x84>)
 8001c3e:	781a      	ldrb	r2, [r3, #0]
 8001c40:	4b07      	ldr	r3, [pc, #28]	; (8001c60 <SCH_Delete_Task+0x88>)
 8001c42:	701a      	strb	r2, [r3, #0]
		Error_code=ERROR_SCH_CANNOT_DELETE_TASK;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SCH_Delete_Task+0x84>)
 8001c46:	2208      	movs	r2, #8
 8001c48:	701a      	strb	r2, [r3, #0]
}
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bcb0      	pop	{r4, r5, r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000378 	.word	0x20000378
 8001c58:	20000370 	.word	0x20000370
 8001c5c:	20000374 	.word	0x20000374
 8001c60:	20000375 	.word	0x20000375

08001c64 <SelfDestruct>:

void SelfDestruct(void(*func)()){
 8001c64:	b4b0      	push	{r4, r5, r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
	for(int i=0;i<task_count;i++){
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	e02f      	b.n	8001cd2 <SelfDestruct+0x6e>
		if(SCH_tasks[i].ptask==func){
 8001c72:	4927      	ldr	r1, [pc, #156]	; (8001d10 <SelfDestruct+0xac>)
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	440b      	add	r3, r1
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d121      	bne.n	8001ccc <SelfDestruct+0x68>
			for(int j=i;j<task_count-1;j++){
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	60bb      	str	r3, [r7, #8]
 8001c8c:	e017      	b.n	8001cbe <SelfDestruct+0x5a>
				SCH_tasks[j]=SCH_tasks[j+1];
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	481f      	ldr	r0, [pc, #124]	; (8001d10 <SelfDestruct+0xac>)
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	460b      	mov	r3, r1
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	440b      	add	r3, r1
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4418      	add	r0, r3
 8001ca0:	491b      	ldr	r1, [pc, #108]	; (8001d10 <SelfDestruct+0xac>)
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	440b      	add	r3, r1
 8001cac:	4604      	mov	r4, r0
 8001cae:	461d      	mov	r5, r3
 8001cb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb4:	682b      	ldr	r3, [r5, #0]
 8001cb6:	6023      	str	r3, [r4, #0]
			for(int j=i;j<task_count-1;j++){
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	60bb      	str	r3, [r7, #8]
 8001cbe:	4b15      	ldr	r3, [pc, #84]	; (8001d14 <SelfDestruct+0xb0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	dbe1      	blt.n	8001c8e <SelfDestruct+0x2a>
			}
			break;
 8001cca:	e007      	b.n	8001cdc <SelfDestruct+0x78>
	for(int i=0;i<task_count;i++){
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <SelfDestruct+0xb0>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	dbca      	blt.n	8001c72 <SelfDestruct+0xe>
		}
	}
	if(task_count>0){
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <SelfDestruct+0xb0>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	dd08      	ble.n	8001cf6 <SelfDestruct+0x92>
		task_count--;
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <SelfDestruct+0xb0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	3b01      	subs	r3, #1
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <SelfDestruct+0xb0>)
 8001cec:	6013      	str	r3, [r2, #0]
		Error_code=0;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <SelfDestruct+0xb4>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
	}else{
		Last_Error_code=Error_code;
		Error_code=ERROR_SCH_CANNOT_DELETE_TASK;
	}
}
 8001cf4:	e006      	b.n	8001d04 <SelfDestruct+0xa0>
		Last_Error_code=Error_code;
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <SelfDestruct+0xb4>)
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <SelfDestruct+0xb8>)
 8001cfc:	701a      	strb	r2, [r3, #0]
		Error_code=ERROR_SCH_CANNOT_DELETE_TASK;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <SelfDestruct+0xb4>)
 8001d00:	2208      	movs	r2, #8
 8001d02:	701a      	strb	r2, [r3, #0]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bcb0      	pop	{r4, r5, r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000378 	.word	0x20000378
 8001d14:	20000370 	.word	0x20000370
 8001d18:	20000374 	.word	0x20000374
 8001d1c:	20000375 	.word	0x20000375

08001d20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2e:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d34:	6453      	str	r3, [r2, #68]	; 0x44
 8001d36:	4b0d      	ldr	r3, [pc, #52]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3e:	607b      	str	r3, [r7, #4]
 8001d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_MspInit+0x4c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800

08001d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08a      	sub	sp, #40	; 0x28
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a17      	ldr	r2, [pc, #92]	; (8001dec <HAL_ADC_MspInit+0x7c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d127      	bne.n	8001de2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	613b      	str	r3, [r7, #16]
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_ADC_MspInit+0x80>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a15      	ldr	r2, [pc, #84]	; (8001df0 <HAL_ADC_MspInit+0x80>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <HAL_ADC_MspInit+0x80>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001daa:	613b      	str	r3, [r7, #16]
 8001dac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_ADC_MspInit+0x80>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db6:	4a0e      	ldr	r2, [pc, #56]	; (8001df0 <HAL_ADC_MspInit+0x80>)
 8001db8:	f043 0301 	orr.w	r3, r3, #1
 8001dbc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dbe:	4b0c      	ldr	r3, [pc, #48]	; (8001df0 <HAL_ADC_MspInit+0x80>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	f003 0301 	and.w	r3, r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd6:	f107 0314 	add.w	r3, r7, #20
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_ADC_MspInit+0x84>)
 8001dde:	f000 ff91 	bl	8002d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3728      	adds	r7, #40	; 0x28
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40012000 	.word	0x40012000
 8001df0:	40023800 	.word	0x40023800
 8001df4:	40020000 	.word	0x40020000

08001df8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a21      	ldr	r2, [pc, #132]	; (8001e9c <HAL_I2C_MspInit+0xa4>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d13c      	bne.n	8001e94 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_I2C_MspInit+0xa8>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a1f      	ldr	r2, [pc, #124]	; (8001ea0 <HAL_I2C_MspInit+0xa8>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <HAL_I2C_MspInit+0xa8>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001e36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3c:	2312      	movs	r3, #18
 8001e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e44:	2303      	movs	r3, #3
 8001e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001e48:	2304      	movs	r3, #4
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4619      	mov	r1, r3
 8001e52:	4814      	ldr	r0, [pc, #80]	; (8001ea4 <HAL_I2C_MspInit+0xac>)
 8001e54:	f000 ff56 	bl	8002d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e5c:	2312      	movs	r3, #18
 8001e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e64:	2303      	movs	r3, #3
 8001e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001e68:	2309      	movs	r3, #9
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	4619      	mov	r1, r3
 8001e72:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <HAL_I2C_MspInit+0xac>)
 8001e74:	f000 ff46 	bl	8002d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001e78:	2300      	movs	r3, #0
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <HAL_I2C_MspInit+0xa8>)
 8001e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e80:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_I2C_MspInit+0xa8>)
 8001e82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e86:	6413      	str	r3, [r2, #64]	; 0x40
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_I2C_MspInit+0xa8>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001e94:	bf00      	nop
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40005800 	.word	0x40005800
 8001ea0:	40023800 	.word	0x40023800
 8001ea4:	40020400 	.word	0x40020400

08001ea8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb8:	d115      	bne.n	8001ee6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	201c      	movs	r0, #28
 8001edc:	f000 fe49 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ee0:	201c      	movs	r0, #28
 8001ee2:	f000 fe62 	bl	8002baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a1d      	ldr	r2, [pc, #116]	; (8001f88 <HAL_UART_MspInit+0x94>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d133      	bne.n	8001f7e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	4b1c      	ldr	r3, [pc, #112]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	4a1b      	ldr	r2, [pc, #108]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f24:	6413      	str	r3, [r2, #64]	; 0x40
 8001f26:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a14      	ldr	r2, [pc, #80]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b12      	ldr	r3, [pc, #72]	; (8001f8c <HAL_UART_MspInit+0x98>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f4e:	230c      	movs	r3, #12
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f5e:	2307      	movs	r3, #7
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <HAL_UART_MspInit+0x9c>)
 8001f6a:	f000 fecb 	bl	8002d04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	2100      	movs	r1, #0
 8001f72:	2026      	movs	r0, #38	; 0x26
 8001f74:	f000 fdfd 	bl	8002b72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f78:	2026      	movs	r0, #38	; 0x26
 8001f7a:	f000 fe16 	bl	8002baa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40004400 	.word	0x40004400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f8da 	bl	8002198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM2_IRQHandler+0x10>)
 8001fee:	f002 fce1 	bl	80049b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200002dc 	.word	0x200002dc

08001ffc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <USART2_IRQHandler+0x10>)
 8002002:	f003 f97b 	bl	80052fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000324 	.word	0x20000324

08002010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <_sbrk+0x5c>)
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <_sbrk+0x60>)
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <_sbrk+0x64>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <_sbrk+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d207      	bcs.n	8002050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002040:	f004 f8c4 	bl	80061cc <__errno>
 8002044:	4603      	mov	r3, r0
 8002046:	220c      	movs	r2, #12
 8002048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	e009      	b.n	8002064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <_sbrk+0x64>)
 8002060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20020000 	.word	0x20020000
 8002070:	00000400 	.word	0x00000400
 8002074:	20000440 	.word	0x20000440
 8002078:	20000458 	.word	0x20000458

0800207c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002080:	4b06      	ldr	r3, [pc, #24]	; (800209c <SystemInit+0x20>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a05      	ldr	r2, [pc, #20]	; (800209c <SystemInit+0x20>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002090:	bf00      	nop
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <Reset_Handler>:
 80020a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020d8 <LoopFillZerobss+0x12>
 80020a4:	480d      	ldr	r0, [pc, #52]	; (80020dc <LoopFillZerobss+0x16>)
 80020a6:	490e      	ldr	r1, [pc, #56]	; (80020e0 <LoopFillZerobss+0x1a>)
 80020a8:	4a0e      	ldr	r2, [pc, #56]	; (80020e4 <LoopFillZerobss+0x1e>)
 80020aa:	2300      	movs	r3, #0
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:
 80020ae:	58d4      	ldr	r4, [r2, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:
 80020b4:	18c4      	adds	r4, r0, r3
 80020b6:	428c      	cmp	r4, r1
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
 80020ba:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <LoopFillZerobss+0x22>)
 80020bc:	4c0b      	ldr	r4, [pc, #44]	; (80020ec <LoopFillZerobss+0x26>)
 80020be:	2300      	movs	r3, #0
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:
 80020c2:	6013      	str	r3, [r2, #0]
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:
 80020c6:	42a2      	cmp	r2, r4
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>
 80020ca:	f7ff ffd7 	bl	800207c <SystemInit>
 80020ce:	f004 f883 	bl	80061d8 <__libc_init_array>
 80020d2:	f7ff fa2f 	bl	8001534 <main>
 80020d6:	4770      	bx	lr
 80020d8:	20020000 	.word	0x20020000
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000070 	.word	0x20000070
 80020e4:	08006be0 	.word	0x08006be0
 80020e8:	20000070 	.word	0x20000070
 80020ec:	20000458 	.word	0x20000458

080020f0 <ADC_IRQHandler>:
 80020f0:	e7fe      	b.n	80020f0 <ADC_IRQHandler>
	...

080020f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020f8:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <HAL_Init+0x40>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <HAL_Init+0x40>)
 80020fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002102:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_Init+0x40>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	; (8002134 <HAL_Init+0x40>)
 800210a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800210e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_Init+0x40>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_Init+0x40>)
 8002116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800211c:	2003      	movs	r0, #3
 800211e:	f000 fd1d 	bl	8002b5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002122:	200f      	movs	r0, #15
 8002124:	f000 f808 	bl	8002138 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002128:	f7ff fdfa 	bl	8001d20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00

08002138 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002140:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_InitTick+0x54>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b12      	ldr	r3, [pc, #72]	; (8002190 <HAL_InitTick+0x58>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	4619      	mov	r1, r3
 800214a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800214e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	4618      	mov	r0, r3
 8002158:	f000 fd35 	bl	8002bc6 <HAL_SYSTICK_Config>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e00e      	b.n	8002184 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0f      	cmp	r3, #15
 800216a:	d80a      	bhi.n	8002182 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800216c:	2200      	movs	r2, #0
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	f04f 30ff 	mov.w	r0, #4294967295
 8002174:	f000 fcfd 	bl	8002b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002178:	4a06      	ldr	r2, [pc, #24]	; (8002194 <HAL_InitTick+0x5c>)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
}
 8002184:	4618      	mov	r0, r3
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000000 	.word	0x20000000
 8002190:	20000008 	.word	0x20000008
 8002194:	20000004 	.word	0x20000004

08002198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800219c:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_IncTick+0x20>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_IncTick+0x24>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4413      	add	r3, r2
 80021a8:	4a04      	ldr	r2, [pc, #16]	; (80021bc <HAL_IncTick+0x24>)
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	20000008 	.word	0x20000008
 80021bc:	20000444 	.word	0x20000444

080021c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0
  return uwTick;
 80021c4:	4b03      	ldr	r3, [pc, #12]	; (80021d4 <HAL_GetTick+0x14>)
 80021c6:	681b      	ldr	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
 80021d2:	bf00      	nop
 80021d4:	20000444 	.word	0x20000444

080021d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e033      	b.n	8002256 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7ff fdba 	bl	8001d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800221e:	f023 0302 	bic.w	r3, r3, #2
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 faca 	bl	80027c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
 8002246:	e001      	b.n	800224c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002268:	2300      	movs	r3, #0
 800226a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_ADC_Start+0x1a>
 8002276:	2302      	movs	r3, #2
 8002278:	e097      	b.n	80023aa <HAL_ADC_Start+0x14a>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	2b01      	cmp	r3, #1
 800228e:	d018      	beq.n	80022c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689a      	ldr	r2, [r3, #8]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0201 	orr.w	r2, r2, #1
 800229e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022a0:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <HAL_ADC_Start+0x158>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a45      	ldr	r2, [pc, #276]	; (80023bc <HAL_ADC_Start+0x15c>)
 80022a6:	fba2 2303 	umull	r2, r3, r2, r3
 80022aa:	0c9a      	lsrs	r2, r3, #18
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022b4:	e002      	b.n	80022bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	3b01      	subs	r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f9      	bne.n	80022b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f003 0301 	and.w	r3, r3, #1
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d15f      	bne.n	8002390 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80022d8:	f023 0301 	bic.w	r3, r3, #1
 80022dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d007      	beq.n	8002302 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800230e:	d106      	bne.n	800231e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	f023 0206 	bic.w	r2, r3, #6
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	645a      	str	r2, [r3, #68]	; 0x44
 800231c:	e002      	b.n	8002324 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <HAL_ADC_Start+0x160>)
 800232e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002338:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10f      	bne.n	8002366 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d129      	bne.n	80023a8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	e020      	b.n	80023a8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <HAL_ADC_Start+0x164>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d11b      	bne.n	80023a8 <HAL_ADC_Start+0x148>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d114      	bne.n	80023a8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	e00b      	b.n	80023a8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0210 	orr.w	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023a8:	2300      	movs	r3, #0
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3714      	adds	r7, #20
 80023ae:	46bd      	mov	sp, r7
 80023b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b4:	4770      	bx	lr
 80023b6:	bf00      	nop
 80023b8:	20000000 	.word	0x20000000
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	40012300 	.word	0x40012300
 80023c4:	40012000 	.word	0x40012000

080023c8 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Stop+0x16>
 80023da:	2302      	movs	r3, #2
 80023dc:	e021      	b.n	8002422 <HAL_ADC_Stop+0x5a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0201 	bic.w	r2, r2, #1
 80023f4:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d109      	bne.n	8002418 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	f043 0201 	orr.w	r2, r3, #1
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
 8002436:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800244a:	d113      	bne.n	8002474 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245a:	d10b      	bne.n	8002474 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002460:	f043 0220 	orr.w	r2, r3, #32
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e063      	b.n	800253c <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002474:	f7ff fea4 	bl	80021c0 <HAL_GetTick>
 8002478:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800247a:	e021      	b.n	80024c0 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002482:	d01d      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d007      	beq.n	800249a <HAL_ADC_PollForConversion+0x6c>
 800248a:	f7ff fe99 	bl	80021c0 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d212      	bcs.n	80024c0 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d00b      	beq.n	80024c0 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ac:	f043 0204 	orr.w	r2, r3, #4
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e03d      	b.n	800253c <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d1d6      	bne.n	800247c <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f06f 0212 	mvn.w	r2, #18
 80024d6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024dc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d123      	bne.n	800253a <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d11f      	bne.n	800253a <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002504:	2b00      	cmp	r3, #0
 8002506:	d006      	beq.n	8002516 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002512:	2b00      	cmp	r3, #0
 8002514:	d111      	bne.n	800253a <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d105      	bne.n	800253a <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f043 0201 	orr.w	r2, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800256a:	2300      	movs	r3, #0
 800256c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002574:	2b01      	cmp	r3, #1
 8002576:	d101      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1c>
 8002578:	2302      	movs	r3, #2
 800257a:	e113      	b.n	80027a4 <HAL_ADC_ConfigChannel+0x244>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2b09      	cmp	r3, #9
 800258a:	d925      	bls.n	80025d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68d9      	ldr	r1, [r3, #12]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	b29b      	uxth	r3, r3
 8002598:	461a      	mov	r2, r3
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	3b1e      	subs	r3, #30
 80025a2:	2207      	movs	r2, #7
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43da      	mvns	r2, r3
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	400a      	ands	r2, r1
 80025b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68d9      	ldr	r1, [r3, #12]
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	4618      	mov	r0, r3
 80025c4:	4603      	mov	r3, r0
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	4403      	add	r3, r0
 80025ca:	3b1e      	subs	r3, #30
 80025cc:	409a      	lsls	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	60da      	str	r2, [r3, #12]
 80025d6:	e022      	b.n	800261e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6919      	ldr	r1, [r3, #16]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	b29b      	uxth	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	4613      	mov	r3, r2
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	4413      	add	r3, r2
 80025ec:	2207      	movs	r2, #7
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43da      	mvns	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	400a      	ands	r2, r1
 80025fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6919      	ldr	r1, [r3, #16]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689a      	ldr	r2, [r3, #8]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	b29b      	uxth	r3, r3
 800260c:	4618      	mov	r0, r3
 800260e:	4603      	mov	r3, r0
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4403      	add	r3, r0
 8002614:	409a      	lsls	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b06      	cmp	r3, #6
 8002624:	d824      	bhi.n	8002670 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	3b05      	subs	r3, #5
 8002638:	221f      	movs	r2, #31
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43da      	mvns	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	400a      	ands	r2, r1
 8002646:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	4618      	mov	r0, r3
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	3b05      	subs	r3, #5
 8002662:	fa00 f203 	lsl.w	r2, r0, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	635a      	str	r2, [r3, #52]	; 0x34
 800266e:	e04c      	b.n	800270a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	d824      	bhi.n	80026c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	4413      	add	r3, r2
 8002688:	3b23      	subs	r3, #35	; 0x23
 800268a:	221f      	movs	r2, #31
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43da      	mvns	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	400a      	ands	r2, r1
 8002698:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685a      	ldr	r2, [r3, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	3b23      	subs	r3, #35	; 0x23
 80026b4:	fa00 f203 	lsl.w	r2, r0, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	430a      	orrs	r2, r1
 80026be:	631a      	str	r2, [r3, #48]	; 0x30
 80026c0:	e023      	b.n	800270a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685a      	ldr	r2, [r3, #4]
 80026cc:	4613      	mov	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4413      	add	r3, r2
 80026d2:	3b41      	subs	r3, #65	; 0x41
 80026d4:	221f      	movs	r2, #31
 80026d6:	fa02 f303 	lsl.w	r3, r2, r3
 80026da:	43da      	mvns	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	400a      	ands	r2, r1
 80026e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	4618      	mov	r0, r3
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	009b      	lsls	r3, r3, #2
 80026fa:	4413      	add	r3, r2
 80026fc:	3b41      	subs	r3, #65	; 0x41
 80026fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	430a      	orrs	r2, r1
 8002708:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800270a:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <HAL_ADC_ConfigChannel+0x250>)
 800270c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a28      	ldr	r2, [pc, #160]	; (80027b4 <HAL_ADC_ConfigChannel+0x254>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d10f      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1d8>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b12      	cmp	r3, #18
 800271e:	d10b      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_ADC_ConfigChannel+0x254>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d12b      	bne.n	800279a <HAL_ADC_ConfigChannel+0x23a>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_ADC_ConfigChannel+0x258>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d003      	beq.n	8002754 <HAL_ADC_ConfigChannel+0x1f4>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2b11      	cmp	r3, #17
 8002752:	d122      	bne.n	800279a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <HAL_ADC_ConfigChannel+0x258>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d111      	bne.n	800279a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <HAL_ADC_ConfigChannel+0x25c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <HAL_ADC_ConfigChannel+0x260>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	0c9a      	lsrs	r2, r3, #18
 8002782:	4613      	mov	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	4413      	add	r3, r2
 8002788:	005b      	lsls	r3, r3, #1
 800278a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800278c:	e002      	b.n	8002794 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	3b01      	subs	r3, #1
 8002792:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f9      	bne.n	800278e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40012300 	.word	0x40012300
 80027b4:	40012000 	.word	0x40012000
 80027b8:	10000012 	.word	0x10000012
 80027bc:	20000000 	.word	0x20000000
 80027c0:	431bde83 	.word	0x431bde83

080027c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027cc:	4b79      	ldr	r3, [pc, #484]	; (80029b4 <ADC_Init+0x1f0>)
 80027ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	021a      	lsls	r2, r3, #8
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685a      	ldr	r2, [r3, #4]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800281c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6859      	ldr	r1, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	430a      	orrs	r2, r1
 800282e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689a      	ldr	r2, [r3, #8]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800283e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6899      	ldr	r1, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002856:	4a58      	ldr	r2, [pc, #352]	; (80029b8 <ADC_Init+0x1f4>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d022      	beq.n	80028a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800286a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6899      	ldr	r1, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800288c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6899      	ldr	r1, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	e00f      	b.n	80028c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0202 	bic.w	r2, r2, #2
 80028d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7e1b      	ldrb	r3, [r3, #24]
 80028dc:	005a      	lsls	r2, r3, #1
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01b      	beq.n	8002928 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800290e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	3b01      	subs	r3, #1
 800291c:	035a      	lsls	r2, r3, #13
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	605a      	str	r2, [r3, #4]
 8002926:	e007      	b.n	8002938 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002936:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002946:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	3b01      	subs	r3, #1
 8002954:	051a      	lsls	r2, r3, #20
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800296c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6899      	ldr	r1, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800297a:	025a      	lsls	r2, r3, #9
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6899      	ldr	r1, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	029a      	lsls	r2, r3, #10
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	430a      	orrs	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	40012300 	.word	0x40012300
 80029b8:	0f000001 	.word	0x0f000001

080029bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d8:	4013      	ands	r3, r2
 80029da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ee:	4a04      	ldr	r2, [pc, #16]	; (8002a00 <__NVIC_SetPriorityGrouping+0x44>)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	60d3      	str	r3, [r2, #12]
}
 80029f4:	bf00      	nop
 80029f6:	3714      	adds	r7, #20
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000ed00 	.word	0xe000ed00

08002a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a08:	4b04      	ldr	r3, [pc, #16]	; (8002a1c <__NVIC_GetPriorityGrouping+0x18>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	0a1b      	lsrs	r3, r3, #8
 8002a0e:	f003 0307 	and.w	r3, r3, #7
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000ed00 	.word	0xe000ed00

08002a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	4603      	mov	r3, r0
 8002a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	db0b      	blt.n	8002a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a32:	79fb      	ldrb	r3, [r7, #7]
 8002a34:	f003 021f 	and.w	r2, r3, #31
 8002a38:	4907      	ldr	r1, [pc, #28]	; (8002a58 <__NVIC_EnableIRQ+0x38>)
 8002a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	2001      	movs	r0, #1
 8002a42:	fa00 f202 	lsl.w	r2, r0, r2
 8002a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop
 8002a58:	e000e100 	.word	0xe000e100

08002a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	db0a      	blt.n	8002a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	b2da      	uxtb	r2, r3
 8002a74:	490c      	ldr	r1, [pc, #48]	; (8002aa8 <__NVIC_SetPriority+0x4c>)
 8002a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	b2d2      	uxtb	r2, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a84:	e00a      	b.n	8002a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	4908      	ldr	r1, [pc, #32]	; (8002aac <__NVIC_SetPriority+0x50>)
 8002a8c:	79fb      	ldrb	r3, [r7, #7]
 8002a8e:	f003 030f 	and.w	r3, r3, #15
 8002a92:	3b04      	subs	r3, #4
 8002a94:	0112      	lsls	r2, r2, #4
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	440b      	add	r3, r1
 8002a9a:	761a      	strb	r2, [r3, #24]
}
 8002a9c:	bf00      	nop
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000e100 	.word	0xe000e100
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b089      	sub	sp, #36	; 0x24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f1c3 0307 	rsb	r3, r3, #7
 8002aca:	2b04      	cmp	r3, #4
 8002acc:	bf28      	it	cs
 8002ace:	2304      	movcs	r3, #4
 8002ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2b06      	cmp	r3, #6
 8002ad8:	d902      	bls.n	8002ae0 <NVIC_EncodePriority+0x30>
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	3b03      	subs	r3, #3
 8002ade:	e000      	b.n	8002ae2 <NVIC_EncodePriority+0x32>
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43da      	mvns	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	401a      	ands	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af8:	f04f 31ff 	mov.w	r1, #4294967295
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	fa01 f303 	lsl.w	r3, r1, r3
 8002b02:	43d9      	mvns	r1, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b08:	4313      	orrs	r3, r2
         );
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3724      	adds	r7, #36	; 0x24
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
	...

08002b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b28:	d301      	bcc.n	8002b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e00f      	b.n	8002b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b2e:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <SysTick_Config+0x40>)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3b01      	subs	r3, #1
 8002b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b36:	210f      	movs	r1, #15
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f7ff ff8e 	bl	8002a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b40:	4b05      	ldr	r3, [pc, #20]	; (8002b58 <SysTick_Config+0x40>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b46:	4b04      	ldr	r3, [pc, #16]	; (8002b58 <SysTick_Config+0x40>)
 8002b48:	2207      	movs	r2, #7
 8002b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	e000e010 	.word	0xe000e010

08002b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff ff29 	bl	80029bc <__NVIC_SetPriorityGrouping>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	4603      	mov	r3, r0
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b84:	f7ff ff3e 	bl	8002a04 <__NVIC_GetPriorityGrouping>
 8002b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	6978      	ldr	r0, [r7, #20]
 8002b90:	f7ff ff8e 	bl	8002ab0 <NVIC_EncodePriority>
 8002b94:	4602      	mov	r2, r0
 8002b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7ff ff5d 	bl	8002a5c <__NVIC_SetPriority>
}
 8002ba2:	bf00      	nop
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7ff ff31 	bl	8002a20 <__NVIC_EnableIRQ>
}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}

08002bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b082      	sub	sp, #8
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ffa2 	bl	8002b18 <SysTick_Config>
 8002bd4:	4603      	mov	r3, r0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002bec:	f7ff fae8 	bl	80021c0 <HAL_GetTick>
 8002bf0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d008      	beq.n	8002c10 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e052      	b.n	8002cb6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0216 	bic.w	r2, r2, #22
 8002c1e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	695a      	ldr	r2, [r3, #20]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c2e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d103      	bne.n	8002c40 <HAL_DMA_Abort+0x62>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d007      	beq.n	8002c50 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0208 	bic.w	r2, r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 0201 	bic.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c60:	e013      	b.n	8002c8a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c62:	f7ff faad 	bl	80021c0 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b05      	cmp	r3, #5
 8002c6e:	d90c      	bls.n	8002c8a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2203      	movs	r2, #3
 8002c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e015      	b.n	8002cb6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1e4      	bne.n	8002c62 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	223f      	movs	r2, #63	; 0x3f
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d004      	beq.n	8002cdc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2280      	movs	r2, #128	; 0x80
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e00c      	b.n	8002cf6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2205      	movs	r2, #5
 8002ce0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0201 	bic.w	r2, r2, #1
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
	...

08002d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	; 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d16:	2300      	movs	r3, #0
 8002d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	e159      	b.n	8002fd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d20:	2201      	movs	r2, #1
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	f040 8148 	bne.w	8002fce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d005      	beq.n	8002d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d130      	bne.n	8002db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	2203      	movs	r2, #3
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43db      	mvns	r3, r3
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 0201 	and.w	r2, r3, #1
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d017      	beq.n	8002df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	2203      	movs	r2, #3
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d123      	bne.n	8002e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	08da      	lsrs	r2, r3, #3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	3208      	adds	r2, #8
 8002e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	220f      	movs	r2, #15
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	43db      	mvns	r3, r3
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4013      	ands	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	691a      	ldr	r2, [r3, #16]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	f003 0307 	and.w	r3, r3, #7
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	3208      	adds	r2, #8
 8002e42:	69b9      	ldr	r1, [r7, #24]
 8002e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4e:	69fb      	ldr	r3, [r7, #28]
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	2203      	movs	r2, #3
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0203 	and.w	r2, r3, #3
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80a2 	beq.w	8002fce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	60fb      	str	r3, [r7, #12]
 8002e8e:	4b57      	ldr	r3, [pc, #348]	; (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e92:	4a56      	ldr	r2, [pc, #344]	; (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e98:	6453      	str	r3, [r2, #68]	; 0x44
 8002e9a:	4b54      	ldr	r3, [pc, #336]	; (8002fec <HAL_GPIO_Init+0x2e8>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea6:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_GPIO_Init+0x2ec>)
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	089b      	lsrs	r3, r3, #2
 8002eac:	3302      	adds	r3, #2
 8002eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	220f      	movs	r2, #15
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43db      	mvns	r3, r3
 8002ec4:	69ba      	ldr	r2, [r7, #24]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a49      	ldr	r2, [pc, #292]	; (8002ff4 <HAL_GPIO_Init+0x2f0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d019      	beq.n	8002f06 <HAL_GPIO_Init+0x202>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a48      	ldr	r2, [pc, #288]	; (8002ff8 <HAL_GPIO_Init+0x2f4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_GPIO_Init+0x1fe>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a47      	ldr	r2, [pc, #284]	; (8002ffc <HAL_GPIO_Init+0x2f8>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d00d      	beq.n	8002efe <HAL_GPIO_Init+0x1fa>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a46      	ldr	r2, [pc, #280]	; (8003000 <HAL_GPIO_Init+0x2fc>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d007      	beq.n	8002efa <HAL_GPIO_Init+0x1f6>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	4a45      	ldr	r2, [pc, #276]	; (8003004 <HAL_GPIO_Init+0x300>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d101      	bne.n	8002ef6 <HAL_GPIO_Init+0x1f2>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	e008      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002ef6:	2307      	movs	r3, #7
 8002ef8:	e006      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002efa:	2303      	movs	r3, #3
 8002efc:	e004      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002efe:	2302      	movs	r3, #2
 8002f00:	e002      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002f02:	2301      	movs	r3, #1
 8002f04:	e000      	b.n	8002f08 <HAL_GPIO_Init+0x204>
 8002f06:	2300      	movs	r3, #0
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f002 0203 	and.w	r2, r2, #3
 8002f0e:	0092      	lsls	r2, r2, #2
 8002f10:	4093      	lsls	r3, r2
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f18:	4935      	ldr	r1, [pc, #212]	; (8002ff0 <HAL_GPIO_Init+0x2ec>)
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	089b      	lsrs	r3, r3, #2
 8002f1e:	3302      	adds	r3, #2
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f26:	4b38      	ldr	r3, [pc, #224]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d003      	beq.n	8002f4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f4a:	4a2f      	ldr	r2, [pc, #188]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f50:	4b2d      	ldr	r3, [pc, #180]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f74:	4a24      	ldr	r2, [pc, #144]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f7a:	4b23      	ldr	r3, [pc, #140]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	43db      	mvns	r3, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4013      	ands	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d003      	beq.n	8002f9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f9e:	4a1a      	ldr	r2, [pc, #104]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa4:	4b18      	ldr	r3, [pc, #96]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d003      	beq.n	8002fc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <HAL_GPIO_Init+0x304>)
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	2b0f      	cmp	r3, #15
 8002fd8:	f67f aea2 	bls.w	8002d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
 8002fe0:	3724      	adds	r7, #36	; 0x24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40013800 	.word	0x40013800
 8002ff4:	40020000 	.word	0x40020000
 8002ff8:	40020400 	.word	0x40020400
 8002ffc:	40020800 	.word	0x40020800
 8003000:	40020c00 	.word	0x40020c00
 8003004:	40021000 	.word	0x40021000
 8003008:	40013c00 	.word	0x40013c00

0800300c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	460b      	mov	r3, r1
 8003016:	807b      	strh	r3, [r7, #2]
 8003018:	4613      	mov	r3, r2
 800301a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800301c:	787b      	ldrb	r3, [r7, #1]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003022:	887a      	ldrh	r2, [r7, #2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003028:	e003      	b.n	8003032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800302a:	887b      	ldrh	r3, [r7, #2]
 800302c:	041a      	lsls	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	619a      	str	r2, [r3, #24]
}
 8003032:	bf00      	nop
 8003034:	370c      	adds	r7, #12
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr

0800303e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800303e:	b480      	push	{r7}
 8003040:	b085      	sub	sp, #20
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
 8003046:	460b      	mov	r3, r1
 8003048:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003050:	887a      	ldrh	r2, [r7, #2]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	4013      	ands	r3, r2
 8003056:	041a      	lsls	r2, r3, #16
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	43d9      	mvns	r1, r3
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	400b      	ands	r3, r1
 8003060:	431a      	orrs	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	619a      	str	r2, [r3, #24]
}
 8003066:	bf00      	nop
 8003068:	3714      	adds	r7, #20
 800306a:	46bd      	mov	sp, r7
 800306c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003070:	4770      	bx	lr
	...

08003074 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d101      	bne.n	8003086 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e12b      	b.n	80032de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d106      	bne.n	80030a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f7fe feac 	bl	8001df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2224      	movs	r2, #36	; 0x24
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f022 0201 	bic.w	r2, r2, #1
 80030b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030d8:	f001 fb92 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 80030dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	4a81      	ldr	r2, [pc, #516]	; (80032e8 <HAL_I2C_Init+0x274>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d807      	bhi.n	80030f8 <HAL_I2C_Init+0x84>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a80      	ldr	r2, [pc, #512]	; (80032ec <HAL_I2C_Init+0x278>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bf94      	ite	ls
 80030f0:	2301      	movls	r3, #1
 80030f2:	2300      	movhi	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	e006      	b.n	8003106 <HAL_I2C_Init+0x92>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4a7d      	ldr	r2, [pc, #500]	; (80032f0 <HAL_I2C_Init+0x27c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	bf94      	ite	ls
 8003100:	2301      	movls	r3, #1
 8003102:	2300      	movhi	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0e7      	b.n	80032de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	4a78      	ldr	r2, [pc, #480]	; (80032f4 <HAL_I2C_Init+0x280>)
 8003112:	fba2 2303 	umull	r2, r3, r2, r3
 8003116:	0c9b      	lsrs	r3, r3, #18
 8003118:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	4a6a      	ldr	r2, [pc, #424]	; (80032e8 <HAL_I2C_Init+0x274>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d802      	bhi.n	8003148 <HAL_I2C_Init+0xd4>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	3301      	adds	r3, #1
 8003146:	e009      	b.n	800315c <HAL_I2C_Init+0xe8>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800314e:	fb02 f303 	mul.w	r3, r2, r3
 8003152:	4a69      	ldr	r2, [pc, #420]	; (80032f8 <HAL_I2C_Init+0x284>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	099b      	lsrs	r3, r3, #6
 800315a:	3301      	adds	r3, #1
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	430b      	orrs	r3, r1
 8003162:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	69db      	ldr	r3, [r3, #28]
 800316a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800316e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	495c      	ldr	r1, [pc, #368]	; (80032e8 <HAL_I2C_Init+0x274>)
 8003178:	428b      	cmp	r3, r1
 800317a:	d819      	bhi.n	80031b0 <HAL_I2C_Init+0x13c>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	1e59      	subs	r1, r3, #1
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	fbb1 f3f3 	udiv	r3, r1, r3
 800318a:	1c59      	adds	r1, r3, #1
 800318c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003190:	400b      	ands	r3, r1
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <HAL_I2C_Init+0x138>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	1e59      	subs	r1, r3, #1
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a4:	3301      	adds	r3, #1
 80031a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031aa:	e051      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 80031ac:	2304      	movs	r3, #4
 80031ae:	e04f      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d111      	bne.n	80031dc <HAL_I2C_Init+0x168>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1e58      	subs	r0, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6859      	ldr	r1, [r3, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	440b      	add	r3, r1
 80031c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ca:	3301      	adds	r3, #1
 80031cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf0c      	ite	eq
 80031d4:	2301      	moveq	r3, #1
 80031d6:	2300      	movne	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	e012      	b.n	8003202 <HAL_I2C_Init+0x18e>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	1e58      	subs	r0, r3, #1
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6859      	ldr	r1, [r3, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	0099      	lsls	r1, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	bf0c      	ite	eq
 80031fc:	2301      	moveq	r3, #1
 80031fe:	2300      	movne	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d001      	beq.n	800320a <HAL_I2C_Init+0x196>
 8003206:	2301      	movs	r3, #1
 8003208:	e022      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d10e      	bne.n	8003230 <HAL_I2C_Init+0x1bc>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	1e58      	subs	r0, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6859      	ldr	r1, [r3, #4]
 800321a:	460b      	mov	r3, r1
 800321c:	005b      	lsls	r3, r3, #1
 800321e:	440b      	add	r3, r1
 8003220:	fbb0 f3f3 	udiv	r3, r0, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800322a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800322e:	e00f      	b.n	8003250 <HAL_I2C_Init+0x1dc>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	1e58      	subs	r0, r3, #1
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6859      	ldr	r1, [r3, #4]
 8003238:	460b      	mov	r3, r1
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	0099      	lsls	r1, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	fbb0 f3f3 	udiv	r3, r0, r3
 8003246:	3301      	adds	r3, #1
 8003248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800324c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003250:	6879      	ldr	r1, [r7, #4]
 8003252:	6809      	ldr	r1, [r1, #0]
 8003254:	4313      	orrs	r3, r2
 8003256:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69da      	ldr	r2, [r3, #28]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800327e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	6911      	ldr	r1, [r2, #16]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	68d2      	ldr	r2, [r2, #12]
 800328a:	4311      	orrs	r1, r2
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	6812      	ldr	r2, [r2, #0]
 8003290:	430b      	orrs	r3, r1
 8003292:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	695a      	ldr	r2, [r3, #20]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0201 	orr.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	000186a0 	.word	0x000186a0
 80032ec:	001e847f 	.word	0x001e847f
 80032f0:	003d08ff 	.word	0x003d08ff
 80032f4:	431bde83 	.word	0x431bde83
 80032f8:	10624dd3 	.word	0x10624dd3

080032fc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b088      	sub	sp, #32
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	607a      	str	r2, [r7, #4]
 8003306:	461a      	mov	r2, r3
 8003308:	460b      	mov	r3, r1
 800330a:	817b      	strh	r3, [r7, #10]
 800330c:	4613      	mov	r3, r2
 800330e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003310:	f7fe ff56 	bl	80021c0 <HAL_GetTick>
 8003314:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b20      	cmp	r3, #32
 8003320:	f040 80e0 	bne.w	80034e4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	9300      	str	r3, [sp, #0]
 8003328:	2319      	movs	r3, #25
 800332a:	2201      	movs	r2, #1
 800332c:	4970      	ldr	r1, [pc, #448]	; (80034f0 <HAL_I2C_Master_Transmit+0x1f4>)
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 fc58 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800333a:	2302      	movs	r3, #2
 800333c:	e0d3      	b.n	80034e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_I2C_Master_Transmit+0x50>
 8003348:	2302      	movs	r3, #2
 800334a:	e0cc      	b.n	80034e6 <HAL_I2C_Master_Transmit+0x1ea>
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b01      	cmp	r3, #1
 8003360:	d007      	beq.n	8003372 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0201 	orr.w	r2, r2, #1
 8003370:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003380:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2221      	movs	r2, #33	; 0x21
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2210      	movs	r2, #16
 800338e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	893a      	ldrh	r2, [r7, #8]
 80033a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a8:	b29a      	uxth	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4a50      	ldr	r2, [pc, #320]	; (80034f4 <HAL_I2C_Master_Transmit+0x1f8>)
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033b4:	8979      	ldrh	r1, [r7, #10]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	6a3a      	ldr	r2, [r7, #32]
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fac2 	bl	8003944 <I2C_MasterRequestWrite>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e08d      	b.n	80034e6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ca:	2300      	movs	r3, #0
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	695b      	ldr	r3, [r3, #20]
 80033d4:	613b      	str	r3, [r7, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033e0:	e066      	b.n	80034b0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	6a39      	ldr	r1, [r7, #32]
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fcd2 	bl	8003d90 <I2C_WaitOnTXEFlagUntilTimeout>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00d      	beq.n	800340e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d107      	bne.n	800340a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003408:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e06b      	b.n	80034e6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b04      	cmp	r3, #4
 800344a:	d11b      	bne.n	8003484 <HAL_I2C_Master_Transmit+0x188>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	2b00      	cmp	r3, #0
 8003452:	d017      	beq.n	8003484 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	781a      	ldrb	r2, [r3, #0]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347c:	3b01      	subs	r3, #1
 800347e:	b29a      	uxth	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	6a39      	ldr	r1, [r7, #32]
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fcc2 	bl	8003e12 <I2C_WaitOnBTFFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00d      	beq.n	80034b0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	2b04      	cmp	r3, #4
 800349a:	d107      	bne.n	80034ac <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034aa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e01a      	b.n	80034e6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d194      	bne.n	80033e2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3718      	adds	r7, #24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	00100002 	.word	0x00100002
 80034f4:	ffff0000 	.word	0xffff0000

080034f8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08c      	sub	sp, #48	; 0x30
 80034fc:	af02      	add	r7, sp, #8
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	607a      	str	r2, [r7, #4]
 8003502:	461a      	mov	r2, r3
 8003504:	460b      	mov	r3, r1
 8003506:	817b      	strh	r3, [r7, #10]
 8003508:	4613      	mov	r3, r2
 800350a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800350c:	f7fe fe58 	bl	80021c0 <HAL_GetTick>
 8003510:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b20      	cmp	r3, #32
 800351c:	f040 820b 	bne.w	8003936 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	2319      	movs	r3, #25
 8003526:	2201      	movs	r2, #1
 8003528:	497c      	ldr	r1, [pc, #496]	; (800371c <HAL_I2C_Master_Receive+0x224>)
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fb5a 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	e1fe      	b.n	8003938 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d101      	bne.n	8003548 <HAL_I2C_Master_Receive+0x50>
 8003544:	2302      	movs	r3, #2
 8003546:	e1f7      	b.n	8003938 <HAL_I2C_Master_Receive+0x440>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b01      	cmp	r3, #1
 800355c:	d007      	beq.n	800356e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0201 	orr.w	r2, r2, #1
 800356c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800357c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2222      	movs	r2, #34	; 0x22
 8003582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2210      	movs	r2, #16
 800358a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	687a      	ldr	r2, [r7, #4]
 8003598:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	893a      	ldrh	r2, [r7, #8]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29a      	uxth	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4a5c      	ldr	r2, [pc, #368]	; (8003720 <HAL_I2C_Master_Receive+0x228>)
 80035ae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035b0:	8979      	ldrh	r1, [r7, #10]
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fa46 	bl	8003a48 <I2C_MasterRequestRead>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1b8      	b.n	8003938 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d113      	bne.n	80035f6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ce:	2300      	movs	r3, #0
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	623b      	str	r3, [r7, #32]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	623b      	str	r3, [r7, #32]
 80035e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f2:	601a      	str	r2, [r3, #0]
 80035f4:	e18c      	b.n	8003910 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d11b      	bne.n	8003636 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800360c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	61fb      	str	r3, [r7, #28]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	61fb      	str	r3, [r7, #28]
 8003622:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e16c      	b.n	8003910 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363a:	2b02      	cmp	r3, #2
 800363c:	d11b      	bne.n	8003676 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800364c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800365c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	61bb      	str	r3, [r7, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	e14c      	b.n	8003910 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003684:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	617b      	str	r3, [r7, #20]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800369c:	e138      	b.n	8003910 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	f200 80f1 	bhi.w	800388a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d123      	bne.n	80036f8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f000 fbed 	bl	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e139      	b.n	8003938 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	691a      	ldr	r2, [r3, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d6:	1c5a      	adds	r2, r3, #1
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036f6:	e10b      	b.n	8003910 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d14e      	bne.n	800379e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003706:	2200      	movs	r2, #0
 8003708:	4906      	ldr	r1, [pc, #24]	; (8003724 <HAL_I2C_Master_Receive+0x22c>)
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fa6a 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d008      	beq.n	8003728 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e10e      	b.n	8003938 <HAL_I2C_Master_Receive+0x440>
 800371a:	bf00      	nop
 800371c:	00100002 	.word	0x00100002
 8003720:	ffff0000 	.word	0xffff0000
 8003724:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003736:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374a:	1c5a      	adds	r2, r3, #1
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003754:	3b01      	subs	r3, #1
 8003756:	b29a      	uxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003760:	b29b      	uxth	r3, r3
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	691a      	ldr	r2, [r3, #16]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	1c5a      	adds	r2, r3, #1
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	3b01      	subs	r3, #1
 8003796:	b29a      	uxth	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800379c:	e0b8      	b.n	8003910 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800379e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a4:	2200      	movs	r2, #0
 80037a6:	4966      	ldr	r1, [pc, #408]	; (8003940 <HAL_I2C_Master_Receive+0x448>)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 fa1b 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0bf      	b.n	8003938 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	691a      	ldr	r2, [r3, #16]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	3b01      	subs	r3, #1
 80037f4:	b29a      	uxth	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003800:	2200      	movs	r2, #0
 8003802:	494f      	ldr	r1, [pc, #316]	; (8003940 <HAL_I2C_Master_Receive+0x448>)
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f9ed 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e091      	b.n	8003938 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003822:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	691a      	ldr	r2, [r3, #16]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	b2d2      	uxtb	r2, r2
 8003830:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	1c5a      	adds	r2, r3, #1
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	b2d2      	uxtb	r2, r2
 8003862:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387e:	b29b      	uxth	r3, r3
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003888:	e042      	b.n	8003910 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800388a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800388c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f000 fb00 	bl	8003e94 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d001      	beq.n	800389e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	e04c      	b.n	8003938 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	691a      	ldr	r2, [r3, #16]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ba:	3b01      	subs	r3, #1
 80038bc:	b29a      	uxth	r2, r3
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f003 0304 	and.w	r3, r3, #4
 80038da:	2b04      	cmp	r3, #4
 80038dc:	d118      	bne.n	8003910 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003906:	b29b      	uxth	r3, r3
 8003908:	3b01      	subs	r3, #1
 800390a:	b29a      	uxth	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003914:	2b00      	cmp	r3, #0
 8003916:	f47f aec2 	bne.w	800369e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003932:	2300      	movs	r3, #0
 8003934:	e000      	b.n	8003938 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003936:	2302      	movs	r3, #2
  }
}
 8003938:	4618      	mov	r0, r3
 800393a:	3728      	adds	r7, #40	; 0x28
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	00010004 	.word	0x00010004

08003944 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b088      	sub	sp, #32
 8003948:	af02      	add	r7, sp, #8
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	607a      	str	r2, [r7, #4]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	460b      	mov	r3, r1
 8003952:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	2b08      	cmp	r3, #8
 800395e:	d006      	beq.n	800396e <I2C_MasterRequestWrite+0x2a>
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d003      	beq.n	800396e <I2C_MasterRequestWrite+0x2a>
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800396c:	d108      	bne.n	8003980 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	e00b      	b.n	8003998 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003984:	2b12      	cmp	r3, #18
 8003986:	d107      	bne.n	8003998 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003996:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 f91d 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00d      	beq.n	80039cc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039be:	d103      	bne.n	80039c8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e035      	b.n	8003a38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039d4:	d108      	bne.n	80039e8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039d6:	897b      	ldrh	r3, [r7, #10]
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039e4:	611a      	str	r2, [r3, #16]
 80039e6:	e01b      	b.n	8003a20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039e8:	897b      	ldrh	r3, [r7, #10]
 80039ea:	11db      	asrs	r3, r3, #7
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	f003 0306 	and.w	r3, r3, #6
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	f063 030f 	orn	r3, r3, #15
 80039f8:	b2da      	uxtb	r2, r3
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	490e      	ldr	r1, [pc, #56]	; (8003a40 <I2C_MasterRequestWrite+0xfc>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 f943 	bl	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e010      	b.n	8003a38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a16:	897b      	ldrh	r3, [r7, #10]
 8003a18:	b2da      	uxtb	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4907      	ldr	r1, [pc, #28]	; (8003a44 <I2C_MasterRequestWrite+0x100>)
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 f933 	bl	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d001      	beq.n	8003a36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e000      	b.n	8003a38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	00010008 	.word	0x00010008
 8003a44:	00010002 	.word	0x00010002

08003a48 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af02      	add	r7, sp, #8
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	603b      	str	r3, [r7, #0]
 8003a54:	460b      	mov	r3, r1
 8003a56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a6c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d006      	beq.n	8003a82 <I2C_MasterRequestRead+0x3a>
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d003      	beq.n	8003a82 <I2C_MasterRequestRead+0x3a>
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a80:	d108      	bne.n	8003a94 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e00b      	b.n	8003aac <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	2b11      	cmp	r3, #17
 8003a9a:	d107      	bne.n	8003aac <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003aaa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	9300      	str	r3, [sp, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ab8:	68f8      	ldr	r0, [r7, #12]
 8003aba:	f000 f893 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ad2:	d103      	bne.n	8003adc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ada:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e079      	b.n	8003bd4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ae8:	d108      	bne.n	8003afc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003aea:	897b      	ldrh	r3, [r7, #10]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	611a      	str	r2, [r3, #16]
 8003afa:	e05f      	b.n	8003bbc <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003afc:	897b      	ldrh	r3, [r7, #10]
 8003afe:	11db      	asrs	r3, r3, #7
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	f003 0306 	and.w	r3, r3, #6
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	f063 030f 	orn	r3, r3, #15
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	4930      	ldr	r1, [pc, #192]	; (8003bdc <I2C_MasterRequestRead+0x194>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 f8b9 	bl	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e054      	b.n	8003bd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b2a:	897b      	ldrh	r3, [r7, #10]
 8003b2c:	b2da      	uxtb	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	4929      	ldr	r1, [pc, #164]	; (8003be0 <I2C_MasterRequestRead+0x198>)
 8003b3a:	68f8      	ldr	r0, [r7, #12]
 8003b3c:	f000 f8a9 	bl	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e044      	b.n	8003bd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	613b      	str	r3, [r7, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	613b      	str	r3, [r7, #16]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b6e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f000 f831 	bl	8003be4 <I2C_WaitOnFlagUntilTimeout>
 8003b82:	4603      	mov	r3, r0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00d      	beq.n	8003ba4 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b96:	d103      	bne.n	8003ba0 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e017      	b.n	8003bd4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003ba4:	897b      	ldrh	r3, [r7, #10]
 8003ba6:	11db      	asrs	r3, r3, #7
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	f003 0306 	and.w	r3, r3, #6
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	f063 030e 	orn	r3, r3, #14
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	4907      	ldr	r1, [pc, #28]	; (8003be0 <I2C_MasterRequestRead+0x198>)
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f865 	bl	8003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e000      	b.n	8003bd4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3718      	adds	r7, #24
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	00010008 	.word	0x00010008
 8003be0:	00010002 	.word	0x00010002

08003be4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	603b      	str	r3, [r7, #0]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bf4:	e025      	b.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bfc:	d021      	beq.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bfe:	f7fe fadf 	bl	80021c0 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d302      	bcc.n	8003c14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d116      	bne.n	8003c42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2220      	movs	r2, #32
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f043 0220 	orr.w	r2, r3, #32
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e023      	b.n	8003c8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10d      	bne.n	8003c68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4013      	ands	r3, r2
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bf0c      	ite	eq
 8003c5e:	2301      	moveq	r3, #1
 8003c60:	2300      	movne	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	e00c      	b.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	43da      	mvns	r2, r3
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	4013      	ands	r3, r2
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bf0c      	ite	eq
 8003c7a:	2301      	moveq	r3, #1
 8003c7c:	2300      	movne	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	461a      	mov	r2, r3
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d0b6      	beq.n	8003bf6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b084      	sub	sp, #16
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
 8003c9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ca0:	e051      	b.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695b      	ldr	r3, [r3, #20]
 8003ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cb0:	d123      	bne.n	8003cfa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f043 0204 	orr.w	r2, r3, #4
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e046      	b.n	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d021      	beq.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fe fa5d 	bl	80021c0 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d116      	bne.n	8003d46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2220      	movs	r2, #32
 8003d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d32:	f043 0220 	orr.w	r2, r3, #32
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e020      	b.n	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d10c      	bne.n	8003d6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	43da      	mvns	r2, r3
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf14      	ite	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	2300      	moveq	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	e00b      	b.n	8003d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	43da      	mvns	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4013      	ands	r3, r2
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	bf14      	ite	ne
 8003d7c:	2301      	movne	r3, #1
 8003d7e:	2300      	moveq	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d18d      	bne.n	8003ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d9c:	e02d      	b.n	8003dfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 f8ce 	bl	8003f40 <I2C_IsAcknowledgeFailed>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e02d      	b.n	8003e0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d021      	beq.n	8003dfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db6:	f7fe fa03 	bl	80021c0 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d302      	bcc.n	8003dcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d116      	bne.n	8003dfa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de6:	f043 0220 	orr.w	r2, r3, #32
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e007      	b.n	8003e0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e04:	2b80      	cmp	r3, #128	; 0x80
 8003e06:	d1ca      	bne.n	8003d9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e1e:	e02d      	b.n	8003e7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e20:	68f8      	ldr	r0, [r7, #12]
 8003e22:	f000 f88d 	bl	8003f40 <I2C_IsAcknowledgeFailed>
 8003e26:	4603      	mov	r3, r0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e02d      	b.n	8003e8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e36:	d021      	beq.n	8003e7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e38:	f7fe f9c2 	bl	80021c0 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d302      	bcc.n	8003e4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d116      	bne.n	8003e7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e68:	f043 0220 	orr.w	r2, r3, #32
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e007      	b.n	8003e8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b04      	cmp	r3, #4
 8003e88:	d1ca      	bne.n	8003e20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ea0:	e042      	b.n	8003f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0310 	and.w	r3, r3, #16
 8003eac:	2b10      	cmp	r3, #16
 8003eae:	d119      	bne.n	8003ee4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f06f 0210 	mvn.w	r2, #16
 8003eb8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2220      	movs	r2, #32
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e029      	b.n	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ee4:	f7fe f96c 	bl	80021c0 <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d302      	bcc.n	8003efa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2220      	movs	r2, #32
 8003f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f14:	f043 0220 	orr.w	r2, r3, #32
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e007      	b.n	8003f38 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f32:	2b40      	cmp	r3, #64	; 0x40
 8003f34:	d1b5      	bne.n	8003ea2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f56:	d11b      	bne.n	8003f90 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f60:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7c:	f043 0204 	orr.w	r2, r3, #4
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
	...

08003fa0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e267      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0301 	and.w	r3, r3, #1
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d075      	beq.n	80040aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fbe:	4b88      	ldr	r3, [pc, #544]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	f003 030c 	and.w	r3, r3, #12
 8003fc6:	2b04      	cmp	r3, #4
 8003fc8:	d00c      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fca:	4b85      	ldr	r3, [pc, #532]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fd2:	2b08      	cmp	r3, #8
 8003fd4:	d112      	bne.n	8003ffc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd6:	4b82      	ldr	r3, [pc, #520]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fe2:	d10b      	bne.n	8003ffc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe4:	4b7e      	ldr	r3, [pc, #504]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d05b      	beq.n	80040a8 <HAL_RCC_OscConfig+0x108>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d157      	bne.n	80040a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e242      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004004:	d106      	bne.n	8004014 <HAL_RCC_OscConfig+0x74>
 8004006:	4b76      	ldr	r3, [pc, #472]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a75      	ldr	r2, [pc, #468]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 800400c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004010:	6013      	str	r3, [r2, #0]
 8004012:	e01d      	b.n	8004050 <HAL_RCC_OscConfig+0xb0>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800401c:	d10c      	bne.n	8004038 <HAL_RCC_OscConfig+0x98>
 800401e:	4b70      	ldr	r3, [pc, #448]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a6f      	ldr	r2, [pc, #444]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8004024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004028:	6013      	str	r3, [r2, #0]
 800402a:	4b6d      	ldr	r3, [pc, #436]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a6c      	ldr	r2, [pc, #432]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8004030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	e00b      	b.n	8004050 <HAL_RCC_OscConfig+0xb0>
 8004038:	4b69      	ldr	r3, [pc, #420]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a68      	ldr	r2, [pc, #416]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 800403e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004042:	6013      	str	r3, [r2, #0]
 8004044:	4b66      	ldr	r3, [pc, #408]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a65      	ldr	r2, [pc, #404]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 800404a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d013      	beq.n	8004080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004058:	f7fe f8b2 	bl	80021c0 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004060:	f7fe f8ae 	bl	80021c0 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b64      	cmp	r3, #100	; 0x64
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e207      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004072:	4b5b      	ldr	r3, [pc, #364]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0xc0>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004080:	f7fe f89e 	bl	80021c0 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004088:	f7fe f89a 	bl	80021c0 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b64      	cmp	r3, #100	; 0x64
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e1f3      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409a:	4b51      	ldr	r3, [pc, #324]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f0      	bne.n	8004088 <HAL_RCC_OscConfig+0xe8>
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d063      	beq.n	800417e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040b6:	4b4a      	ldr	r3, [pc, #296]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	f003 030c 	and.w	r3, r3, #12
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040c2:	4b47      	ldr	r3, [pc, #284]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040ca:	2b08      	cmp	r3, #8
 80040cc:	d11c      	bne.n	8004108 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ce:	4b44      	ldr	r3, [pc, #272]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d116      	bne.n	8004108 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	4b41      	ldr	r3, [pc, #260]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d005      	beq.n	80040f2 <HAL_RCC_OscConfig+0x152>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68db      	ldr	r3, [r3, #12]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d001      	beq.n	80040f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e1c7      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	4b3b      	ldr	r3, [pc, #236]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4937      	ldr	r1, [pc, #220]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8004102:	4313      	orrs	r3, r2
 8004104:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004106:	e03a      	b.n	800417e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004110:	4b34      	ldr	r3, [pc, #208]	; (80041e4 <HAL_RCC_OscConfig+0x244>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004116:	f7fe f853 	bl	80021c0 <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800411c:	e008      	b.n	8004130 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800411e:	f7fe f84f 	bl	80021c0 <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b02      	cmp	r3, #2
 800412a:	d901      	bls.n	8004130 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e1a8      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004130:	4b2b      	ldr	r3, [pc, #172]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0302 	and.w	r3, r3, #2
 8004138:	2b00      	cmp	r3, #0
 800413a:	d0f0      	beq.n	800411e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413c:	4b28      	ldr	r3, [pc, #160]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	00db      	lsls	r3, r3, #3
 800414a:	4925      	ldr	r1, [pc, #148]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 800414c:	4313      	orrs	r3, r2
 800414e:	600b      	str	r3, [r1, #0]
 8004150:	e015      	b.n	800417e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004152:	4b24      	ldr	r3, [pc, #144]	; (80041e4 <HAL_RCC_OscConfig+0x244>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe f832 	bl	80021c0 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004160:	f7fe f82e 	bl	80021c0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e187      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004172:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d036      	beq.n	80041f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	695b      	ldr	r3, [r3, #20]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d016      	beq.n	80041c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004192:	4b15      	ldr	r3, [pc, #84]	; (80041e8 <HAL_RCC_OscConfig+0x248>)
 8004194:	2201      	movs	r2, #1
 8004196:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004198:	f7fe f812 	bl	80021c0 <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a0:	f7fe f80e 	bl	80021c0 <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e167      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041b2:	4b0b      	ldr	r3, [pc, #44]	; (80041e0 <HAL_RCC_OscConfig+0x240>)
 80041b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d0f0      	beq.n	80041a0 <HAL_RCC_OscConfig+0x200>
 80041be:	e01b      	b.n	80041f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c0:	4b09      	ldr	r3, [pc, #36]	; (80041e8 <HAL_RCC_OscConfig+0x248>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041c6:	f7fd fffb 	bl	80021c0 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	e00e      	b.n	80041ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ce:	f7fd fff7 	bl	80021c0 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d907      	bls.n	80041ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e150      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
 80041e0:	40023800 	.word	0x40023800
 80041e4:	42470000 	.word	0x42470000
 80041e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ec:	4b88      	ldr	r3, [pc, #544]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80041ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d1ea      	bne.n	80041ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0304 	and.w	r3, r3, #4
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8097 	beq.w	8004334 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004206:	2300      	movs	r3, #0
 8004208:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420a:	4b81      	ldr	r3, [pc, #516]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d10f      	bne.n	8004236 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004216:	2300      	movs	r3, #0
 8004218:	60bb      	str	r3, [r7, #8]
 800421a:	4b7d      	ldr	r3, [pc, #500]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 800421c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421e:	4a7c      	ldr	r2, [pc, #496]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6413      	str	r3, [r2, #64]	; 0x40
 8004226:	4b7a      	ldr	r3, [pc, #488]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004232:	2301      	movs	r3, #1
 8004234:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004236:	4b77      	ldr	r3, [pc, #476]	; (8004414 <HAL_RCC_OscConfig+0x474>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423e:	2b00      	cmp	r3, #0
 8004240:	d118      	bne.n	8004274 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004242:	4b74      	ldr	r3, [pc, #464]	; (8004414 <HAL_RCC_OscConfig+0x474>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a73      	ldr	r2, [pc, #460]	; (8004414 <HAL_RCC_OscConfig+0x474>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424e:	f7fd ffb7 	bl	80021c0 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004256:	f7fd ffb3 	bl	80021c0 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e10c      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004268:	4b6a      	ldr	r3, [pc, #424]	; (8004414 <HAL_RCC_OscConfig+0x474>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d106      	bne.n	800428a <HAL_RCC_OscConfig+0x2ea>
 800427c:	4b64      	ldr	r3, [pc, #400]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 800427e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004280:	4a63      	ldr	r2, [pc, #396]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 8004282:	f043 0301 	orr.w	r3, r3, #1
 8004286:	6713      	str	r3, [r2, #112]	; 0x70
 8004288:	e01c      	b.n	80042c4 <HAL_RCC_OscConfig+0x324>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b05      	cmp	r3, #5
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x30c>
 8004292:	4b5f      	ldr	r3, [pc, #380]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	4a5e      	ldr	r2, [pc, #376]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 8004298:	f043 0304 	orr.w	r3, r3, #4
 800429c:	6713      	str	r3, [r2, #112]	; 0x70
 800429e:	4b5c      	ldr	r3, [pc, #368]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	4a5b      	ldr	r2, [pc, #364]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80042a4:	f043 0301 	orr.w	r3, r3, #1
 80042a8:	6713      	str	r3, [r2, #112]	; 0x70
 80042aa:	e00b      	b.n	80042c4 <HAL_RCC_OscConfig+0x324>
 80042ac:	4b58      	ldr	r3, [pc, #352]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a57      	ldr	r2, [pc, #348]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80042b2:	f023 0301 	bic.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
 80042b8:	4b55      	ldr	r3, [pc, #340]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80042ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042bc:	4a54      	ldr	r2, [pc, #336]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80042be:	f023 0304 	bic.w	r3, r3, #4
 80042c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d015      	beq.n	80042f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042cc:	f7fd ff78 	bl	80021c0 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fd ff74 	bl	80021c0 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0cb      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ea:	4b49      	ldr	r3, [pc, #292]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d0ee      	beq.n	80042d4 <HAL_RCC_OscConfig+0x334>
 80042f6:	e014      	b.n	8004322 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042f8:	f7fd ff62 	bl	80021c0 <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042fe:	e00a      	b.n	8004316 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004300:	f7fd ff5e 	bl	80021c0 <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	f241 3288 	movw	r2, #5000	; 0x1388
 800430e:	4293      	cmp	r3, r2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e0b5      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004316:	4b3e      	ldr	r3, [pc, #248]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 8004318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1ee      	bne.n	8004300 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004322:	7dfb      	ldrb	r3, [r7, #23]
 8004324:	2b01      	cmp	r3, #1
 8004326:	d105      	bne.n	8004334 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004328:	4b39      	ldr	r3, [pc, #228]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	4a38      	ldr	r2, [pc, #224]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 800432e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004332:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80a1 	beq.w	8004480 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800433e:	4b34      	ldr	r3, [pc, #208]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	f003 030c 	and.w	r3, r3, #12
 8004346:	2b08      	cmp	r3, #8
 8004348:	d05c      	beq.n	8004404 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	2b02      	cmp	r3, #2
 8004350:	d141      	bne.n	80043d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004352:	4b31      	ldr	r3, [pc, #196]	; (8004418 <HAL_RCC_OscConfig+0x478>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7fd ff32 	bl	80021c0 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004360:	f7fd ff2e 	bl	80021c0 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e087      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004372:	4b27      	ldr	r3, [pc, #156]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69da      	ldr	r2, [r3, #28]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	019b      	lsls	r3, r3, #6
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	3b01      	subs	r3, #1
 8004398:	041b      	lsls	r3, r3, #16
 800439a:	431a      	orrs	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	061b      	lsls	r3, r3, #24
 80043a2:	491b      	ldr	r1, [pc, #108]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043a8:	4b1b      	ldr	r3, [pc, #108]	; (8004418 <HAL_RCC_OscConfig+0x478>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fd ff07 	bl	80021c0 <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b6:	f7fd ff03 	bl	80021c0 <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e05c      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x416>
 80043d4:	e054      	b.n	8004480 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d6:	4b10      	ldr	r3, [pc, #64]	; (8004418 <HAL_RCC_OscConfig+0x478>)
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fd fef0 	bl	80021c0 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fd feec 	bl	80021c0 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e045      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCC_OscConfig+0x470>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x444>
 8004402:	e03d      	b.n	8004480 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	699b      	ldr	r3, [r3, #24]
 8004408:	2b01      	cmp	r3, #1
 800440a:	d107      	bne.n	800441c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e038      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
 8004410:	40023800 	.word	0x40023800
 8004414:	40007000 	.word	0x40007000
 8004418:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x4ec>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d028      	beq.n	800447c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004434:	429a      	cmp	r2, r3
 8004436:	d121      	bne.n	800447c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	429a      	cmp	r2, r3
 8004444:	d11a      	bne.n	800447c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800444c:	4013      	ands	r3, r2
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004452:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004454:	4293      	cmp	r3, r2
 8004456:	d111      	bne.n	800447c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	3b01      	subs	r3, #1
 8004466:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d107      	bne.n	800447c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004476:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40023800 	.word	0x40023800

08004490 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d101      	bne.n	80044a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e0cc      	b.n	800463e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044a4:	4b68      	ldr	r3, [pc, #416]	; (8004648 <HAL_RCC_ClockConfig+0x1b8>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d90c      	bls.n	80044cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b2:	4b65      	ldr	r3, [pc, #404]	; (8004648 <HAL_RCC_ClockConfig+0x1b8>)
 80044b4:	683a      	ldr	r2, [r7, #0]
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ba:	4b63      	ldr	r3, [pc, #396]	; (8004648 <HAL_RCC_ClockConfig+0x1b8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0307 	and.w	r3, r3, #7
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0b8      	b.n	800463e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0302 	and.w	r3, r3, #2
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d020      	beq.n	800451a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0304 	and.w	r3, r3, #4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044e4:	4b59      	ldr	r3, [pc, #356]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	4a58      	ldr	r2, [pc, #352]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0308 	and.w	r3, r3, #8
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044fc:	4b53      	ldr	r3, [pc, #332]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	4a52      	ldr	r2, [pc, #328]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004506:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004508:	4b50      	ldr	r3, [pc, #320]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	494d      	ldr	r1, [pc, #308]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d044      	beq.n	80045b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d107      	bne.n	800453e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800452e:	4b47      	ldr	r3, [pc, #284]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d119      	bne.n	800456e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e07f      	b.n	800463e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d003      	beq.n	800454e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800454a:	2b03      	cmp	r3, #3
 800454c:	d107      	bne.n	800455e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800454e:	4b3f      	ldr	r3, [pc, #252]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d109      	bne.n	800456e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e06f      	b.n	800463e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800455e:	4b3b      	ldr	r3, [pc, #236]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e067      	b.n	800463e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800456e:	4b37      	ldr	r3, [pc, #220]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f023 0203 	bic.w	r2, r3, #3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	4934      	ldr	r1, [pc, #208]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	4313      	orrs	r3, r2
 800457e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004580:	f7fd fe1e 	bl	80021c0 <HAL_GetTick>
 8004584:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004586:	e00a      	b.n	800459e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004588:	f7fd fe1a 	bl	80021c0 <HAL_GetTick>
 800458c:	4602      	mov	r2, r0
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	1ad3      	subs	r3, r2, r3
 8004592:	f241 3288 	movw	r2, #5000	; 0x1388
 8004596:	4293      	cmp	r3, r2
 8004598:	d901      	bls.n	800459e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800459a:	2303      	movs	r3, #3
 800459c:	e04f      	b.n	800463e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800459e:	4b2b      	ldr	r3, [pc, #172]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f003 020c 	and.w	r2, r3, #12
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d1eb      	bne.n	8004588 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045b0:	4b25      	ldr	r3, [pc, #148]	; (8004648 <HAL_RCC_ClockConfig+0x1b8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d20c      	bcs.n	80045d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045be:	4b22      	ldr	r3, [pc, #136]	; (8004648 <HAL_RCC_ClockConfig+0x1b8>)
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c6:	4b20      	ldr	r3, [pc, #128]	; (8004648 <HAL_RCC_ClockConfig+0x1b8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0307 	and.w	r3, r3, #7
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d001      	beq.n	80045d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e032      	b.n	800463e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d008      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e4:	4b19      	ldr	r3, [pc, #100]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	4916      	ldr	r1, [pc, #88]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d009      	beq.n	8004616 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004602:	4b12      	ldr	r3, [pc, #72]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	490e      	ldr	r1, [pc, #56]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 8004612:	4313      	orrs	r3, r2
 8004614:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004616:	f000 f821 	bl	800465c <HAL_RCC_GetSysClockFreq>
 800461a:	4602      	mov	r2, r0
 800461c:	4b0b      	ldr	r3, [pc, #44]	; (800464c <HAL_RCC_ClockConfig+0x1bc>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 030f 	and.w	r3, r3, #15
 8004626:	490a      	ldr	r1, [pc, #40]	; (8004650 <HAL_RCC_ClockConfig+0x1c0>)
 8004628:	5ccb      	ldrb	r3, [r1, r3]
 800462a:	fa22 f303 	lsr.w	r3, r2, r3
 800462e:	4a09      	ldr	r2, [pc, #36]	; (8004654 <HAL_RCC_ClockConfig+0x1c4>)
 8004630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <HAL_RCC_ClockConfig+0x1c8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4618      	mov	r0, r3
 8004638:	f7fd fd7e 	bl	8002138 <HAL_InitTick>

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40023c00 	.word	0x40023c00
 800464c:	40023800 	.word	0x40023800
 8004650:	08006b84 	.word	0x08006b84
 8004654:	20000000 	.word	0x20000000
 8004658:	20000004 	.word	0x20000004

0800465c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800465c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004660:	b090      	sub	sp, #64	; 0x40
 8004662:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
 8004668:	2300      	movs	r3, #0
 800466a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800466c:	2300      	movs	r3, #0
 800466e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004670:	2300      	movs	r3, #0
 8004672:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004674:	4b59      	ldr	r3, [pc, #356]	; (80047dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 030c 	and.w	r3, r3, #12
 800467c:	2b08      	cmp	r3, #8
 800467e:	d00d      	beq.n	800469c <HAL_RCC_GetSysClockFreq+0x40>
 8004680:	2b08      	cmp	r3, #8
 8004682:	f200 80a1 	bhi.w	80047c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0x34>
 800468a:	2b04      	cmp	r3, #4
 800468c:	d003      	beq.n	8004696 <HAL_RCC_GetSysClockFreq+0x3a>
 800468e:	e09b      	b.n	80047c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004690:	4b53      	ldr	r3, [pc, #332]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004692:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004694:	e09b      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004696:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004698:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800469a:	e098      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800469c:	4b4f      	ldr	r3, [pc, #316]	; (80047dc <HAL_RCC_GetSysClockFreq+0x180>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046a4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046a6:	4b4d      	ldr	r3, [pc, #308]	; (80047dc <HAL_RCC_GetSysClockFreq+0x180>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d028      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b2:	4b4a      	ldr	r3, [pc, #296]	; (80047dc <HAL_RCC_GetSysClockFreq+0x180>)
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	099b      	lsrs	r3, r3, #6
 80046b8:	2200      	movs	r2, #0
 80046ba:	623b      	str	r3, [r7, #32]
 80046bc:	627a      	str	r2, [r7, #36]	; 0x24
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80046c4:	2100      	movs	r1, #0
 80046c6:	4b47      	ldr	r3, [pc, #284]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046c8:	fb03 f201 	mul.w	r2, r3, r1
 80046cc:	2300      	movs	r3, #0
 80046ce:	fb00 f303 	mul.w	r3, r0, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	4a43      	ldr	r2, [pc, #268]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80046d6:	fba0 1202 	umull	r1, r2, r0, r2
 80046da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046dc:	460a      	mov	r2, r1
 80046de:	62ba      	str	r2, [r7, #40]	; 0x28
 80046e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046e2:	4413      	add	r3, r2
 80046e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e8:	2200      	movs	r2, #0
 80046ea:	61bb      	str	r3, [r7, #24]
 80046ec:	61fa      	str	r2, [r7, #28]
 80046ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046f6:	f7fc f9e1 	bl	8000abc <__aeabi_uldivmod>
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4613      	mov	r3, r2
 8004700:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004702:	e053      	b.n	80047ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004704:	4b35      	ldr	r3, [pc, #212]	; (80047dc <HAL_RCC_GetSysClockFreq+0x180>)
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	099b      	lsrs	r3, r3, #6
 800470a:	2200      	movs	r2, #0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	617a      	str	r2, [r7, #20]
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004716:	f04f 0b00 	mov.w	fp, #0
 800471a:	4652      	mov	r2, sl
 800471c:	465b      	mov	r3, fp
 800471e:	f04f 0000 	mov.w	r0, #0
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	0159      	lsls	r1, r3, #5
 8004728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800472c:	0150      	lsls	r0, r2, #5
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	ebb2 080a 	subs.w	r8, r2, sl
 8004736:	eb63 090b 	sbc.w	r9, r3, fp
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004746:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800474a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800474e:	ebb2 0408 	subs.w	r4, r2, r8
 8004752:	eb63 0509 	sbc.w	r5, r3, r9
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	00eb      	lsls	r3, r5, #3
 8004760:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004764:	00e2      	lsls	r2, r4, #3
 8004766:	4614      	mov	r4, r2
 8004768:	461d      	mov	r5, r3
 800476a:	eb14 030a 	adds.w	r3, r4, sl
 800476e:	603b      	str	r3, [r7, #0]
 8004770:	eb45 030b 	adc.w	r3, r5, fp
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004782:	4629      	mov	r1, r5
 8004784:	028b      	lsls	r3, r1, #10
 8004786:	4621      	mov	r1, r4
 8004788:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800478c:	4621      	mov	r1, r4
 800478e:	028a      	lsls	r2, r1, #10
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004796:	2200      	movs	r2, #0
 8004798:	60bb      	str	r3, [r7, #8]
 800479a:	60fa      	str	r2, [r7, #12]
 800479c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a0:	f7fc f98c 	bl	8000abc <__aeabi_uldivmod>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	4613      	mov	r3, r2
 80047aa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047ac:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_RCC_GetSysClockFreq+0x180>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	0c1b      	lsrs	r3, r3, #16
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	3301      	adds	r3, #1
 80047b8:	005b      	lsls	r3, r3, #1
 80047ba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80047bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047c6:	e002      	b.n	80047ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047c8:	4b05      	ldr	r3, [pc, #20]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80047cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3740      	adds	r7, #64	; 0x40
 80047d4:	46bd      	mov	sp, r7
 80047d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047da:	bf00      	nop
 80047dc:	40023800 	.word	0x40023800
 80047e0:	00f42400 	.word	0x00f42400
 80047e4:	017d7840 	.word	0x017d7840

080047e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047ec:	4b03      	ldr	r3, [pc, #12]	; (80047fc <HAL_RCC_GetHCLKFreq+0x14>)
 80047ee:	681b      	ldr	r3, [r3, #0]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000000 	.word	0x20000000

08004800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004804:	f7ff fff0 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004808:	4602      	mov	r2, r0
 800480a:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	0a9b      	lsrs	r3, r3, #10
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	4903      	ldr	r1, [pc, #12]	; (8004824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004816:	5ccb      	ldrb	r3, [r1, r3]
 8004818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800481c:	4618      	mov	r0, r3
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40023800 	.word	0x40023800
 8004824:	08006b94 	.word	0x08006b94

08004828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800482c:	f7ff ffdc 	bl	80047e8 <HAL_RCC_GetHCLKFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b05      	ldr	r3, [pc, #20]	; (8004848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	0b5b      	lsrs	r3, r3, #13
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	4903      	ldr	r1, [pc, #12]	; (800484c <HAL_RCC_GetPCLK2Freq+0x24>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40023800 	.word	0x40023800
 800484c:	08006b94 	.word	0x08006b94

08004850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	e041      	b.n	80048e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d106      	bne.n	800487c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f7fd fb16 	bl	8001ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	3304      	adds	r3, #4
 800488c:	4619      	mov	r1, r3
 800488e:	4610      	mov	r0, r2
 8004890:	f000 fa88 	bl	8004da4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3708      	adds	r7, #8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b01      	cmp	r3, #1
 8004902:	d001      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e044      	b.n	8004992 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68da      	ldr	r2, [r3, #12]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0201 	orr.w	r2, r2, #1
 800491e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d018      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004932:	d013      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a1a      	ldr	r2, [pc, #104]	; (80049a4 <HAL_TIM_Base_Start_IT+0xb4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00e      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a19      	ldr	r2, [pc, #100]	; (80049a8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d009      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a17      	ldr	r2, [pc, #92]	; (80049ac <HAL_TIM_Base_Start_IT+0xbc>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d004      	beq.n	800495c <HAL_TIM_Base_Start_IT+0x6c>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a16      	ldr	r2, [pc, #88]	; (80049b0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d111      	bne.n	8004980 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f003 0307 	and.w	r3, r3, #7
 8004966:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b06      	cmp	r3, #6
 800496c:	d010      	beq.n	8004990 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0201 	orr.w	r2, r2, #1
 800497c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	e007      	b.n	8004990 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f042 0201 	orr.w	r2, r2, #1
 800498e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	40010000 	.word	0x40010000
 80049a4:	40000400 	.word	0x40000400
 80049a8:	40000800 	.word	0x40000800
 80049ac:	40000c00 	.word	0x40000c00
 80049b0:	40014000 	.word	0x40014000

080049b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b02      	cmp	r3, #2
 80049c8:	d122      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d11b      	bne.n	8004a10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0202 	mvn.w	r2, #2
 80049e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f9b5 	bl	8004d66 <HAL_TIM_IC_CaptureCallback>
 80049fc:	e005      	b.n	8004a0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9a7 	bl	8004d52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f9b8 	bl	8004d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	f003 0304 	and.w	r3, r3, #4
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	d122      	bne.n	8004a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d11b      	bne.n	8004a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0204 	mvn.w	r2, #4
 8004a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f98b 	bl	8004d66 <HAL_TIM_IC_CaptureCallback>
 8004a50:	e005      	b.n	8004a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f97d 	bl	8004d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f98e 	bl	8004d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	691b      	ldr	r3, [r3, #16]
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	2b08      	cmp	r3, #8
 8004a70:	d122      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d11b      	bne.n	8004ab8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f06f 0208 	mvn.w	r2, #8
 8004a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2204      	movs	r2, #4
 8004a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	f003 0303 	and.w	r3, r3, #3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 f961 	bl	8004d66 <HAL_TIM_IC_CaptureCallback>
 8004aa4:	e005      	b.n	8004ab2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f953 	bl	8004d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f964 	bl	8004d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	2b10      	cmp	r3, #16
 8004ac4:	d122      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b10      	cmp	r3, #16
 8004ad2:	d11b      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f06f 0210 	mvn.w	r2, #16
 8004adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f937 	bl	8004d66 <HAL_TIM_IC_CaptureCallback>
 8004af8:	e005      	b.n	8004b06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f929 	bl	8004d52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f93a 	bl	8004d7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d10e      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d107      	bne.n	8004b38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f06f 0201 	mvn.w	r2, #1
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7fc fede 	bl	80018f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b80      	cmp	r3, #128	; 0x80
 8004b44:	d10e      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b50:	2b80      	cmp	r3, #128	; 0x80
 8004b52:	d107      	bne.n	8004b64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fab2 	bl	80050c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d10e      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b40      	cmp	r3, #64	; 0x40
 8004b7e:	d107      	bne.n	8004b90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f000 f8ff 	bl	8004d8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d10e      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b20      	cmp	r3, #32
 8004baa:	d107      	bne.n	8004bbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f06f 0220 	mvn.w	r2, #32
 8004bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa7c 	bl	80050b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bbc:	bf00      	nop
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_TIM_ConfigClockSource+0x1c>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e0b4      	b.n	8004d4a <HAL_TIM_ConfigClockSource+0x186>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c18:	d03e      	beq.n	8004c98 <HAL_TIM_ConfigClockSource+0xd4>
 8004c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c1e:	f200 8087 	bhi.w	8004d30 <HAL_TIM_ConfigClockSource+0x16c>
 8004c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c26:	f000 8086 	beq.w	8004d36 <HAL_TIM_ConfigClockSource+0x172>
 8004c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2e:	d87f      	bhi.n	8004d30 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b70      	cmp	r3, #112	; 0x70
 8004c32:	d01a      	beq.n	8004c6a <HAL_TIM_ConfigClockSource+0xa6>
 8004c34:	2b70      	cmp	r3, #112	; 0x70
 8004c36:	d87b      	bhi.n	8004d30 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b60      	cmp	r3, #96	; 0x60
 8004c3a:	d050      	beq.n	8004cde <HAL_TIM_ConfigClockSource+0x11a>
 8004c3c:	2b60      	cmp	r3, #96	; 0x60
 8004c3e:	d877      	bhi.n	8004d30 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b50      	cmp	r3, #80	; 0x50
 8004c42:	d03c      	beq.n	8004cbe <HAL_TIM_ConfigClockSource+0xfa>
 8004c44:	2b50      	cmp	r3, #80	; 0x50
 8004c46:	d873      	bhi.n	8004d30 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b40      	cmp	r3, #64	; 0x40
 8004c4a:	d058      	beq.n	8004cfe <HAL_TIM_ConfigClockSource+0x13a>
 8004c4c:	2b40      	cmp	r3, #64	; 0x40
 8004c4e:	d86f      	bhi.n	8004d30 <HAL_TIM_ConfigClockSource+0x16c>
 8004c50:	2b30      	cmp	r3, #48	; 0x30
 8004c52:	d064      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0x15a>
 8004c54:	2b30      	cmp	r3, #48	; 0x30
 8004c56:	d86b      	bhi.n	8004d30 <HAL_TIM_ConfigClockSource+0x16c>
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d060      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0x15a>
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d867      	bhi.n	8004d30 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d05c      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0x15a>
 8004c64:	2b10      	cmp	r3, #16
 8004c66:	d05a      	beq.n	8004d1e <HAL_TIM_ConfigClockSource+0x15a>
 8004c68:	e062      	b.n	8004d30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6818      	ldr	r0, [r3, #0]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	6899      	ldr	r1, [r3, #8]
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f000 f98d 	bl	8004f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	609a      	str	r2, [r3, #8]
      break;
 8004c96:	e04f      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	6899      	ldr	r1, [r3, #8]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	f000 f976 	bl	8004f98 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cba:	609a      	str	r2, [r3, #8]
      break;
 8004cbc:	e03c      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6818      	ldr	r0, [r3, #0]
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	6859      	ldr	r1, [r3, #4]
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f000 f8ea 	bl	8004ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2150      	movs	r1, #80	; 0x50
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 f943 	bl	8004f62 <TIM_ITRx_SetConfig>
      break;
 8004cdc:	e02c      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6818      	ldr	r0, [r3, #0]
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	6859      	ldr	r1, [r3, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	461a      	mov	r2, r3
 8004cec:	f000 f909 	bl	8004f02 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	2160      	movs	r1, #96	; 0x60
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 f933 	bl	8004f62 <TIM_ITRx_SetConfig>
      break;
 8004cfc:	e01c      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6818      	ldr	r0, [r3, #0]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	6859      	ldr	r1, [r3, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f000 f8ca 	bl	8004ea4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2140      	movs	r1, #64	; 0x40
 8004d16:	4618      	mov	r0, r3
 8004d18:	f000 f923 	bl	8004f62 <TIM_ITRx_SetConfig>
      break;
 8004d1c:	e00c      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4619      	mov	r1, r3
 8004d28:	4610      	mov	r0, r2
 8004d2a:	f000 f91a 	bl	8004f62 <TIM_ITRx_SetConfig>
      break;
 8004d2e:	e003      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      break;
 8004d34:	e000      	b.n	8004d38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d6e:	bf00      	nop
 8004d70:	370c      	adds	r7, #12
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr

08004d7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d7a:	b480      	push	{r7}
 8004d7c:	b083      	sub	sp, #12
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d82:	bf00      	nop
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d8e:	b480      	push	{r7}
 8004d90:	b083      	sub	sp, #12
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d96:	bf00      	nop
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
	...

08004da4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a34      	ldr	r2, [pc, #208]	; (8004e88 <TIM_Base_SetConfig+0xe4>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d00f      	beq.n	8004ddc <TIM_Base_SetConfig+0x38>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc2:	d00b      	beq.n	8004ddc <TIM_Base_SetConfig+0x38>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	4a31      	ldr	r2, [pc, #196]	; (8004e8c <TIM_Base_SetConfig+0xe8>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d007      	beq.n	8004ddc <TIM_Base_SetConfig+0x38>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a30      	ldr	r2, [pc, #192]	; (8004e90 <TIM_Base_SetConfig+0xec>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d003      	beq.n	8004ddc <TIM_Base_SetConfig+0x38>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a2f      	ldr	r2, [pc, #188]	; (8004e94 <TIM_Base_SetConfig+0xf0>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d108      	bne.n	8004dee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a25      	ldr	r2, [pc, #148]	; (8004e88 <TIM_Base_SetConfig+0xe4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d01b      	beq.n	8004e2e <TIM_Base_SetConfig+0x8a>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dfc:	d017      	beq.n	8004e2e <TIM_Base_SetConfig+0x8a>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a22      	ldr	r2, [pc, #136]	; (8004e8c <TIM_Base_SetConfig+0xe8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d013      	beq.n	8004e2e <TIM_Base_SetConfig+0x8a>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a21      	ldr	r2, [pc, #132]	; (8004e90 <TIM_Base_SetConfig+0xec>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d00f      	beq.n	8004e2e <TIM_Base_SetConfig+0x8a>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a20      	ldr	r2, [pc, #128]	; (8004e94 <TIM_Base_SetConfig+0xf0>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d00b      	beq.n	8004e2e <TIM_Base_SetConfig+0x8a>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a1f      	ldr	r2, [pc, #124]	; (8004e98 <TIM_Base_SetConfig+0xf4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d007      	beq.n	8004e2e <TIM_Base_SetConfig+0x8a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a1e      	ldr	r2, [pc, #120]	; (8004e9c <TIM_Base_SetConfig+0xf8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d003      	beq.n	8004e2e <TIM_Base_SetConfig+0x8a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	; (8004ea0 <TIM_Base_SetConfig+0xfc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d108      	bne.n	8004e40 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	68fa      	ldr	r2, [r7, #12]
 8004e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	689a      	ldr	r2, [r3, #8]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <TIM_Base_SetConfig+0xe4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d103      	bne.n	8004e74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	615a      	str	r2, [r3, #20]
}
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr
 8004e86:	bf00      	nop
 8004e88:	40010000 	.word	0x40010000
 8004e8c:	40000400 	.word	0x40000400
 8004e90:	40000800 	.word	0x40000800
 8004e94:	40000c00 	.word	0x40000c00
 8004e98:	40014000 	.word	0x40014000
 8004e9c:	40014400 	.word	0x40014400
 8004ea0:	40014800 	.word	0x40014800

08004ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b087      	sub	sp, #28
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6a1b      	ldr	r3, [r3, #32]
 8004eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f023 0201 	bic.w	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f023 030a 	bic.w	r3, r3, #10
 8004ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	621a      	str	r2, [r3, #32]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f00:	4770      	bx	lr

08004f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f02:	b480      	push	{r7}
 8004f04:	b087      	sub	sp, #28
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	60f8      	str	r0, [r7, #12]
 8004f0a:	60b9      	str	r1, [r7, #8]
 8004f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	f023 0210 	bic.w	r2, r3, #16
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	031b      	lsls	r3, r3, #12
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	621a      	str	r2, [r3, #32]
}
 8004f56:	bf00      	nop
 8004f58:	371c      	adds	r7, #28
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b085      	sub	sp, #20
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	689b      	ldr	r3, [r3, #8]
 8004f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f7a:	683a      	ldr	r2, [r7, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	f043 0307 	orr.w	r3, r3, #7
 8004f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	609a      	str	r2, [r3, #8]
}
 8004f8c:	bf00      	nop
 8004f8e:	3714      	adds	r7, #20
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	021a      	lsls	r2, r3, #8
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	431a      	orrs	r2, r3
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	697a      	ldr	r2, [r7, #20]
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e050      	b.n	8005092 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a1c      	ldr	r2, [pc, #112]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d018      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503c:	d013      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a18      	ldr	r2, [pc, #96]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d00e      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a16      	ldr	r2, [pc, #88]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d009      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a15      	ldr	r2, [pc, #84]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d004      	beq.n	8005066 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a13      	ldr	r2, [pc, #76]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d10c      	bne.n	8005080 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800506c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	4313      	orrs	r3, r2
 8005076:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	40010000 	.word	0x40010000
 80050a4:	40000400 	.word	0x40000400
 80050a8:	40000800 	.word	0x40000800
 80050ac:	40000c00 	.word	0x40000c00
 80050b0:	40014000 	.word	0x40014000

080050b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e03f      	b.n	800516e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fc fef6 	bl	8001ef4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2224      	movs	r2, #36	; 0x24
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800511e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fddf 	bl	8005ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691a      	ldr	r2, [r3, #16]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005134:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005144:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005154:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2220      	movs	r2, #32
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2220      	movs	r2, #32
 8005168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b08a      	sub	sp, #40	; 0x28
 800517a:	af02      	add	r7, sp, #8
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b20      	cmp	r3, #32
 8005194:	d17c      	bne.n	8005290 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <HAL_UART_Transmit+0x2c>
 800519c:	88fb      	ldrh	r3, [r7, #6]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e075      	b.n	8005292 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d101      	bne.n	80051b4 <HAL_UART_Transmit+0x3e>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e06e      	b.n	8005292 <HAL_UART_Transmit+0x11c>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	2200      	movs	r2, #0
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2221      	movs	r2, #33	; 0x21
 80051c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ca:	f7fc fff9 	bl	80021c0 <HAL_GetTick>
 80051ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051e4:	d108      	bne.n	80051f8 <HAL_UART_Transmit+0x82>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	691b      	ldr	r3, [r3, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051ee:	2300      	movs	r3, #0
 80051f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	61bb      	str	r3, [r7, #24]
 80051f6:	e003      	b.n	8005200 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051fc:	2300      	movs	r3, #0
 80051fe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005208:	e02a      	b.n	8005260 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	9300      	str	r3, [sp, #0]
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	2200      	movs	r2, #0
 8005212:	2180      	movs	r1, #128	; 0x80
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f000 fb1f 	bl	8005858 <UART_WaitOnFlagUntilTimeout>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e036      	b.n	8005292 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10b      	bne.n	8005242 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	881b      	ldrh	r3, [r3, #0]
 800522e:	461a      	mov	r2, r3
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005238:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	3302      	adds	r3, #2
 800523e:	61bb      	str	r3, [r7, #24]
 8005240:	e007      	b.n	8005252 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	3301      	adds	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005256:	b29b      	uxth	r3, r3
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005264:	b29b      	uxth	r3, r3
 8005266:	2b00      	cmp	r3, #0
 8005268:	d1cf      	bne.n	800520a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	2200      	movs	r2, #0
 8005272:	2140      	movs	r1, #64	; 0x40
 8005274:	68f8      	ldr	r0, [r7, #12]
 8005276:	f000 faef 	bl	8005858 <UART_WaitOnFlagUntilTimeout>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d001      	beq.n	8005284 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005280:	2303      	movs	r3, #3
 8005282:	e006      	b.n	8005292 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	2220      	movs	r2, #32
 8005288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800528c:	2300      	movs	r3, #0
 800528e:	e000      	b.n	8005292 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005290:	2302      	movs	r3, #2
  }
}
 8005292:	4618      	mov	r0, r3
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b084      	sub	sp, #16
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	4613      	mov	r3, r2
 80052a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	d11d      	bne.n	80052f0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_UART_Receive_IT+0x26>
 80052ba:	88fb      	ldrh	r3, [r7, #6]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d101      	bne.n	80052c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e016      	b.n	80052f2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ca:	2b01      	cmp	r3, #1
 80052cc:	d101      	bne.n	80052d2 <HAL_UART_Receive_IT+0x38>
 80052ce:	2302      	movs	r3, #2
 80052d0:	e00f      	b.n	80052f2 <HAL_UART_Receive_IT+0x58>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	461a      	mov	r2, r3
 80052e4:	68b9      	ldr	r1, [r7, #8]
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f000 fb24 	bl	8005934 <UART_Start_Receive_IT>
 80052ec:	4603      	mov	r3, r0
 80052ee:	e000      	b.n	80052f2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80052f0:	2302      	movs	r3, #2
  }
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
	...

080052fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b0ba      	sub	sp, #232	; 0xe8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005322:	2300      	movs	r3, #0
 8005324:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005328:	2300      	movs	r3, #0
 800532a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800532e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800533a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10f      	bne.n	8005362 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005346:	f003 0320 	and.w	r3, r3, #32
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <HAL_UART_IRQHandler+0x66>
 800534e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005352:	f003 0320 	and.w	r3, r3, #32
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 fc07 	bl	8005b6e <UART_Receive_IT>
      return;
 8005360:	e256      	b.n	8005810 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005362:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80de 	beq.w	8005528 <HAL_UART_IRQHandler+0x22c>
 800536c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d106      	bne.n	8005386 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 80d1 	beq.w	8005528 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00b      	beq.n	80053aa <HAL_UART_IRQHandler+0xae>
 8005392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d005      	beq.n	80053aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f043 0201 	orr.w	r2, r3, #1
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 0304 	and.w	r3, r3, #4
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <HAL_UART_IRQHandler+0xd2>
 80053b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f043 0202 	orr.w	r2, r3, #2
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <HAL_UART_IRQHandler+0xf6>
 80053da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f043 0204 	orr.w	r2, r3, #4
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f6:	f003 0308 	and.w	r3, r3, #8
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d011      	beq.n	8005422 <HAL_UART_IRQHandler+0x126>
 80053fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d105      	bne.n	8005416 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800540a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	d005      	beq.n	8005422 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	f043 0208 	orr.w	r2, r3, #8
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005426:	2b00      	cmp	r3, #0
 8005428:	f000 81ed 	beq.w	8005806 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800542c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005430:	f003 0320 	and.w	r3, r3, #32
 8005434:	2b00      	cmp	r3, #0
 8005436:	d008      	beq.n	800544a <HAL_UART_IRQHandler+0x14e>
 8005438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fb92 	bl	8005b6e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695b      	ldr	r3, [r3, #20]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	bf0c      	ite	eq
 8005458:	2301      	moveq	r3, #1
 800545a:	2300      	movne	r3, #0
 800545c:	b2db      	uxtb	r3, r3
 800545e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d103      	bne.n	8005476 <HAL_UART_IRQHandler+0x17a>
 800546e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d04f      	beq.n	8005516 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fa9a 	bl	80059b0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005486:	2b40      	cmp	r3, #64	; 0x40
 8005488:	d141      	bne.n	800550e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	3314      	adds	r3, #20
 8005490:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005498:	e853 3f00 	ldrex	r3, [r3]
 800549c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	3314      	adds	r3, #20
 80054b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054c6:	e841 2300 	strex	r3, r2, [r1]
 80054ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1d9      	bne.n	800548a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d013      	beq.n	8005506 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e2:	4a7d      	ldr	r2, [pc, #500]	; (80056d8 <HAL_UART_IRQHandler+0x3dc>)
 80054e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fd fbe7 	bl	8002cbe <HAL_DMA_Abort_IT>
 80054f0:	4603      	mov	r3, r0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d016      	beq.n	8005524 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005500:	4610      	mov	r0, r2
 8005502:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005504:	e00e      	b.n	8005524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f990 	bl	800582c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550c:	e00a      	b.n	8005524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f98c 	bl	800582c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005514:	e006      	b.n	8005524 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f988 	bl	800582c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005522:	e170      	b.n	8005806 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005524:	bf00      	nop
    return;
 8005526:	e16e      	b.n	8005806 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552c:	2b01      	cmp	r3, #1
 800552e:	f040 814a 	bne.w	80057c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005536:	f003 0310 	and.w	r3, r3, #16
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 8143 	beq.w	80057c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005544:	f003 0310 	and.w	r3, r3, #16
 8005548:	2b00      	cmp	r3, #0
 800554a:	f000 813c 	beq.w	80057c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	60bb      	str	r3, [r7, #8]
 8005562:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800556e:	2b40      	cmp	r3, #64	; 0x40
 8005570:	f040 80b4 	bne.w	80056dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005580:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8140 	beq.w	800580a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800558e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005592:	429a      	cmp	r2, r3
 8005594:	f080 8139 	bcs.w	800580a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800559e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055aa:	f000 8088 	beq.w	80056be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055bc:	e853 3f00 	ldrex	r3, [r3]
 80055c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	330c      	adds	r3, #12
 80055d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80055e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80055ea:	e841 2300 	strex	r3, r2, [r1]
 80055ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80055f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1d9      	bne.n	80055ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	3314      	adds	r3, #20
 8005600:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800560a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800560c:	f023 0301 	bic.w	r3, r3, #1
 8005610:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3314      	adds	r3, #20
 800561a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800561e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005622:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005626:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005630:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005632:	2b00      	cmp	r3, #0
 8005634:	d1e1      	bne.n	80055fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	3314      	adds	r3, #20
 800563c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800563e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005640:	e853 3f00 	ldrex	r3, [r3]
 8005644:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005646:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005648:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800564c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	3314      	adds	r3, #20
 8005656:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800565a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800565c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800565e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005660:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005662:	e841 2300 	strex	r3, r2, [r1]
 8005666:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005668:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1e3      	bne.n	8005636 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2220      	movs	r2, #32
 8005672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	330c      	adds	r3, #12
 8005682:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005686:	e853 3f00 	ldrex	r3, [r3]
 800568a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800568c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800568e:	f023 0310 	bic.w	r3, r3, #16
 8005692:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	330c      	adds	r3, #12
 800569c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80056a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e3      	bne.n	800567c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7fd fa90 	bl	8002bde <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	4619      	mov	r1, r3
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 f8b6 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056d4:	e099      	b.n	800580a <HAL_UART_IRQHandler+0x50e>
 80056d6:	bf00      	nop
 80056d8:	08005a77 	.word	0x08005a77
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 808b 	beq.w	800580e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80056f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	f000 8086 	beq.w	800580e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	330c      	adds	r3, #12
 8005708:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800570c:	e853 3f00 	ldrex	r3, [r3]
 8005710:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005714:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005718:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	330c      	adds	r3, #12
 8005722:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005726:	647a      	str	r2, [r7, #68]	; 0x44
 8005728:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800572c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e3      	bne.n	8005702 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3314      	adds	r3, #20
 8005740:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	623b      	str	r3, [r7, #32]
   return(result);
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3314      	adds	r3, #20
 800575a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800575e:	633a      	str	r2, [r7, #48]	; 0x30
 8005760:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e3      	bne.n	800573a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2220      	movs	r2, #32
 8005776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	330c      	adds	r3, #12
 8005786:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	e853 3f00 	ldrex	r3, [r3]
 800578e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f023 0310 	bic.w	r3, r3, #16
 8005796:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057a4:	61fa      	str	r2, [r7, #28]
 80057a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a8:	69b9      	ldr	r1, [r7, #24]
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	e841 2300 	strex	r3, r2, [r1]
 80057b0:	617b      	str	r3, [r7, #20]
   return(result);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e3      	bne.n	8005780 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057bc:	4619      	mov	r1, r3
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f83e 	bl	8005840 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057c4:	e023      	b.n	800580e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_UART_IRQHandler+0x4ea>
 80057d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f95d 	bl	8005a9e <UART_Transmit_IT>
    return;
 80057e4:	e014      	b.n	8005810 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80057e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00e      	beq.n	8005810 <HAL_UART_IRQHandler+0x514>
 80057f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d008      	beq.n	8005810 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f99d 	bl	8005b3e <UART_EndTransmit_IT>
    return;
 8005804:	e004      	b.n	8005810 <HAL_UART_IRQHandler+0x514>
    return;
 8005806:	bf00      	nop
 8005808:	e002      	b.n	8005810 <HAL_UART_IRQHandler+0x514>
      return;
 800580a:	bf00      	nop
 800580c:	e000      	b.n	8005810 <HAL_UART_IRQHandler+0x514>
      return;
 800580e:	bf00      	nop
  }
}
 8005810:	37e8      	adds	r7, #232	; 0xe8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop

08005818 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005820:	bf00      	nop
 8005822:	370c      	adds	r7, #12
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800582c:	b480      	push	{r7}
 800582e:	b083      	sub	sp, #12
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005840:	b480      	push	{r7}
 8005842:	b083      	sub	sp, #12
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	460b      	mov	r3, r1
 800584a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b090      	sub	sp, #64	; 0x40
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	603b      	str	r3, [r7, #0]
 8005864:	4613      	mov	r3, r2
 8005866:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005868:	e050      	b.n	800590c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800586a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800586c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005870:	d04c      	beq.n	800590c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005874:	2b00      	cmp	r3, #0
 8005876:	d007      	beq.n	8005888 <UART_WaitOnFlagUntilTimeout+0x30>
 8005878:	f7fc fca2 	bl	80021c0 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005884:	429a      	cmp	r2, r3
 8005886:	d241      	bcs.n	800590c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	330c      	adds	r3, #12
 800588e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	e853 3f00 	ldrex	r3, [r3]
 8005896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800589a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800589e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	330c      	adds	r3, #12
 80058a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058a8:	637a      	str	r2, [r7, #52]	; 0x34
 80058aa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80058ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e5      	bne.n	8005888 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	3314      	adds	r3, #20
 80058c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	e853 3f00 	ldrex	r3, [r3]
 80058ca:	613b      	str	r3, [r7, #16]
   return(result);
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	3314      	adds	r3, #20
 80058da:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058dc:	623a      	str	r2, [r7, #32]
 80058de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e0:	69f9      	ldr	r1, [r7, #28]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	e841 2300 	strex	r3, r2, [r1]
 80058e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1e5      	bne.n	80058bc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2220      	movs	r2, #32
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2220      	movs	r2, #32
 80058fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e00f      	b.n	800592c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	4013      	ands	r3, r2
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	429a      	cmp	r2, r3
 800591a:	bf0c      	ite	eq
 800591c:	2301      	moveq	r3, #1
 800591e:	2300      	movne	r3, #0
 8005920:	b2db      	uxtb	r3, r3
 8005922:	461a      	mov	r2, r3
 8005924:	79fb      	ldrb	r3, [r7, #7]
 8005926:	429a      	cmp	r2, r3
 8005928:	d09f      	beq.n	800586a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3740      	adds	r7, #64	; 0x40
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4613      	mov	r3, r2
 8005940:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68ba      	ldr	r2, [r7, #8]
 8005946:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	88fa      	ldrh	r2, [r7, #6]
 8005952:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2222      	movs	r2, #34	; 0x22
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d007      	beq.n	8005982 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	68da      	ldr	r2, [r3, #12]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005980:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	695a      	ldr	r2, [r3, #20]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f042 0201 	orr.w	r2, r2, #1
 8005990:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0220 	orr.w	r2, r2, #32
 80059a0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b095      	sub	sp, #84	; 0x54
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	330c      	adds	r3, #12
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	e853 3f00 	ldrex	r3, [r3]
 80059c6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059d8:	643a      	str	r2, [r7, #64]	; 0x40
 80059da:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e5      	bne.n	80059b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3314      	adds	r3, #20
 80059f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f023 0301 	bic.w	r3, r3, #1
 8005a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	3314      	adds	r3, #20
 8005a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e5      	bne.n	80059ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	2b01      	cmp	r3, #1
 8005a26:	d119      	bne.n	8005a5c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	330c      	adds	r3, #12
 8005a2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f023 0310 	bic.w	r3, r3, #16
 8005a3e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	330c      	adds	r3, #12
 8005a46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a48:	61ba      	str	r2, [r7, #24]
 8005a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6979      	ldr	r1, [r7, #20]
 8005a4e:	69ba      	ldr	r2, [r7, #24]
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	613b      	str	r3, [r7, #16]
   return(result);
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e5      	bne.n	8005a28 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2220      	movs	r2, #32
 8005a60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005a6a:	bf00      	nop
 8005a6c:	3754      	adds	r7, #84	; 0x54
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b084      	sub	sp, #16
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a82:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2200      	movs	r2, #0
 8005a88:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7ff fecb 	bl	800582c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b085      	sub	sp, #20
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b21      	cmp	r3, #33	; 0x21
 8005ab0:	d13e      	bne.n	8005b30 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	d114      	bne.n	8005ae6 <UART_Transmit_IT+0x48>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d110      	bne.n	8005ae6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	1c9a      	adds	r2, r3, #2
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	621a      	str	r2, [r3, #32]
 8005ae4:	e008      	b.n	8005af8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	1c59      	adds	r1, r3, #1
 8005aec:	687a      	ldr	r2, [r7, #4]
 8005aee:	6211      	str	r1, [r2, #32]
 8005af0:	781a      	ldrb	r2, [r3, #0]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005afc:	b29b      	uxth	r3, r3
 8005afe:	3b01      	subs	r3, #1
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	4619      	mov	r1, r3
 8005b06:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10f      	bne.n	8005b2c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b1a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68da      	ldr	r2, [r3, #12]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b2a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	e000      	b.n	8005b32 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b30:	2302      	movs	r3, #2
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b54:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2220      	movs	r2, #32
 8005b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f7ff fe5a 	bl	8005818 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005b6e:	b580      	push	{r7, lr}
 8005b70:	b08c      	sub	sp, #48	; 0x30
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b22      	cmp	r3, #34	; 0x22
 8005b80:	f040 80ab 	bne.w	8005cda <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b8c:	d117      	bne.n	8005bbe <UART_Receive_IT+0x50>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d113      	bne.n	8005bbe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b9e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	685b      	ldr	r3, [r3, #4]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	1c9a      	adds	r2, r3, #2
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	629a      	str	r2, [r3, #40]	; 0x28
 8005bbc:	e026      	b.n	8005c0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd0:	d007      	beq.n	8005be2 <UART_Receive_IT+0x74>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10a      	bne.n	8005bf0 <UART_Receive_IT+0x82>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	b2da      	uxtb	r2, r3
 8005bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bec:	701a      	strb	r2, [r3, #0]
 8005bee:	e008      	b.n	8005c02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c06:	1c5a      	adds	r2, r3, #1
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	3b01      	subs	r3, #1
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	4619      	mov	r1, r3
 8005c1a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d15a      	bne.n	8005cd6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	68da      	ldr	r2, [r3, #12]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0220 	bic.w	r2, r2, #32
 8005c2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68da      	ldr	r2, [r3, #12]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	695a      	ldr	r2, [r3, #20]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0201 	bic.w	r2, r2, #1
 8005c4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2220      	movs	r2, #32
 8005c54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d135      	bne.n	8005ccc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	613b      	str	r3, [r7, #16]
   return(result);
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	f023 0310 	bic.w	r3, r3, #16
 8005c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	623a      	str	r2, [r7, #32]
 8005c88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	69f9      	ldr	r1, [r7, #28]
 8005c8c:	6a3a      	ldr	r2, [r7, #32]
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0310 	and.w	r3, r3, #16
 8005ca4:	2b10      	cmp	r3, #16
 8005ca6:	d10a      	bne.n	8005cbe <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f7ff fdbb 	bl	8005840 <HAL_UARTEx_RxEventCallback>
 8005cca:	e002      	b.n	8005cd2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f7fb fc07 	bl	80014e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e002      	b.n	8005cdc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	e000      	b.n	8005cdc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005cda:	2302      	movs	r3, #2
  }
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3730      	adds	r7, #48	; 0x30
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ce8:	b0c0      	sub	sp, #256	; 0x100
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d00:	68d9      	ldr	r1, [r3, #12]
 8005d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	ea40 0301 	orr.w	r3, r0, r1
 8005d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d12:	689a      	ldr	r2, [r3, #8]
 8005d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	431a      	orrs	r2, r3
 8005d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	431a      	orrs	r2, r3
 8005d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005d3c:	f021 010c 	bic.w	r1, r1, #12
 8005d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005d4a:	430b      	orrs	r3, r1
 8005d4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d5e:	6999      	ldr	r1, [r3, #24]
 8005d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	ea40 0301 	orr.w	r3, r0, r1
 8005d6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b8f      	ldr	r3, [pc, #572]	; (8005fb0 <UART_SetConfig+0x2cc>)
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d005      	beq.n	8005d84 <UART_SetConfig+0xa0>
 8005d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	4b8d      	ldr	r3, [pc, #564]	; (8005fb4 <UART_SetConfig+0x2d0>)
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d104      	bne.n	8005d8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d84:	f7fe fd50 	bl	8004828 <HAL_RCC_GetPCLK2Freq>
 8005d88:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005d8c:	e003      	b.n	8005d96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d8e:	f7fe fd37 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
 8005d92:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da0:	f040 810c 	bne.w	8005fbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da8:	2200      	movs	r2, #0
 8005daa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005dae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005db6:	4622      	mov	r2, r4
 8005db8:	462b      	mov	r3, r5
 8005dba:	1891      	adds	r1, r2, r2
 8005dbc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005dbe:	415b      	adcs	r3, r3
 8005dc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005dc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	eb12 0801 	adds.w	r8, r2, r1
 8005dcc:	4629      	mov	r1, r5
 8005dce:	eb43 0901 	adc.w	r9, r3, r1
 8005dd2:	f04f 0200 	mov.w	r2, #0
 8005dd6:	f04f 0300 	mov.w	r3, #0
 8005dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005de6:	4690      	mov	r8, r2
 8005de8:	4699      	mov	r9, r3
 8005dea:	4623      	mov	r3, r4
 8005dec:	eb18 0303 	adds.w	r3, r8, r3
 8005df0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005df4:	462b      	mov	r3, r5
 8005df6:	eb49 0303 	adc.w	r3, r9, r3
 8005dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e0a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005e0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005e12:	460b      	mov	r3, r1
 8005e14:	18db      	adds	r3, r3, r3
 8005e16:	653b      	str	r3, [r7, #80]	; 0x50
 8005e18:	4613      	mov	r3, r2
 8005e1a:	eb42 0303 	adc.w	r3, r2, r3
 8005e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005e20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005e24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005e28:	f7fa fe48 	bl	8000abc <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4b61      	ldr	r3, [pc, #388]	; (8005fb8 <UART_SetConfig+0x2d4>)
 8005e32:	fba3 2302 	umull	r2, r3, r3, r2
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	011c      	lsls	r4, r3, #4
 8005e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e44:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005e48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	1891      	adds	r1, r2, r2
 8005e52:	64b9      	str	r1, [r7, #72]	; 0x48
 8005e54:	415b      	adcs	r3, r3
 8005e56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	eb12 0a01 	adds.w	sl, r2, r1
 8005e62:	4649      	mov	r1, r9
 8005e64:	eb43 0b01 	adc.w	fp, r3, r1
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e7c:	4692      	mov	sl, r2
 8005e7e:	469b      	mov	fp, r3
 8005e80:	4643      	mov	r3, r8
 8005e82:	eb1a 0303 	adds.w	r3, sl, r3
 8005e86:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	eb4b 0303 	adc.w	r3, fp, r3
 8005e90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ea0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	18db      	adds	r3, r3, r3
 8005eac:	643b      	str	r3, [r7, #64]	; 0x40
 8005eae:	4613      	mov	r3, r2
 8005eb0:	eb42 0303 	adc.w	r3, r2, r3
 8005eb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005eba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005ebe:	f7fa fdfd 	bl	8000abc <__aeabi_uldivmod>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	4b3b      	ldr	r3, [pc, #236]	; (8005fb8 <UART_SetConfig+0x2d4>)
 8005eca:	fba3 2301 	umull	r2, r3, r3, r1
 8005ece:	095b      	lsrs	r3, r3, #5
 8005ed0:	2264      	movs	r2, #100	; 0x64
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	1acb      	subs	r3, r1, r3
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005ede:	4b36      	ldr	r3, [pc, #216]	; (8005fb8 <UART_SetConfig+0x2d4>)
 8005ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8005ee4:	095b      	lsrs	r3, r3, #5
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005eec:	441c      	add	r4, r3
 8005eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ef8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005efc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005f00:	4642      	mov	r2, r8
 8005f02:	464b      	mov	r3, r9
 8005f04:	1891      	adds	r1, r2, r2
 8005f06:	63b9      	str	r1, [r7, #56]	; 0x38
 8005f08:	415b      	adcs	r3, r3
 8005f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005f10:	4641      	mov	r1, r8
 8005f12:	1851      	adds	r1, r2, r1
 8005f14:	6339      	str	r1, [r7, #48]	; 0x30
 8005f16:	4649      	mov	r1, r9
 8005f18:	414b      	adcs	r3, r1
 8005f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005f28:	4659      	mov	r1, fp
 8005f2a:	00cb      	lsls	r3, r1, #3
 8005f2c:	4651      	mov	r1, sl
 8005f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f32:	4651      	mov	r1, sl
 8005f34:	00ca      	lsls	r2, r1, #3
 8005f36:	4610      	mov	r0, r2
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4642      	mov	r2, r8
 8005f3e:	189b      	adds	r3, r3, r2
 8005f40:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f44:	464b      	mov	r3, r9
 8005f46:	460a      	mov	r2, r1
 8005f48:	eb42 0303 	adc.w	r3, r2, r3
 8005f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005f5c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005f60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005f64:	460b      	mov	r3, r1
 8005f66:	18db      	adds	r3, r3, r3
 8005f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	eb42 0303 	adc.w	r3, r2, r3
 8005f70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005f7a:	f7fa fd9f 	bl	8000abc <__aeabi_uldivmod>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4b0d      	ldr	r3, [pc, #52]	; (8005fb8 <UART_SetConfig+0x2d4>)
 8005f84:	fba3 1302 	umull	r1, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	2164      	movs	r1, #100	; 0x64
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	3332      	adds	r3, #50	; 0x32
 8005f96:	4a08      	ldr	r2, [pc, #32]	; (8005fb8 <UART_SetConfig+0x2d4>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	f003 0207 	and.w	r2, r3, #7
 8005fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4422      	add	r2, r4
 8005faa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005fac:	e105      	b.n	80061ba <UART_SetConfig+0x4d6>
 8005fae:	bf00      	nop
 8005fb0:	40011000 	.word	0x40011000
 8005fb4:	40011400 	.word	0x40011400
 8005fb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005fc6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005fca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005fce:	4642      	mov	r2, r8
 8005fd0:	464b      	mov	r3, r9
 8005fd2:	1891      	adds	r1, r2, r2
 8005fd4:	6239      	str	r1, [r7, #32]
 8005fd6:	415b      	adcs	r3, r3
 8005fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fde:	4641      	mov	r1, r8
 8005fe0:	1854      	adds	r4, r2, r1
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	eb43 0501 	adc.w	r5, r3, r1
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	00eb      	lsls	r3, r5, #3
 8005ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005ff6:	00e2      	lsls	r2, r4, #3
 8005ff8:	4614      	mov	r4, r2
 8005ffa:	461d      	mov	r5, r3
 8005ffc:	4643      	mov	r3, r8
 8005ffe:	18e3      	adds	r3, r4, r3
 8006000:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006004:	464b      	mov	r3, r9
 8006006:	eb45 0303 	adc.w	r3, r5, r3
 800600a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800601a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800601e:	f04f 0200 	mov.w	r2, #0
 8006022:	f04f 0300 	mov.w	r3, #0
 8006026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800602a:	4629      	mov	r1, r5
 800602c:	008b      	lsls	r3, r1, #2
 800602e:	4621      	mov	r1, r4
 8006030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006034:	4621      	mov	r1, r4
 8006036:	008a      	lsls	r2, r1, #2
 8006038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800603c:	f7fa fd3e 	bl	8000abc <__aeabi_uldivmod>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4b60      	ldr	r3, [pc, #384]	; (80061c8 <UART_SetConfig+0x4e4>)
 8006046:	fba3 2302 	umull	r2, r3, r3, r2
 800604a:	095b      	lsrs	r3, r3, #5
 800604c:	011c      	lsls	r4, r3, #4
 800604e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006052:	2200      	movs	r2, #0
 8006054:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006058:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800605c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006060:	4642      	mov	r2, r8
 8006062:	464b      	mov	r3, r9
 8006064:	1891      	adds	r1, r2, r2
 8006066:	61b9      	str	r1, [r7, #24]
 8006068:	415b      	adcs	r3, r3
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006070:	4641      	mov	r1, r8
 8006072:	1851      	adds	r1, r2, r1
 8006074:	6139      	str	r1, [r7, #16]
 8006076:	4649      	mov	r1, r9
 8006078:	414b      	adcs	r3, r1
 800607a:	617b      	str	r3, [r7, #20]
 800607c:	f04f 0200 	mov.w	r2, #0
 8006080:	f04f 0300 	mov.w	r3, #0
 8006084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006088:	4659      	mov	r1, fp
 800608a:	00cb      	lsls	r3, r1, #3
 800608c:	4651      	mov	r1, sl
 800608e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006092:	4651      	mov	r1, sl
 8006094:	00ca      	lsls	r2, r1, #3
 8006096:	4610      	mov	r0, r2
 8006098:	4619      	mov	r1, r3
 800609a:	4603      	mov	r3, r0
 800609c:	4642      	mov	r2, r8
 800609e:	189b      	adds	r3, r3, r2
 80060a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060a4:	464b      	mov	r3, r9
 80060a6:	460a      	mov	r2, r1
 80060a8:	eb42 0303 	adc.w	r3, r2, r3
 80060ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80060b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80060ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80060bc:	f04f 0200 	mov.w	r2, #0
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80060c8:	4649      	mov	r1, r9
 80060ca:	008b      	lsls	r3, r1, #2
 80060cc:	4641      	mov	r1, r8
 80060ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060d2:	4641      	mov	r1, r8
 80060d4:	008a      	lsls	r2, r1, #2
 80060d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80060da:	f7fa fcef 	bl	8000abc <__aeabi_uldivmod>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4b39      	ldr	r3, [pc, #228]	; (80061c8 <UART_SetConfig+0x4e4>)
 80060e4:	fba3 1302 	umull	r1, r3, r3, r2
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	2164      	movs	r1, #100	; 0x64
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	3332      	adds	r3, #50	; 0x32
 80060f6:	4a34      	ldr	r2, [pc, #208]	; (80061c8 <UART_SetConfig+0x4e4>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006102:	441c      	add	r4, r3
 8006104:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006108:	2200      	movs	r2, #0
 800610a:	673b      	str	r3, [r7, #112]	; 0x70
 800610c:	677a      	str	r2, [r7, #116]	; 0x74
 800610e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006112:	4642      	mov	r2, r8
 8006114:	464b      	mov	r3, r9
 8006116:	1891      	adds	r1, r2, r2
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	415b      	adcs	r3, r3
 800611c:	60fb      	str	r3, [r7, #12]
 800611e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006122:	4641      	mov	r1, r8
 8006124:	1851      	adds	r1, r2, r1
 8006126:	6039      	str	r1, [r7, #0]
 8006128:	4649      	mov	r1, r9
 800612a:	414b      	adcs	r3, r1
 800612c:	607b      	str	r3, [r7, #4]
 800612e:	f04f 0200 	mov.w	r2, #0
 8006132:	f04f 0300 	mov.w	r3, #0
 8006136:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800613a:	4659      	mov	r1, fp
 800613c:	00cb      	lsls	r3, r1, #3
 800613e:	4651      	mov	r1, sl
 8006140:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006144:	4651      	mov	r1, sl
 8006146:	00ca      	lsls	r2, r1, #3
 8006148:	4610      	mov	r0, r2
 800614a:	4619      	mov	r1, r3
 800614c:	4603      	mov	r3, r0
 800614e:	4642      	mov	r2, r8
 8006150:	189b      	adds	r3, r3, r2
 8006152:	66bb      	str	r3, [r7, #104]	; 0x68
 8006154:	464b      	mov	r3, r9
 8006156:	460a      	mov	r2, r1
 8006158:	eb42 0303 	adc.w	r3, r2, r3
 800615c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800615e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	2200      	movs	r2, #0
 8006166:	663b      	str	r3, [r7, #96]	; 0x60
 8006168:	667a      	str	r2, [r7, #100]	; 0x64
 800616a:	f04f 0200 	mov.w	r2, #0
 800616e:	f04f 0300 	mov.w	r3, #0
 8006172:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006176:	4649      	mov	r1, r9
 8006178:	008b      	lsls	r3, r1, #2
 800617a:	4641      	mov	r1, r8
 800617c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006180:	4641      	mov	r1, r8
 8006182:	008a      	lsls	r2, r1, #2
 8006184:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006188:	f7fa fc98 	bl	8000abc <__aeabi_uldivmod>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <UART_SetConfig+0x4e4>)
 8006192:	fba3 1302 	umull	r1, r3, r3, r2
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	2164      	movs	r1, #100	; 0x64
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	3332      	adds	r3, #50	; 0x32
 80061a4:	4a08      	ldr	r2, [pc, #32]	; (80061c8 <UART_SetConfig+0x4e4>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	f003 020f 	and.w	r2, r3, #15
 80061b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4422      	add	r2, r4
 80061b8:	609a      	str	r2, [r3, #8]
}
 80061ba:	bf00      	nop
 80061bc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80061c0:	46bd      	mov	sp, r7
 80061c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061c6:	bf00      	nop
 80061c8:	51eb851f 	.word	0x51eb851f

080061cc <__errno>:
 80061cc:	4b01      	ldr	r3, [pc, #4]	; (80061d4 <__errno+0x8>)
 80061ce:	6818      	ldr	r0, [r3, #0]
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop
 80061d4:	2000000c 	.word	0x2000000c

080061d8 <__libc_init_array>:
 80061d8:	b570      	push	{r4, r5, r6, lr}
 80061da:	4d0d      	ldr	r5, [pc, #52]	; (8006210 <__libc_init_array+0x38>)
 80061dc:	4c0d      	ldr	r4, [pc, #52]	; (8006214 <__libc_init_array+0x3c>)
 80061de:	1b64      	subs	r4, r4, r5
 80061e0:	10a4      	asrs	r4, r4, #2
 80061e2:	2600      	movs	r6, #0
 80061e4:	42a6      	cmp	r6, r4
 80061e6:	d109      	bne.n	80061fc <__libc_init_array+0x24>
 80061e8:	4d0b      	ldr	r5, [pc, #44]	; (8006218 <__libc_init_array+0x40>)
 80061ea:	4c0c      	ldr	r4, [pc, #48]	; (800621c <__libc_init_array+0x44>)
 80061ec:	f000 fc8e 	bl	8006b0c <_init>
 80061f0:	1b64      	subs	r4, r4, r5
 80061f2:	10a4      	asrs	r4, r4, #2
 80061f4:	2600      	movs	r6, #0
 80061f6:	42a6      	cmp	r6, r4
 80061f8:	d105      	bne.n	8006206 <__libc_init_array+0x2e>
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006200:	4798      	blx	r3
 8006202:	3601      	adds	r6, #1
 8006204:	e7ee      	b.n	80061e4 <__libc_init_array+0xc>
 8006206:	f855 3b04 	ldr.w	r3, [r5], #4
 800620a:	4798      	blx	r3
 800620c:	3601      	adds	r6, #1
 800620e:	e7f2      	b.n	80061f6 <__libc_init_array+0x1e>
 8006210:	08006bd8 	.word	0x08006bd8
 8006214:	08006bd8 	.word	0x08006bd8
 8006218:	08006bd8 	.word	0x08006bd8
 800621c:	08006bdc 	.word	0x08006bdc

08006220 <memcpy>:
 8006220:	440a      	add	r2, r1
 8006222:	4291      	cmp	r1, r2
 8006224:	f100 33ff 	add.w	r3, r0, #4294967295
 8006228:	d100      	bne.n	800622c <memcpy+0xc>
 800622a:	4770      	bx	lr
 800622c:	b510      	push	{r4, lr}
 800622e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006232:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006236:	4291      	cmp	r1, r2
 8006238:	d1f9      	bne.n	800622e <memcpy+0xe>
 800623a:	bd10      	pop	{r4, pc}

0800623c <memset>:
 800623c:	4402      	add	r2, r0
 800623e:	4603      	mov	r3, r0
 8006240:	4293      	cmp	r3, r2
 8006242:	d100      	bne.n	8006246 <memset+0xa>
 8006244:	4770      	bx	lr
 8006246:	f803 1b01 	strb.w	r1, [r3], #1
 800624a:	e7f9      	b.n	8006240 <memset+0x4>

0800624c <siprintf>:
 800624c:	b40e      	push	{r1, r2, r3}
 800624e:	b500      	push	{lr}
 8006250:	b09c      	sub	sp, #112	; 0x70
 8006252:	ab1d      	add	r3, sp, #116	; 0x74
 8006254:	9002      	str	r0, [sp, #8]
 8006256:	9006      	str	r0, [sp, #24]
 8006258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800625c:	4809      	ldr	r0, [pc, #36]	; (8006284 <siprintf+0x38>)
 800625e:	9107      	str	r1, [sp, #28]
 8006260:	9104      	str	r1, [sp, #16]
 8006262:	4909      	ldr	r1, [pc, #36]	; (8006288 <siprintf+0x3c>)
 8006264:	f853 2b04 	ldr.w	r2, [r3], #4
 8006268:	9105      	str	r1, [sp, #20]
 800626a:	6800      	ldr	r0, [r0, #0]
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	a902      	add	r1, sp, #8
 8006270:	f000 f868 	bl	8006344 <_svfiprintf_r>
 8006274:	9b02      	ldr	r3, [sp, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	b01c      	add	sp, #112	; 0x70
 800627c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006280:	b003      	add	sp, #12
 8006282:	4770      	bx	lr
 8006284:	2000000c 	.word	0x2000000c
 8006288:	ffff0208 	.word	0xffff0208

0800628c <__ssputs_r>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	688e      	ldr	r6, [r1, #8]
 8006292:	429e      	cmp	r6, r3
 8006294:	4682      	mov	sl, r0
 8006296:	460c      	mov	r4, r1
 8006298:	4690      	mov	r8, r2
 800629a:	461f      	mov	r7, r3
 800629c:	d838      	bhi.n	8006310 <__ssputs_r+0x84>
 800629e:	898a      	ldrh	r2, [r1, #12]
 80062a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80062a4:	d032      	beq.n	800630c <__ssputs_r+0x80>
 80062a6:	6825      	ldr	r5, [r4, #0]
 80062a8:	6909      	ldr	r1, [r1, #16]
 80062aa:	eba5 0901 	sub.w	r9, r5, r1
 80062ae:	6965      	ldr	r5, [r4, #20]
 80062b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80062b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80062b8:	3301      	adds	r3, #1
 80062ba:	444b      	add	r3, r9
 80062bc:	106d      	asrs	r5, r5, #1
 80062be:	429d      	cmp	r5, r3
 80062c0:	bf38      	it	cc
 80062c2:	461d      	movcc	r5, r3
 80062c4:	0553      	lsls	r3, r2, #21
 80062c6:	d531      	bpl.n	800632c <__ssputs_r+0xa0>
 80062c8:	4629      	mov	r1, r5
 80062ca:	f000 fb55 	bl	8006978 <_malloc_r>
 80062ce:	4606      	mov	r6, r0
 80062d0:	b950      	cbnz	r0, 80062e8 <__ssputs_r+0x5c>
 80062d2:	230c      	movs	r3, #12
 80062d4:	f8ca 3000 	str.w	r3, [sl]
 80062d8:	89a3      	ldrh	r3, [r4, #12]
 80062da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062de:	81a3      	strh	r3, [r4, #12]
 80062e0:	f04f 30ff 	mov.w	r0, #4294967295
 80062e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062e8:	6921      	ldr	r1, [r4, #16]
 80062ea:	464a      	mov	r2, r9
 80062ec:	f7ff ff98 	bl	8006220 <memcpy>
 80062f0:	89a3      	ldrh	r3, [r4, #12]
 80062f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80062f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062fa:	81a3      	strh	r3, [r4, #12]
 80062fc:	6126      	str	r6, [r4, #16]
 80062fe:	6165      	str	r5, [r4, #20]
 8006300:	444e      	add	r6, r9
 8006302:	eba5 0509 	sub.w	r5, r5, r9
 8006306:	6026      	str	r6, [r4, #0]
 8006308:	60a5      	str	r5, [r4, #8]
 800630a:	463e      	mov	r6, r7
 800630c:	42be      	cmp	r6, r7
 800630e:	d900      	bls.n	8006312 <__ssputs_r+0x86>
 8006310:	463e      	mov	r6, r7
 8006312:	6820      	ldr	r0, [r4, #0]
 8006314:	4632      	mov	r2, r6
 8006316:	4641      	mov	r1, r8
 8006318:	f000 faa8 	bl	800686c <memmove>
 800631c:	68a3      	ldr	r3, [r4, #8]
 800631e:	1b9b      	subs	r3, r3, r6
 8006320:	60a3      	str	r3, [r4, #8]
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	4433      	add	r3, r6
 8006326:	6023      	str	r3, [r4, #0]
 8006328:	2000      	movs	r0, #0
 800632a:	e7db      	b.n	80062e4 <__ssputs_r+0x58>
 800632c:	462a      	mov	r2, r5
 800632e:	f000 fb97 	bl	8006a60 <_realloc_r>
 8006332:	4606      	mov	r6, r0
 8006334:	2800      	cmp	r0, #0
 8006336:	d1e1      	bne.n	80062fc <__ssputs_r+0x70>
 8006338:	6921      	ldr	r1, [r4, #16]
 800633a:	4650      	mov	r0, sl
 800633c:	f000 fab0 	bl	80068a0 <_free_r>
 8006340:	e7c7      	b.n	80062d2 <__ssputs_r+0x46>
	...

08006344 <_svfiprintf_r>:
 8006344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006348:	4698      	mov	r8, r3
 800634a:	898b      	ldrh	r3, [r1, #12]
 800634c:	061b      	lsls	r3, r3, #24
 800634e:	b09d      	sub	sp, #116	; 0x74
 8006350:	4607      	mov	r7, r0
 8006352:	460d      	mov	r5, r1
 8006354:	4614      	mov	r4, r2
 8006356:	d50e      	bpl.n	8006376 <_svfiprintf_r+0x32>
 8006358:	690b      	ldr	r3, [r1, #16]
 800635a:	b963      	cbnz	r3, 8006376 <_svfiprintf_r+0x32>
 800635c:	2140      	movs	r1, #64	; 0x40
 800635e:	f000 fb0b 	bl	8006978 <_malloc_r>
 8006362:	6028      	str	r0, [r5, #0]
 8006364:	6128      	str	r0, [r5, #16]
 8006366:	b920      	cbnz	r0, 8006372 <_svfiprintf_r+0x2e>
 8006368:	230c      	movs	r3, #12
 800636a:	603b      	str	r3, [r7, #0]
 800636c:	f04f 30ff 	mov.w	r0, #4294967295
 8006370:	e0d1      	b.n	8006516 <_svfiprintf_r+0x1d2>
 8006372:	2340      	movs	r3, #64	; 0x40
 8006374:	616b      	str	r3, [r5, #20]
 8006376:	2300      	movs	r3, #0
 8006378:	9309      	str	r3, [sp, #36]	; 0x24
 800637a:	2320      	movs	r3, #32
 800637c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006380:	f8cd 800c 	str.w	r8, [sp, #12]
 8006384:	2330      	movs	r3, #48	; 0x30
 8006386:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006530 <_svfiprintf_r+0x1ec>
 800638a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800638e:	f04f 0901 	mov.w	r9, #1
 8006392:	4623      	mov	r3, r4
 8006394:	469a      	mov	sl, r3
 8006396:	f813 2b01 	ldrb.w	r2, [r3], #1
 800639a:	b10a      	cbz	r2, 80063a0 <_svfiprintf_r+0x5c>
 800639c:	2a25      	cmp	r2, #37	; 0x25
 800639e:	d1f9      	bne.n	8006394 <_svfiprintf_r+0x50>
 80063a0:	ebba 0b04 	subs.w	fp, sl, r4
 80063a4:	d00b      	beq.n	80063be <_svfiprintf_r+0x7a>
 80063a6:	465b      	mov	r3, fp
 80063a8:	4622      	mov	r2, r4
 80063aa:	4629      	mov	r1, r5
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff ff6d 	bl	800628c <__ssputs_r>
 80063b2:	3001      	adds	r0, #1
 80063b4:	f000 80aa 	beq.w	800650c <_svfiprintf_r+0x1c8>
 80063b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063ba:	445a      	add	r2, fp
 80063bc:	9209      	str	r2, [sp, #36]	; 0x24
 80063be:	f89a 3000 	ldrb.w	r3, [sl]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 80a2 	beq.w	800650c <_svfiprintf_r+0x1c8>
 80063c8:	2300      	movs	r3, #0
 80063ca:	f04f 32ff 	mov.w	r2, #4294967295
 80063ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063d2:	f10a 0a01 	add.w	sl, sl, #1
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	9307      	str	r3, [sp, #28]
 80063da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80063de:	931a      	str	r3, [sp, #104]	; 0x68
 80063e0:	4654      	mov	r4, sl
 80063e2:	2205      	movs	r2, #5
 80063e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063e8:	4851      	ldr	r0, [pc, #324]	; (8006530 <_svfiprintf_r+0x1ec>)
 80063ea:	f7f9 fef9 	bl	80001e0 <memchr>
 80063ee:	9a04      	ldr	r2, [sp, #16]
 80063f0:	b9d8      	cbnz	r0, 800642a <_svfiprintf_r+0xe6>
 80063f2:	06d0      	lsls	r0, r2, #27
 80063f4:	bf44      	itt	mi
 80063f6:	2320      	movmi	r3, #32
 80063f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80063fc:	0711      	lsls	r1, r2, #28
 80063fe:	bf44      	itt	mi
 8006400:	232b      	movmi	r3, #43	; 0x2b
 8006402:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006406:	f89a 3000 	ldrb.w	r3, [sl]
 800640a:	2b2a      	cmp	r3, #42	; 0x2a
 800640c:	d015      	beq.n	800643a <_svfiprintf_r+0xf6>
 800640e:	9a07      	ldr	r2, [sp, #28]
 8006410:	4654      	mov	r4, sl
 8006412:	2000      	movs	r0, #0
 8006414:	f04f 0c0a 	mov.w	ip, #10
 8006418:	4621      	mov	r1, r4
 800641a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800641e:	3b30      	subs	r3, #48	; 0x30
 8006420:	2b09      	cmp	r3, #9
 8006422:	d94e      	bls.n	80064c2 <_svfiprintf_r+0x17e>
 8006424:	b1b0      	cbz	r0, 8006454 <_svfiprintf_r+0x110>
 8006426:	9207      	str	r2, [sp, #28]
 8006428:	e014      	b.n	8006454 <_svfiprintf_r+0x110>
 800642a:	eba0 0308 	sub.w	r3, r0, r8
 800642e:	fa09 f303 	lsl.w	r3, r9, r3
 8006432:	4313      	orrs	r3, r2
 8006434:	9304      	str	r3, [sp, #16]
 8006436:	46a2      	mov	sl, r4
 8006438:	e7d2      	b.n	80063e0 <_svfiprintf_r+0x9c>
 800643a:	9b03      	ldr	r3, [sp, #12]
 800643c:	1d19      	adds	r1, r3, #4
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	9103      	str	r1, [sp, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	bfbb      	ittet	lt
 8006446:	425b      	neglt	r3, r3
 8006448:	f042 0202 	orrlt.w	r2, r2, #2
 800644c:	9307      	strge	r3, [sp, #28]
 800644e:	9307      	strlt	r3, [sp, #28]
 8006450:	bfb8      	it	lt
 8006452:	9204      	strlt	r2, [sp, #16]
 8006454:	7823      	ldrb	r3, [r4, #0]
 8006456:	2b2e      	cmp	r3, #46	; 0x2e
 8006458:	d10c      	bne.n	8006474 <_svfiprintf_r+0x130>
 800645a:	7863      	ldrb	r3, [r4, #1]
 800645c:	2b2a      	cmp	r3, #42	; 0x2a
 800645e:	d135      	bne.n	80064cc <_svfiprintf_r+0x188>
 8006460:	9b03      	ldr	r3, [sp, #12]
 8006462:	1d1a      	adds	r2, r3, #4
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	9203      	str	r2, [sp, #12]
 8006468:	2b00      	cmp	r3, #0
 800646a:	bfb8      	it	lt
 800646c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006470:	3402      	adds	r4, #2
 8006472:	9305      	str	r3, [sp, #20]
 8006474:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006540 <_svfiprintf_r+0x1fc>
 8006478:	7821      	ldrb	r1, [r4, #0]
 800647a:	2203      	movs	r2, #3
 800647c:	4650      	mov	r0, sl
 800647e:	f7f9 feaf 	bl	80001e0 <memchr>
 8006482:	b140      	cbz	r0, 8006496 <_svfiprintf_r+0x152>
 8006484:	2340      	movs	r3, #64	; 0x40
 8006486:	eba0 000a 	sub.w	r0, r0, sl
 800648a:	fa03 f000 	lsl.w	r0, r3, r0
 800648e:	9b04      	ldr	r3, [sp, #16]
 8006490:	4303      	orrs	r3, r0
 8006492:	3401      	adds	r4, #1
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	f814 1b01 	ldrb.w	r1, [r4], #1
 800649a:	4826      	ldr	r0, [pc, #152]	; (8006534 <_svfiprintf_r+0x1f0>)
 800649c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064a0:	2206      	movs	r2, #6
 80064a2:	f7f9 fe9d 	bl	80001e0 <memchr>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	d038      	beq.n	800651c <_svfiprintf_r+0x1d8>
 80064aa:	4b23      	ldr	r3, [pc, #140]	; (8006538 <_svfiprintf_r+0x1f4>)
 80064ac:	bb1b      	cbnz	r3, 80064f6 <_svfiprintf_r+0x1b2>
 80064ae:	9b03      	ldr	r3, [sp, #12]
 80064b0:	3307      	adds	r3, #7
 80064b2:	f023 0307 	bic.w	r3, r3, #7
 80064b6:	3308      	adds	r3, #8
 80064b8:	9303      	str	r3, [sp, #12]
 80064ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064bc:	4433      	add	r3, r6
 80064be:	9309      	str	r3, [sp, #36]	; 0x24
 80064c0:	e767      	b.n	8006392 <_svfiprintf_r+0x4e>
 80064c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80064c6:	460c      	mov	r4, r1
 80064c8:	2001      	movs	r0, #1
 80064ca:	e7a5      	b.n	8006418 <_svfiprintf_r+0xd4>
 80064cc:	2300      	movs	r3, #0
 80064ce:	3401      	adds	r4, #1
 80064d0:	9305      	str	r3, [sp, #20]
 80064d2:	4619      	mov	r1, r3
 80064d4:	f04f 0c0a 	mov.w	ip, #10
 80064d8:	4620      	mov	r0, r4
 80064da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064de:	3a30      	subs	r2, #48	; 0x30
 80064e0:	2a09      	cmp	r2, #9
 80064e2:	d903      	bls.n	80064ec <_svfiprintf_r+0x1a8>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d0c5      	beq.n	8006474 <_svfiprintf_r+0x130>
 80064e8:	9105      	str	r1, [sp, #20]
 80064ea:	e7c3      	b.n	8006474 <_svfiprintf_r+0x130>
 80064ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80064f0:	4604      	mov	r4, r0
 80064f2:	2301      	movs	r3, #1
 80064f4:	e7f0      	b.n	80064d8 <_svfiprintf_r+0x194>
 80064f6:	ab03      	add	r3, sp, #12
 80064f8:	9300      	str	r3, [sp, #0]
 80064fa:	462a      	mov	r2, r5
 80064fc:	4b0f      	ldr	r3, [pc, #60]	; (800653c <_svfiprintf_r+0x1f8>)
 80064fe:	a904      	add	r1, sp, #16
 8006500:	4638      	mov	r0, r7
 8006502:	f3af 8000 	nop.w
 8006506:	1c42      	adds	r2, r0, #1
 8006508:	4606      	mov	r6, r0
 800650a:	d1d6      	bne.n	80064ba <_svfiprintf_r+0x176>
 800650c:	89ab      	ldrh	r3, [r5, #12]
 800650e:	065b      	lsls	r3, r3, #25
 8006510:	f53f af2c 	bmi.w	800636c <_svfiprintf_r+0x28>
 8006514:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006516:	b01d      	add	sp, #116	; 0x74
 8006518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800651c:	ab03      	add	r3, sp, #12
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	462a      	mov	r2, r5
 8006522:	4b06      	ldr	r3, [pc, #24]	; (800653c <_svfiprintf_r+0x1f8>)
 8006524:	a904      	add	r1, sp, #16
 8006526:	4638      	mov	r0, r7
 8006528:	f000 f87a 	bl	8006620 <_printf_i>
 800652c:	e7eb      	b.n	8006506 <_svfiprintf_r+0x1c2>
 800652e:	bf00      	nop
 8006530:	08006b9c 	.word	0x08006b9c
 8006534:	08006ba6 	.word	0x08006ba6
 8006538:	00000000 	.word	0x00000000
 800653c:	0800628d 	.word	0x0800628d
 8006540:	08006ba2 	.word	0x08006ba2

08006544 <_printf_common>:
 8006544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006548:	4616      	mov	r6, r2
 800654a:	4699      	mov	r9, r3
 800654c:	688a      	ldr	r2, [r1, #8]
 800654e:	690b      	ldr	r3, [r1, #16]
 8006550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006554:	4293      	cmp	r3, r2
 8006556:	bfb8      	it	lt
 8006558:	4613      	movlt	r3, r2
 800655a:	6033      	str	r3, [r6, #0]
 800655c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006560:	4607      	mov	r7, r0
 8006562:	460c      	mov	r4, r1
 8006564:	b10a      	cbz	r2, 800656a <_printf_common+0x26>
 8006566:	3301      	adds	r3, #1
 8006568:	6033      	str	r3, [r6, #0]
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	0699      	lsls	r1, r3, #26
 800656e:	bf42      	ittt	mi
 8006570:	6833      	ldrmi	r3, [r6, #0]
 8006572:	3302      	addmi	r3, #2
 8006574:	6033      	strmi	r3, [r6, #0]
 8006576:	6825      	ldr	r5, [r4, #0]
 8006578:	f015 0506 	ands.w	r5, r5, #6
 800657c:	d106      	bne.n	800658c <_printf_common+0x48>
 800657e:	f104 0a19 	add.w	sl, r4, #25
 8006582:	68e3      	ldr	r3, [r4, #12]
 8006584:	6832      	ldr	r2, [r6, #0]
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	42ab      	cmp	r3, r5
 800658a:	dc26      	bgt.n	80065da <_printf_common+0x96>
 800658c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006590:	1e13      	subs	r3, r2, #0
 8006592:	6822      	ldr	r2, [r4, #0]
 8006594:	bf18      	it	ne
 8006596:	2301      	movne	r3, #1
 8006598:	0692      	lsls	r2, r2, #26
 800659a:	d42b      	bmi.n	80065f4 <_printf_common+0xb0>
 800659c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065a0:	4649      	mov	r1, r9
 80065a2:	4638      	mov	r0, r7
 80065a4:	47c0      	blx	r8
 80065a6:	3001      	adds	r0, #1
 80065a8:	d01e      	beq.n	80065e8 <_printf_common+0xa4>
 80065aa:	6823      	ldr	r3, [r4, #0]
 80065ac:	68e5      	ldr	r5, [r4, #12]
 80065ae:	6832      	ldr	r2, [r6, #0]
 80065b0:	f003 0306 	and.w	r3, r3, #6
 80065b4:	2b04      	cmp	r3, #4
 80065b6:	bf08      	it	eq
 80065b8:	1aad      	subeq	r5, r5, r2
 80065ba:	68a3      	ldr	r3, [r4, #8]
 80065bc:	6922      	ldr	r2, [r4, #16]
 80065be:	bf0c      	ite	eq
 80065c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065c4:	2500      	movne	r5, #0
 80065c6:	4293      	cmp	r3, r2
 80065c8:	bfc4      	itt	gt
 80065ca:	1a9b      	subgt	r3, r3, r2
 80065cc:	18ed      	addgt	r5, r5, r3
 80065ce:	2600      	movs	r6, #0
 80065d0:	341a      	adds	r4, #26
 80065d2:	42b5      	cmp	r5, r6
 80065d4:	d11a      	bne.n	800660c <_printf_common+0xc8>
 80065d6:	2000      	movs	r0, #0
 80065d8:	e008      	b.n	80065ec <_printf_common+0xa8>
 80065da:	2301      	movs	r3, #1
 80065dc:	4652      	mov	r2, sl
 80065de:	4649      	mov	r1, r9
 80065e0:	4638      	mov	r0, r7
 80065e2:	47c0      	blx	r8
 80065e4:	3001      	adds	r0, #1
 80065e6:	d103      	bne.n	80065f0 <_printf_common+0xac>
 80065e8:	f04f 30ff 	mov.w	r0, #4294967295
 80065ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f0:	3501      	adds	r5, #1
 80065f2:	e7c6      	b.n	8006582 <_printf_common+0x3e>
 80065f4:	18e1      	adds	r1, r4, r3
 80065f6:	1c5a      	adds	r2, r3, #1
 80065f8:	2030      	movs	r0, #48	; 0x30
 80065fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80065fe:	4422      	add	r2, r4
 8006600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006608:	3302      	adds	r3, #2
 800660a:	e7c7      	b.n	800659c <_printf_common+0x58>
 800660c:	2301      	movs	r3, #1
 800660e:	4622      	mov	r2, r4
 8006610:	4649      	mov	r1, r9
 8006612:	4638      	mov	r0, r7
 8006614:	47c0      	blx	r8
 8006616:	3001      	adds	r0, #1
 8006618:	d0e6      	beq.n	80065e8 <_printf_common+0xa4>
 800661a:	3601      	adds	r6, #1
 800661c:	e7d9      	b.n	80065d2 <_printf_common+0x8e>
	...

08006620 <_printf_i>:
 8006620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006624:	7e0f      	ldrb	r7, [r1, #24]
 8006626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006628:	2f78      	cmp	r7, #120	; 0x78
 800662a:	4691      	mov	r9, r2
 800662c:	4680      	mov	r8, r0
 800662e:	460c      	mov	r4, r1
 8006630:	469a      	mov	sl, r3
 8006632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006636:	d807      	bhi.n	8006648 <_printf_i+0x28>
 8006638:	2f62      	cmp	r7, #98	; 0x62
 800663a:	d80a      	bhi.n	8006652 <_printf_i+0x32>
 800663c:	2f00      	cmp	r7, #0
 800663e:	f000 80d8 	beq.w	80067f2 <_printf_i+0x1d2>
 8006642:	2f58      	cmp	r7, #88	; 0x58
 8006644:	f000 80a3 	beq.w	800678e <_printf_i+0x16e>
 8006648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800664c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006650:	e03a      	b.n	80066c8 <_printf_i+0xa8>
 8006652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006656:	2b15      	cmp	r3, #21
 8006658:	d8f6      	bhi.n	8006648 <_printf_i+0x28>
 800665a:	a101      	add	r1, pc, #4	; (adr r1, 8006660 <_printf_i+0x40>)
 800665c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006660:	080066b9 	.word	0x080066b9
 8006664:	080066cd 	.word	0x080066cd
 8006668:	08006649 	.word	0x08006649
 800666c:	08006649 	.word	0x08006649
 8006670:	08006649 	.word	0x08006649
 8006674:	08006649 	.word	0x08006649
 8006678:	080066cd 	.word	0x080066cd
 800667c:	08006649 	.word	0x08006649
 8006680:	08006649 	.word	0x08006649
 8006684:	08006649 	.word	0x08006649
 8006688:	08006649 	.word	0x08006649
 800668c:	080067d9 	.word	0x080067d9
 8006690:	080066fd 	.word	0x080066fd
 8006694:	080067bb 	.word	0x080067bb
 8006698:	08006649 	.word	0x08006649
 800669c:	08006649 	.word	0x08006649
 80066a0:	080067fb 	.word	0x080067fb
 80066a4:	08006649 	.word	0x08006649
 80066a8:	080066fd 	.word	0x080066fd
 80066ac:	08006649 	.word	0x08006649
 80066b0:	08006649 	.word	0x08006649
 80066b4:	080067c3 	.word	0x080067c3
 80066b8:	682b      	ldr	r3, [r5, #0]
 80066ba:	1d1a      	adds	r2, r3, #4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	602a      	str	r2, [r5, #0]
 80066c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80066c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80066c8:	2301      	movs	r3, #1
 80066ca:	e0a3      	b.n	8006814 <_printf_i+0x1f4>
 80066cc:	6820      	ldr	r0, [r4, #0]
 80066ce:	6829      	ldr	r1, [r5, #0]
 80066d0:	0606      	lsls	r6, r0, #24
 80066d2:	f101 0304 	add.w	r3, r1, #4
 80066d6:	d50a      	bpl.n	80066ee <_printf_i+0xce>
 80066d8:	680e      	ldr	r6, [r1, #0]
 80066da:	602b      	str	r3, [r5, #0]
 80066dc:	2e00      	cmp	r6, #0
 80066de:	da03      	bge.n	80066e8 <_printf_i+0xc8>
 80066e0:	232d      	movs	r3, #45	; 0x2d
 80066e2:	4276      	negs	r6, r6
 80066e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e8:	485e      	ldr	r0, [pc, #376]	; (8006864 <_printf_i+0x244>)
 80066ea:	230a      	movs	r3, #10
 80066ec:	e019      	b.n	8006722 <_printf_i+0x102>
 80066ee:	680e      	ldr	r6, [r1, #0]
 80066f0:	602b      	str	r3, [r5, #0]
 80066f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80066f6:	bf18      	it	ne
 80066f8:	b236      	sxthne	r6, r6
 80066fa:	e7ef      	b.n	80066dc <_printf_i+0xbc>
 80066fc:	682b      	ldr	r3, [r5, #0]
 80066fe:	6820      	ldr	r0, [r4, #0]
 8006700:	1d19      	adds	r1, r3, #4
 8006702:	6029      	str	r1, [r5, #0]
 8006704:	0601      	lsls	r1, r0, #24
 8006706:	d501      	bpl.n	800670c <_printf_i+0xec>
 8006708:	681e      	ldr	r6, [r3, #0]
 800670a:	e002      	b.n	8006712 <_printf_i+0xf2>
 800670c:	0646      	lsls	r6, r0, #25
 800670e:	d5fb      	bpl.n	8006708 <_printf_i+0xe8>
 8006710:	881e      	ldrh	r6, [r3, #0]
 8006712:	4854      	ldr	r0, [pc, #336]	; (8006864 <_printf_i+0x244>)
 8006714:	2f6f      	cmp	r7, #111	; 0x6f
 8006716:	bf0c      	ite	eq
 8006718:	2308      	moveq	r3, #8
 800671a:	230a      	movne	r3, #10
 800671c:	2100      	movs	r1, #0
 800671e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006722:	6865      	ldr	r5, [r4, #4]
 8006724:	60a5      	str	r5, [r4, #8]
 8006726:	2d00      	cmp	r5, #0
 8006728:	bfa2      	ittt	ge
 800672a:	6821      	ldrge	r1, [r4, #0]
 800672c:	f021 0104 	bicge.w	r1, r1, #4
 8006730:	6021      	strge	r1, [r4, #0]
 8006732:	b90e      	cbnz	r6, 8006738 <_printf_i+0x118>
 8006734:	2d00      	cmp	r5, #0
 8006736:	d04d      	beq.n	80067d4 <_printf_i+0x1b4>
 8006738:	4615      	mov	r5, r2
 800673a:	fbb6 f1f3 	udiv	r1, r6, r3
 800673e:	fb03 6711 	mls	r7, r3, r1, r6
 8006742:	5dc7      	ldrb	r7, [r0, r7]
 8006744:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006748:	4637      	mov	r7, r6
 800674a:	42bb      	cmp	r3, r7
 800674c:	460e      	mov	r6, r1
 800674e:	d9f4      	bls.n	800673a <_printf_i+0x11a>
 8006750:	2b08      	cmp	r3, #8
 8006752:	d10b      	bne.n	800676c <_printf_i+0x14c>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	07de      	lsls	r6, r3, #31
 8006758:	d508      	bpl.n	800676c <_printf_i+0x14c>
 800675a:	6923      	ldr	r3, [r4, #16]
 800675c:	6861      	ldr	r1, [r4, #4]
 800675e:	4299      	cmp	r1, r3
 8006760:	bfde      	ittt	le
 8006762:	2330      	movle	r3, #48	; 0x30
 8006764:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006768:	f105 35ff 	addle.w	r5, r5, #4294967295
 800676c:	1b52      	subs	r2, r2, r5
 800676e:	6122      	str	r2, [r4, #16]
 8006770:	f8cd a000 	str.w	sl, [sp]
 8006774:	464b      	mov	r3, r9
 8006776:	aa03      	add	r2, sp, #12
 8006778:	4621      	mov	r1, r4
 800677a:	4640      	mov	r0, r8
 800677c:	f7ff fee2 	bl	8006544 <_printf_common>
 8006780:	3001      	adds	r0, #1
 8006782:	d14c      	bne.n	800681e <_printf_i+0x1fe>
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	b004      	add	sp, #16
 800678a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678e:	4835      	ldr	r0, [pc, #212]	; (8006864 <_printf_i+0x244>)
 8006790:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006794:	6829      	ldr	r1, [r5, #0]
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	f851 6b04 	ldr.w	r6, [r1], #4
 800679c:	6029      	str	r1, [r5, #0]
 800679e:	061d      	lsls	r5, r3, #24
 80067a0:	d514      	bpl.n	80067cc <_printf_i+0x1ac>
 80067a2:	07df      	lsls	r7, r3, #31
 80067a4:	bf44      	itt	mi
 80067a6:	f043 0320 	orrmi.w	r3, r3, #32
 80067aa:	6023      	strmi	r3, [r4, #0]
 80067ac:	b91e      	cbnz	r6, 80067b6 <_printf_i+0x196>
 80067ae:	6823      	ldr	r3, [r4, #0]
 80067b0:	f023 0320 	bic.w	r3, r3, #32
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	2310      	movs	r3, #16
 80067b8:	e7b0      	b.n	800671c <_printf_i+0xfc>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	f043 0320 	orr.w	r3, r3, #32
 80067c0:	6023      	str	r3, [r4, #0]
 80067c2:	2378      	movs	r3, #120	; 0x78
 80067c4:	4828      	ldr	r0, [pc, #160]	; (8006868 <_printf_i+0x248>)
 80067c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80067ca:	e7e3      	b.n	8006794 <_printf_i+0x174>
 80067cc:	0659      	lsls	r1, r3, #25
 80067ce:	bf48      	it	mi
 80067d0:	b2b6      	uxthmi	r6, r6
 80067d2:	e7e6      	b.n	80067a2 <_printf_i+0x182>
 80067d4:	4615      	mov	r5, r2
 80067d6:	e7bb      	b.n	8006750 <_printf_i+0x130>
 80067d8:	682b      	ldr	r3, [r5, #0]
 80067da:	6826      	ldr	r6, [r4, #0]
 80067dc:	6961      	ldr	r1, [r4, #20]
 80067de:	1d18      	adds	r0, r3, #4
 80067e0:	6028      	str	r0, [r5, #0]
 80067e2:	0635      	lsls	r5, r6, #24
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	d501      	bpl.n	80067ec <_printf_i+0x1cc>
 80067e8:	6019      	str	r1, [r3, #0]
 80067ea:	e002      	b.n	80067f2 <_printf_i+0x1d2>
 80067ec:	0670      	lsls	r0, r6, #25
 80067ee:	d5fb      	bpl.n	80067e8 <_printf_i+0x1c8>
 80067f0:	8019      	strh	r1, [r3, #0]
 80067f2:	2300      	movs	r3, #0
 80067f4:	6123      	str	r3, [r4, #16]
 80067f6:	4615      	mov	r5, r2
 80067f8:	e7ba      	b.n	8006770 <_printf_i+0x150>
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	1d1a      	adds	r2, r3, #4
 80067fe:	602a      	str	r2, [r5, #0]
 8006800:	681d      	ldr	r5, [r3, #0]
 8006802:	6862      	ldr	r2, [r4, #4]
 8006804:	2100      	movs	r1, #0
 8006806:	4628      	mov	r0, r5
 8006808:	f7f9 fcea 	bl	80001e0 <memchr>
 800680c:	b108      	cbz	r0, 8006812 <_printf_i+0x1f2>
 800680e:	1b40      	subs	r0, r0, r5
 8006810:	6060      	str	r0, [r4, #4]
 8006812:	6863      	ldr	r3, [r4, #4]
 8006814:	6123      	str	r3, [r4, #16]
 8006816:	2300      	movs	r3, #0
 8006818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800681c:	e7a8      	b.n	8006770 <_printf_i+0x150>
 800681e:	6923      	ldr	r3, [r4, #16]
 8006820:	462a      	mov	r2, r5
 8006822:	4649      	mov	r1, r9
 8006824:	4640      	mov	r0, r8
 8006826:	47d0      	blx	sl
 8006828:	3001      	adds	r0, #1
 800682a:	d0ab      	beq.n	8006784 <_printf_i+0x164>
 800682c:	6823      	ldr	r3, [r4, #0]
 800682e:	079b      	lsls	r3, r3, #30
 8006830:	d413      	bmi.n	800685a <_printf_i+0x23a>
 8006832:	68e0      	ldr	r0, [r4, #12]
 8006834:	9b03      	ldr	r3, [sp, #12]
 8006836:	4298      	cmp	r0, r3
 8006838:	bfb8      	it	lt
 800683a:	4618      	movlt	r0, r3
 800683c:	e7a4      	b.n	8006788 <_printf_i+0x168>
 800683e:	2301      	movs	r3, #1
 8006840:	4632      	mov	r2, r6
 8006842:	4649      	mov	r1, r9
 8006844:	4640      	mov	r0, r8
 8006846:	47d0      	blx	sl
 8006848:	3001      	adds	r0, #1
 800684a:	d09b      	beq.n	8006784 <_printf_i+0x164>
 800684c:	3501      	adds	r5, #1
 800684e:	68e3      	ldr	r3, [r4, #12]
 8006850:	9903      	ldr	r1, [sp, #12]
 8006852:	1a5b      	subs	r3, r3, r1
 8006854:	42ab      	cmp	r3, r5
 8006856:	dcf2      	bgt.n	800683e <_printf_i+0x21e>
 8006858:	e7eb      	b.n	8006832 <_printf_i+0x212>
 800685a:	2500      	movs	r5, #0
 800685c:	f104 0619 	add.w	r6, r4, #25
 8006860:	e7f5      	b.n	800684e <_printf_i+0x22e>
 8006862:	bf00      	nop
 8006864:	08006bad 	.word	0x08006bad
 8006868:	08006bbe 	.word	0x08006bbe

0800686c <memmove>:
 800686c:	4288      	cmp	r0, r1
 800686e:	b510      	push	{r4, lr}
 8006870:	eb01 0402 	add.w	r4, r1, r2
 8006874:	d902      	bls.n	800687c <memmove+0x10>
 8006876:	4284      	cmp	r4, r0
 8006878:	4623      	mov	r3, r4
 800687a:	d807      	bhi.n	800688c <memmove+0x20>
 800687c:	1e43      	subs	r3, r0, #1
 800687e:	42a1      	cmp	r1, r4
 8006880:	d008      	beq.n	8006894 <memmove+0x28>
 8006882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800688a:	e7f8      	b.n	800687e <memmove+0x12>
 800688c:	4402      	add	r2, r0
 800688e:	4601      	mov	r1, r0
 8006890:	428a      	cmp	r2, r1
 8006892:	d100      	bne.n	8006896 <memmove+0x2a>
 8006894:	bd10      	pop	{r4, pc}
 8006896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800689a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800689e:	e7f7      	b.n	8006890 <memmove+0x24>

080068a0 <_free_r>:
 80068a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068a2:	2900      	cmp	r1, #0
 80068a4:	d044      	beq.n	8006930 <_free_r+0x90>
 80068a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068aa:	9001      	str	r0, [sp, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	f1a1 0404 	sub.w	r4, r1, #4
 80068b2:	bfb8      	it	lt
 80068b4:	18e4      	addlt	r4, r4, r3
 80068b6:	f000 f913 	bl	8006ae0 <__malloc_lock>
 80068ba:	4a1e      	ldr	r2, [pc, #120]	; (8006934 <_free_r+0x94>)
 80068bc:	9801      	ldr	r0, [sp, #4]
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	b933      	cbnz	r3, 80068d0 <_free_r+0x30>
 80068c2:	6063      	str	r3, [r4, #4]
 80068c4:	6014      	str	r4, [r2, #0]
 80068c6:	b003      	add	sp, #12
 80068c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068cc:	f000 b90e 	b.w	8006aec <__malloc_unlock>
 80068d0:	42a3      	cmp	r3, r4
 80068d2:	d908      	bls.n	80068e6 <_free_r+0x46>
 80068d4:	6825      	ldr	r5, [r4, #0]
 80068d6:	1961      	adds	r1, r4, r5
 80068d8:	428b      	cmp	r3, r1
 80068da:	bf01      	itttt	eq
 80068dc:	6819      	ldreq	r1, [r3, #0]
 80068de:	685b      	ldreq	r3, [r3, #4]
 80068e0:	1949      	addeq	r1, r1, r5
 80068e2:	6021      	streq	r1, [r4, #0]
 80068e4:	e7ed      	b.n	80068c2 <_free_r+0x22>
 80068e6:	461a      	mov	r2, r3
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	b10b      	cbz	r3, 80068f0 <_free_r+0x50>
 80068ec:	42a3      	cmp	r3, r4
 80068ee:	d9fa      	bls.n	80068e6 <_free_r+0x46>
 80068f0:	6811      	ldr	r1, [r2, #0]
 80068f2:	1855      	adds	r5, r2, r1
 80068f4:	42a5      	cmp	r5, r4
 80068f6:	d10b      	bne.n	8006910 <_free_r+0x70>
 80068f8:	6824      	ldr	r4, [r4, #0]
 80068fa:	4421      	add	r1, r4
 80068fc:	1854      	adds	r4, r2, r1
 80068fe:	42a3      	cmp	r3, r4
 8006900:	6011      	str	r1, [r2, #0]
 8006902:	d1e0      	bne.n	80068c6 <_free_r+0x26>
 8006904:	681c      	ldr	r4, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	6053      	str	r3, [r2, #4]
 800690a:	4421      	add	r1, r4
 800690c:	6011      	str	r1, [r2, #0]
 800690e:	e7da      	b.n	80068c6 <_free_r+0x26>
 8006910:	d902      	bls.n	8006918 <_free_r+0x78>
 8006912:	230c      	movs	r3, #12
 8006914:	6003      	str	r3, [r0, #0]
 8006916:	e7d6      	b.n	80068c6 <_free_r+0x26>
 8006918:	6825      	ldr	r5, [r4, #0]
 800691a:	1961      	adds	r1, r4, r5
 800691c:	428b      	cmp	r3, r1
 800691e:	bf04      	itt	eq
 8006920:	6819      	ldreq	r1, [r3, #0]
 8006922:	685b      	ldreq	r3, [r3, #4]
 8006924:	6063      	str	r3, [r4, #4]
 8006926:	bf04      	itt	eq
 8006928:	1949      	addeq	r1, r1, r5
 800692a:	6021      	streq	r1, [r4, #0]
 800692c:	6054      	str	r4, [r2, #4]
 800692e:	e7ca      	b.n	80068c6 <_free_r+0x26>
 8006930:	b003      	add	sp, #12
 8006932:	bd30      	pop	{r4, r5, pc}
 8006934:	20000448 	.word	0x20000448

08006938 <sbrk_aligned>:
 8006938:	b570      	push	{r4, r5, r6, lr}
 800693a:	4e0e      	ldr	r6, [pc, #56]	; (8006974 <sbrk_aligned+0x3c>)
 800693c:	460c      	mov	r4, r1
 800693e:	6831      	ldr	r1, [r6, #0]
 8006940:	4605      	mov	r5, r0
 8006942:	b911      	cbnz	r1, 800694a <sbrk_aligned+0x12>
 8006944:	f000 f8bc 	bl	8006ac0 <_sbrk_r>
 8006948:	6030      	str	r0, [r6, #0]
 800694a:	4621      	mov	r1, r4
 800694c:	4628      	mov	r0, r5
 800694e:	f000 f8b7 	bl	8006ac0 <_sbrk_r>
 8006952:	1c43      	adds	r3, r0, #1
 8006954:	d00a      	beq.n	800696c <sbrk_aligned+0x34>
 8006956:	1cc4      	adds	r4, r0, #3
 8006958:	f024 0403 	bic.w	r4, r4, #3
 800695c:	42a0      	cmp	r0, r4
 800695e:	d007      	beq.n	8006970 <sbrk_aligned+0x38>
 8006960:	1a21      	subs	r1, r4, r0
 8006962:	4628      	mov	r0, r5
 8006964:	f000 f8ac 	bl	8006ac0 <_sbrk_r>
 8006968:	3001      	adds	r0, #1
 800696a:	d101      	bne.n	8006970 <sbrk_aligned+0x38>
 800696c:	f04f 34ff 	mov.w	r4, #4294967295
 8006970:	4620      	mov	r0, r4
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	2000044c 	.word	0x2000044c

08006978 <_malloc_r>:
 8006978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800697c:	1ccd      	adds	r5, r1, #3
 800697e:	f025 0503 	bic.w	r5, r5, #3
 8006982:	3508      	adds	r5, #8
 8006984:	2d0c      	cmp	r5, #12
 8006986:	bf38      	it	cc
 8006988:	250c      	movcc	r5, #12
 800698a:	2d00      	cmp	r5, #0
 800698c:	4607      	mov	r7, r0
 800698e:	db01      	blt.n	8006994 <_malloc_r+0x1c>
 8006990:	42a9      	cmp	r1, r5
 8006992:	d905      	bls.n	80069a0 <_malloc_r+0x28>
 8006994:	230c      	movs	r3, #12
 8006996:	603b      	str	r3, [r7, #0]
 8006998:	2600      	movs	r6, #0
 800699a:	4630      	mov	r0, r6
 800699c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80069a0:	4e2e      	ldr	r6, [pc, #184]	; (8006a5c <_malloc_r+0xe4>)
 80069a2:	f000 f89d 	bl	8006ae0 <__malloc_lock>
 80069a6:	6833      	ldr	r3, [r6, #0]
 80069a8:	461c      	mov	r4, r3
 80069aa:	bb34      	cbnz	r4, 80069fa <_malloc_r+0x82>
 80069ac:	4629      	mov	r1, r5
 80069ae:	4638      	mov	r0, r7
 80069b0:	f7ff ffc2 	bl	8006938 <sbrk_aligned>
 80069b4:	1c43      	adds	r3, r0, #1
 80069b6:	4604      	mov	r4, r0
 80069b8:	d14d      	bne.n	8006a56 <_malloc_r+0xde>
 80069ba:	6834      	ldr	r4, [r6, #0]
 80069bc:	4626      	mov	r6, r4
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d140      	bne.n	8006a44 <_malloc_r+0xcc>
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	4631      	mov	r1, r6
 80069c6:	4638      	mov	r0, r7
 80069c8:	eb04 0803 	add.w	r8, r4, r3
 80069cc:	f000 f878 	bl	8006ac0 <_sbrk_r>
 80069d0:	4580      	cmp	r8, r0
 80069d2:	d13a      	bne.n	8006a4a <_malloc_r+0xd2>
 80069d4:	6821      	ldr	r1, [r4, #0]
 80069d6:	3503      	adds	r5, #3
 80069d8:	1a6d      	subs	r5, r5, r1
 80069da:	f025 0503 	bic.w	r5, r5, #3
 80069de:	3508      	adds	r5, #8
 80069e0:	2d0c      	cmp	r5, #12
 80069e2:	bf38      	it	cc
 80069e4:	250c      	movcc	r5, #12
 80069e6:	4629      	mov	r1, r5
 80069e8:	4638      	mov	r0, r7
 80069ea:	f7ff ffa5 	bl	8006938 <sbrk_aligned>
 80069ee:	3001      	adds	r0, #1
 80069f0:	d02b      	beq.n	8006a4a <_malloc_r+0xd2>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	442b      	add	r3, r5
 80069f6:	6023      	str	r3, [r4, #0]
 80069f8:	e00e      	b.n	8006a18 <_malloc_r+0xa0>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	1b52      	subs	r2, r2, r5
 80069fe:	d41e      	bmi.n	8006a3e <_malloc_r+0xc6>
 8006a00:	2a0b      	cmp	r2, #11
 8006a02:	d916      	bls.n	8006a32 <_malloc_r+0xba>
 8006a04:	1961      	adds	r1, r4, r5
 8006a06:	42a3      	cmp	r3, r4
 8006a08:	6025      	str	r5, [r4, #0]
 8006a0a:	bf18      	it	ne
 8006a0c:	6059      	strne	r1, [r3, #4]
 8006a0e:	6863      	ldr	r3, [r4, #4]
 8006a10:	bf08      	it	eq
 8006a12:	6031      	streq	r1, [r6, #0]
 8006a14:	5162      	str	r2, [r4, r5]
 8006a16:	604b      	str	r3, [r1, #4]
 8006a18:	4638      	mov	r0, r7
 8006a1a:	f104 060b 	add.w	r6, r4, #11
 8006a1e:	f000 f865 	bl	8006aec <__malloc_unlock>
 8006a22:	f026 0607 	bic.w	r6, r6, #7
 8006a26:	1d23      	adds	r3, r4, #4
 8006a28:	1af2      	subs	r2, r6, r3
 8006a2a:	d0b6      	beq.n	800699a <_malloc_r+0x22>
 8006a2c:	1b9b      	subs	r3, r3, r6
 8006a2e:	50a3      	str	r3, [r4, r2]
 8006a30:	e7b3      	b.n	800699a <_malloc_r+0x22>
 8006a32:	6862      	ldr	r2, [r4, #4]
 8006a34:	42a3      	cmp	r3, r4
 8006a36:	bf0c      	ite	eq
 8006a38:	6032      	streq	r2, [r6, #0]
 8006a3a:	605a      	strne	r2, [r3, #4]
 8006a3c:	e7ec      	b.n	8006a18 <_malloc_r+0xa0>
 8006a3e:	4623      	mov	r3, r4
 8006a40:	6864      	ldr	r4, [r4, #4]
 8006a42:	e7b2      	b.n	80069aa <_malloc_r+0x32>
 8006a44:	4634      	mov	r4, r6
 8006a46:	6876      	ldr	r6, [r6, #4]
 8006a48:	e7b9      	b.n	80069be <_malloc_r+0x46>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	603b      	str	r3, [r7, #0]
 8006a4e:	4638      	mov	r0, r7
 8006a50:	f000 f84c 	bl	8006aec <__malloc_unlock>
 8006a54:	e7a1      	b.n	800699a <_malloc_r+0x22>
 8006a56:	6025      	str	r5, [r4, #0]
 8006a58:	e7de      	b.n	8006a18 <_malloc_r+0xa0>
 8006a5a:	bf00      	nop
 8006a5c:	20000448 	.word	0x20000448

08006a60 <_realloc_r>:
 8006a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a64:	4680      	mov	r8, r0
 8006a66:	4614      	mov	r4, r2
 8006a68:	460e      	mov	r6, r1
 8006a6a:	b921      	cbnz	r1, 8006a76 <_realloc_r+0x16>
 8006a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	4611      	mov	r1, r2
 8006a72:	f7ff bf81 	b.w	8006978 <_malloc_r>
 8006a76:	b92a      	cbnz	r2, 8006a84 <_realloc_r+0x24>
 8006a78:	f7ff ff12 	bl	80068a0 <_free_r>
 8006a7c:	4625      	mov	r5, r4
 8006a7e:	4628      	mov	r0, r5
 8006a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a84:	f000 f838 	bl	8006af8 <_malloc_usable_size_r>
 8006a88:	4284      	cmp	r4, r0
 8006a8a:	4607      	mov	r7, r0
 8006a8c:	d802      	bhi.n	8006a94 <_realloc_r+0x34>
 8006a8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006a92:	d812      	bhi.n	8006aba <_realloc_r+0x5a>
 8006a94:	4621      	mov	r1, r4
 8006a96:	4640      	mov	r0, r8
 8006a98:	f7ff ff6e 	bl	8006978 <_malloc_r>
 8006a9c:	4605      	mov	r5, r0
 8006a9e:	2800      	cmp	r0, #0
 8006aa0:	d0ed      	beq.n	8006a7e <_realloc_r+0x1e>
 8006aa2:	42bc      	cmp	r4, r7
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	bf28      	it	cs
 8006aaa:	463a      	movcs	r2, r7
 8006aac:	f7ff fbb8 	bl	8006220 <memcpy>
 8006ab0:	4631      	mov	r1, r6
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	f7ff fef4 	bl	80068a0 <_free_r>
 8006ab8:	e7e1      	b.n	8006a7e <_realloc_r+0x1e>
 8006aba:	4635      	mov	r5, r6
 8006abc:	e7df      	b.n	8006a7e <_realloc_r+0x1e>
	...

08006ac0 <_sbrk_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	4d06      	ldr	r5, [pc, #24]	; (8006adc <_sbrk_r+0x1c>)
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	602b      	str	r3, [r5, #0]
 8006acc:	f7fb faa0 	bl	8002010 <_sbrk>
 8006ad0:	1c43      	adds	r3, r0, #1
 8006ad2:	d102      	bne.n	8006ada <_sbrk_r+0x1a>
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	b103      	cbz	r3, 8006ada <_sbrk_r+0x1a>
 8006ad8:	6023      	str	r3, [r4, #0]
 8006ada:	bd38      	pop	{r3, r4, r5, pc}
 8006adc:	20000450 	.word	0x20000450

08006ae0 <__malloc_lock>:
 8006ae0:	4801      	ldr	r0, [pc, #4]	; (8006ae8 <__malloc_lock+0x8>)
 8006ae2:	f000 b811 	b.w	8006b08 <__retarget_lock_acquire_recursive>
 8006ae6:	bf00      	nop
 8006ae8:	20000454 	.word	0x20000454

08006aec <__malloc_unlock>:
 8006aec:	4801      	ldr	r0, [pc, #4]	; (8006af4 <__malloc_unlock+0x8>)
 8006aee:	f000 b80c 	b.w	8006b0a <__retarget_lock_release_recursive>
 8006af2:	bf00      	nop
 8006af4:	20000454 	.word	0x20000454

08006af8 <_malloc_usable_size_r>:
 8006af8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006afc:	1f18      	subs	r0, r3, #4
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	bfbc      	itt	lt
 8006b02:	580b      	ldrlt	r3, [r1, r0]
 8006b04:	18c0      	addlt	r0, r0, r3
 8006b06:	4770      	bx	lr

08006b08 <__retarget_lock_acquire_recursive>:
 8006b08:	4770      	bx	lr

08006b0a <__retarget_lock_release_recursive>:
 8006b0a:	4770      	bx	lr

08006b0c <_init>:
 8006b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b0e:	bf00      	nop
 8006b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b12:	bc08      	pop	{r3}
 8006b14:	469e      	mov	lr, r3
 8006b16:	4770      	bx	lr

08006b18 <_fini>:
 8006b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b1a:	bf00      	nop
 8006b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b1e:	bc08      	pop	{r3}
 8006b20:	469e      	mov	lr, r3
 8006b22:	4770      	bx	lr
